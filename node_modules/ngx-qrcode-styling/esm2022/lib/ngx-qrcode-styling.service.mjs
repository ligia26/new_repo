import { Injectable } from '@angular/core';
import { AsyncSubject } from 'rxjs';
import { deepUpdate, defaultTemplate, drawQrcode } from './ngx-qrcode-styling.helper';
import * as i0 from "@angular/core";
class NgxQrcodeStylingService {
    /**
     * create
     * @param config
     * @param container
     * @returns
     */
    create(config, container) {
        return drawQrcode(defaultTemplate(config), container);
    }
    /**
     * update
     * @param config
     * @param configUpdate
     * @param container
     * @returns
     */
    update(config, configUpdate, container) {
        const subject = new AsyncSubject();
        (async function () {
            const conf = await deepUpdate(defaultTemplate(config), defaultTemplate(configUpdate));
            drawQrcode(conf, container).subscribe(s => {
                subject.next(s);
                subject.complete();
            });
        })();
        return subject;
    }
    /**
     * download image
     * @param fileName eg: demo.png
     * @param container
     * @param timeout
     * @returns
     */
    download(container, fileName = '', timeout = 0) {
        const subject = new AsyncSubject();
        const _fileName = (type) => {
            if (!fileName) {
                fileName = `ngx_qrcode_styling_${Date.now()}.${type}`;
            }
        };
        const _download = (dataURL) => {
            const link = document.createElement('a');
            link.download = fileName;
            link.href = dataURL;
            link.click();
            link.remove();
        };
        const _complete = (url) => {
            if (url) {
                _download(url);
                subject.next({ fileName, container, url: url });
                subject.complete();
            }
            else {
                subject.error('Container not found!');
                subject.complete();
            }
        };
        setTimeout(() => {
            const canvas = container?.querySelector('canvas');
            if (canvas) {
                _fileName('png');
                const typeImg = fileName ? fileName?.split('.')?.slice(-1)?.toString() : 'png';
                canvas.toBlob((blob) => _complete(URL.createObjectURL(blob)), 'image/' + typeImg);
            }
            else {
                const svg = container?.querySelector('svg');
                if (svg) {
                    _fileName('svg');
                    const svgData = svg.outerHTML;
                    const svgBlob = new Blob([svgData], { type: "image/svg+xml;charset=utf-8" });
                    const svgUrl = URL.createObjectURL(svgBlob);
                    _complete(svgUrl);
                }
                else {
                    _complete('');
                }
            }
        }, timeout);
        return subject;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: NgxQrcodeStylingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: NgxQrcodeStylingService, providedIn: 'root' }); }
}
export { NgxQrcodeStylingService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: NgxQrcodeStylingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXFyY29kZS1zdHlsaW5nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcXJjb2RlLXN0eWxpbmcvc3JjL2xpYi9uZ3gtcXJjb2RlLXN0eWxpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0FBR3RGLE1BR2EsdUJBQXVCO0lBRWxDOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLE1BQWUsRUFBRSxTQUFnRjtRQUM3RyxPQUFPLFVBQVUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxNQUFlLEVBQUUsWUFBcUIsRUFBRSxTQUFnRjtRQUNwSSxNQUFNLE9BQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ25DLENBQUMsS0FBSztZQUNKLE1BQU0sSUFBSSxHQUFHLE1BQU0sVUFBVSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsRUFBRSxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN0RixVQUFVLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDeEMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNMLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7Ozs7O09BTUc7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bnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBc3luY1N1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IGRlZXBVcGRhdGUsIGRlZmF1bHRUZW1wbGF0ZSwgZHJhd1FyY29kZSB9IGZyb20gJy4vbmd4LXFyY29kZS1zdHlsaW5nLmhlbHBlcic7XHJcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tICcuL25neC1xcmNvZGUtc3R5bGluZy5vcHRpb25zJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFFyY29kZVN0eWxpbmdTZXJ2aWNlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogY3JlYXRlXHJcbiAgICogQHBhcmFtIGNvbmZpZyBcclxuICAgKiBAcGFyYW0gY29udGFpbmVyIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGUoY29uZmlnOiBPcHRpb25zLCBjb250YWluZXI6IEhUTUxFbGVtZW50IHwgSFRNTFZpZGVvRWxlbWVudCB8IEhUTUxDYW52YXNFbGVtZW50IHwgU1ZHRWxlbWVudCB8IGFueSk6IEFzeW5jU3ViamVjdDxhbnk+IHtcclxuICAgIHJldHVybiBkcmF3UXJjb2RlKGRlZmF1bHRUZW1wbGF0ZShjb25maWcpLCBjb250YWluZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogdXBkYXRlXHJcbiAgICogQHBhcmFtIGNvbmZpZyBcclxuICAgKiBAcGFyYW0gY29uZmlnVXBkYXRlIFxyXG4gICAqIEBwYXJhbSBjb250YWluZXIgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIHVwZGF0ZShjb25maWc6IE9wdGlvbnMsIGNvbmZpZ1VwZGF0ZTogT3B0aW9ucywgY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IEhUTUxWaWRlb0VsZW1lbnQgfCBIVE1MQ2FudmFzRWxlbWVudCB8IFNWR0VsZW1lbnQgfCBhbnkpOiBBc3luY1N1YmplY3Q8YW55PiB7XHJcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdCgpO1xyXG4gICAgKGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgY29uZiA9IGF3YWl0IGRlZXBVcGRhdGUoZGVmYXVsdFRlbXBsYXRlKGNvbmZpZyksIGRlZmF1bHRUZW1wbGF0ZShjb25maWdVcGRhdGUpKTtcclxuICAgICAgZHJhd1FyY29kZShjb25mLCBjb250YWluZXIpLnN1YnNjcmliZShzID0+IHtcclxuICAgICAgICBzdWJqZWN0Lm5leHQocyk7XHJcbiAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pKCk7XHJcbiAgICByZXR1cm4gc3ViamVjdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGRvd25sb2FkIGltYWdlXHJcbiAgICogQHBhcmFtIGZpbGVOYW1lIGVnOiBkZW1vLnBuZ1xyXG4gICAqIEBwYXJhbSBjb250YWluZXIgXHJcbiAgICogQHBhcmFtIHRpbWVvdXQgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGRvd25sb2FkKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBIVE1MVmlkZW9FbGVtZW50IHwgSFRNTENhbnZhc0VsZW1lbnQgfCBTVkdFbGVtZW50IHwgYW55LCBmaWxlTmFtZSA9ICcnLCB0aW1lb3V0ID0gMCk6IEFzeW5jU3ViamVjdDxhbnk+IHtcclxuICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0KCk7XHJcblxyXG4gICAgY29uc3QgX2ZpbGVOYW1lID0gKHR5cGU6IHN0cmluZykgPT4ge1xyXG4gICAgICBpZiAoIWZpbGVOYW1lKSB7XHJcbiAgICAgICAgZmlsZU5hbWUgPSBgbmd4X3FyY29kZV9zdHlsaW5nXyR7RGF0ZS5ub3coKX0uJHt0eXBlfWBcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IF9kb3dubG9hZCA9IChkYXRhVVJMOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgbGluay5kb3dubG9hZCA9IGZpbGVOYW1lO1xyXG4gICAgICBsaW5rLmhyZWYgPSBkYXRhVVJMO1xyXG4gICAgICBsaW5rLmNsaWNrKCk7XHJcbiAgICAgIGxpbmsucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgX2NvbXBsZXRlID0gKHVybDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICBfZG93bmxvYWQodXJsKTtcclxuICAgICAgICBzdWJqZWN0Lm5leHQoeyBmaWxlTmFtZSwgY29udGFpbmVyLCB1cmw6IHVybCB9KTtcclxuICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3ViamVjdC5lcnJvcignQ29udGFpbmVyIG5vdCBmb3VuZCEnKTtcclxuICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY29uc3QgY2FudmFzID0gY29udGFpbmVyPy5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKTtcclxuICAgICAgaWYgKGNhbnZhcykge1xyXG4gICAgICAgIF9maWxlTmFtZSgncG5nJyk7XHJcbiAgICAgICAgY29uc3QgdHlwZUltZyA9IGZpbGVOYW1lID8gZmlsZU5hbWU/LnNwbGl0KCcuJyk/LnNsaWNlKC0xKT8udG9TdHJpbmcoKSA6ICdwbmcnO1xyXG4gICAgICAgIGNhbnZhcy50b0Jsb2IoKGJsb2I6IGFueSkgPT4gX2NvbXBsZXRlKFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYikpLCAnaW1hZ2UvJyArIHR5cGVJbWcpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHN2ZyA9IGNvbnRhaW5lcj8ucXVlcnlTZWxlY3Rvcignc3ZnJyk7XHJcbiAgICAgICAgaWYgKHN2Zykge1xyXG4gICAgICAgICAgX2ZpbGVOYW1lKCdzdmcnKTtcclxuICAgICAgICAgIGNvbnN0IHN2Z0RhdGEgPSBzdmcub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgY29uc3Qgc3ZnQmxvYiA9IG5ldyBCbG9iKFtzdmdEYXRhXSwgeyB0eXBlOiBcImltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOFwiIH0pO1xyXG4gICAgICAgICAgY29uc3Qgc3ZnVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdmdCbG9iKTtcclxuICAgICAgICAgIF9jb21wbGV0ZShzdmdVcmwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBfY29tcGxldGUoJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSwgdGltZW91dCk7XHJcbiAgICByZXR1cm4gc3ViamVjdDtcclxuICB9XHJcbn1cclxuIl19