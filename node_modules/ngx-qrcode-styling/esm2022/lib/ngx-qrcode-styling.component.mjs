import { Component, Input, ViewEncapsulation } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-qrcode-styling.service";
class NgxQrcodeStylingComponent {
    constructor(canvas, service) {
        this.canvas = canvas;
        this.service = service;
        /**
         * TemplateType
         */
        this.template = 'default';
        /**
         * number
         */
        this.scale = 0;
        /**
         * number
         */
        this.rotate = 0;
        /**
         * number
         */
        this.zIndex = 2;
    }
    ngOnInit() {
        if (this.canvas) {
            /**
             * @Input override
             */
            if (this.template)
                this.config = {
                    ...this.config,
                    template: this.template
                };
            if (this.type)
                this.config = {
                    ...this.config,
                    type: this.type
                };
            if (this.shape)
                this.config = {
                    ...this.config,
                    shape: this.shape
                };
            if (this.width)
                this.config = {
                    ...this.config,
                    width: this.width
                };
            if (this.height)
                this.config = {
                    ...this.config,
                    height: this.height
                };
            if (this.margin)
                this.config = {
                    ...this.config,
                    margin: this.margin
                };
            if (this.data)
                this.config = {
                    ...this.config,
                    data: this.data
                };
            if (this.image)
                this.config = {
                    ...this.config,
                    image: this.image
                };
            if (this.scale)
                this.config = {
                    ...this.config,
                    scale: this.scale
                };
            if (this.rotate)
                this.config = {
                    ...this.config,
                    rotate: this.rotate
                };
            if (this.zIndex)
                this.config = {
                    ...this.config,
                    zIndex: this.zIndex
                };
            if (this.frameOptions)
                this.config = {
                    ...this.config,
                    frameOptions: this.frameOptions
                };
            if (this.qrOptions)
                this.config = {
                    ...this.config,
                    qrOptions: this.qrOptions
                };
            if (this.imageOptions)
                this.config = {
                    ...this.config,
                    imageOptions: this.imageOptions
                };
            if (this.dotsOptions)
                this.config = {
                    ...this.config,
                    dotsOptions: this.dotsOptions
                };
            if (this.cornersSquareOptions)
                this.config = {
                    ...this.config,
                    cornersSquareOptions: this.cornersSquareOptions
                };
            if (this.cornersDotOptions)
                this.config = {
                    ...this.config,
                    cornersDotOptions: this.cornersDotOptions
                };
            if (this.backgroundOptions)
                this.config = {
                    ...this.config,
                    backgroundOptions: this.backgroundOptions
                };
            this.create(this.config);
        }
    }
    /**
     * create
     * @param config
     * @returns
     */
    create(config) {
        return this.service.create(config, this.canvas.nativeElement);
    }
    /**
     * update
     * @param config
     * @param configUpdate
     * @returns
     */
    update(config, configUpdate) {
        return this.service.update(config, configUpdate, this.canvas.nativeElement);
    }
    /**
     * download image
     * @param fileName eg: demo.png
     * @param timeout
     * @returns
     */
    download(fileName, timeout = 0) {
        return this.service.download(this.canvas.nativeElement, fileName, timeout);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: NgxQrcodeStylingComponent, deps: [{ token: i0.ElementRef }, { token: i1.NgxQrcodeStylingService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.4", type: NgxQrcodeStylingComponent, selector: "ngx-qrcode-styling", inputs: { config: "config", template: "template", type: "type", shape: "shape", width: "width", height: "height", margin: "margin", data: "data", image: "image", scale: "scale", rotate: "rotate", zIndex: "zIndex", frameOptions: "frameOptions", qrOptions: "qrOptions", imageOptions: "imageOptions", dotsOptions: "dotsOptions", cornersSquareOptions: "cornersSquareOptions", cornersDotOptions: "cornersDotOptions", backgroundOptions: "backgroundOptions" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
export { NgxQrcodeStylingComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: NgxQrcodeStylingComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-qrcode-styling',
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgxQrcodeStylingService }]; }, propDecorators: { config: [{
                type: Input
            }], template: [{
                type: Input
            }], type: [{
                type: Input
            }], shape: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], margin: [{
                type: Input
            }], data: [{
                type: Input
            }], image: [{
                type: Input
            }], scale: [{
                type: Input
            }], rotate: [{
                type: Input
            }], zIndex: [{
                type: Input
            }], frameOptions: [{
                type: Input
            }], qrOptions: [{
                type: Input
            }], imageOptions: [{
                type: Input
            }], dotsOptions: [{
                type: Input
            }], cornersSquareOptions: [{
                type: Input
            }], cornersDotOptions: [{
                type: Input
            }], backgroundOptions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,