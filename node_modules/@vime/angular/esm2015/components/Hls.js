import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmHls, VmFile, VmVideo } from '@vime/core';
import { define } from '../lib';
const HlsInputs = [
    'version',
    'libSrc',
    'config',
    'crossOrigin',
    'preload',
    'poster',
    'controlsList',
    'autoPiP',
    'disablePiP',
    'disableRemotePlayback',
    'playbackReady',
    'mediaTitle',
];
const HlsMethods = [
    'getAdapter',
];
const HlsOutputs = [
    'vmError',
];
let Hls = class Hls {
    constructor(c, r, z) {
        this.z = z;
        define('vm-hls', VmHls);
        define('vm-file', VmFile);
        define('vm-video', VmVideo);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmError']);
    }
};
Hls.decorators = [
    { type: Component, args: [{
                selector: 'vm-hls',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: HlsInputs,
                outputs: HlsOutputs
            },] }
];
Hls.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Hls = __decorate([
    ProxyCmp({
        inputs: HlsInputs,
        methods: HlsMethods,
    })
], Hls);
export { Hls };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9IbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLEtBQUssRUFDTCxNQUFNLEVBQ04sT0FBTyxFQUNSLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxTQUFTLEdBQWE7SUFDMUIsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsYUFBYTtJQUNiLFNBQVM7SUFDVCxRQUFRO0lBQ1IsY0FBYztJQUNkLFNBQVM7SUFDVCxZQUFZO0lBQ1osdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZixZQUFZO0NBQ2IsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFhO0lBQzNCLFlBQVk7Q0FDYixDQUFDO0FBRUYsTUFBTSxVQUFVLEdBQWE7SUFDM0IsU0FBUztDQUNWLENBQUM7SUFpQlcsR0FBRyxTQUFILEdBQUc7SUFNZCxZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUMxQixXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0NBQ0YsQ0FBQTs7WUFyQkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxRQUFRO2dCQUNsQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLFNBQVM7Z0JBQ2pCLE9BQU8sRUFBRSxVQUFVO2FBQ3BCOzs7WUFsRGlDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUFtRG5GLEdBQUc7SUFYZixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsU0FBUztRQUNqQixPQUFPLEVBQUUsVUFBVTtLQUNwQixDQUFDO0dBUVcsR0FBRyxDQWNmO1NBZFksR0FBRyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1IbHMsXG4gIFZtRmlsZSxcbiAgVm1WaWRlbyBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBIbHNJbnB1dHM6IHN0cmluZ1tdID0gW1xuICAndmVyc2lvbicsXG4gICdsaWJTcmMnLFxuICAnY29uZmlnJyxcbiAgJ2Nyb3NzT3JpZ2luJyxcbiAgJ3ByZWxvYWQnLFxuICAncG9zdGVyJyxcbiAgJ2NvbnRyb2xzTGlzdCcsXG4gICdhdXRvUGlQJyxcbiAgJ2Rpc2FibGVQaVAnLFxuICAnZGlzYWJsZVJlbW90ZVBsYXliYWNrJyxcbiAgJ3BsYXliYWNrUmVhZHknLFxuICAnbWVkaWFUaXRsZScsXG5dO1xuXG5jb25zdCBIbHNNZXRob2RzOiBzdHJpbmdbXSA9IFtcbiAgJ2dldEFkYXB0ZXInLFxuXTtcblxuY29uc3QgSGxzT3V0cHV0czogc3RyaW5nW10gPSBbXG4gICd2bUVycm9yJyxcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBIbHMgZXh0ZW5kcyBDb21wb25lbnRzLlZtSGxzIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogSGxzSW5wdXRzLFxuICBtZXRob2RzOiBIbHNNZXRob2RzLFxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ZtLWhscycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IEhsc0lucHV0cyxcbiAgb3V0cHV0czogSGxzT3V0cHV0cyxcbn0pXG5leHBvcnQgY2xhc3MgSGxzIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4gKi9cbiAgdm1FcnJvciE6IEVtaXR0ZXI8SlNYLlZtSGxzW1wib25WbUVycm9yXCJdPjtcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0taGxzJywgVm1IbHMpO1xuICAgIGRlZmluZSgndm0tZmlsZScsIFZtRmlsZSk7XG4gICAgZGVmaW5lKCd2bS12aWRlbycsIFZtVmlkZW8pO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbJ3ZtRXJyb3InXSlcbiAgfVxufVxuICAiXX0=