import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmDblClickFullscreen } from '@vime/core';
import { define } from '../lib';
const DblClickFullscreenInputs = [
    'useOnMobile',
    'isFullscreenActive',
    'isVideoView',
    'playbackReady',
    'isMobile',
];
const DblClickFullscreenMethods = [];
const DblClickFullscreenOutputs = [];
let DblClickFullscreen = class DblClickFullscreen {
    constructor(c, r, z) {
        this.z = z;
        define('vm-dbl-click-fullscreen', VmDblClickFullscreen);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
DblClickFullscreen.decorators = [
    { type: Component, args: [{
                selector: 'vm-dbl-click-fullscreen',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: DblClickFullscreenInputs,
                outputs: DblClickFullscreenOutputs
            },] }
];
DblClickFullscreen.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DblClickFullscreen = __decorate([
    ProxyCmp({
        inputs: DblClickFullscreenInputs,
        methods: DblClickFullscreenMethods,
    })
], DblClickFullscreen);
export { DblClickFullscreen };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGJsQ2xpY2tGdWxsc2NyZWVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9EYmxDbGlja0Z1bGxzY3JlZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLG9CQUFvQixFQUNyQixNQUFNLFlBQVksQ0FBQztBQUVwQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2hDLE1BQU0sd0JBQXdCLEdBQWE7SUFDekMsYUFBYTtJQUNiLG9CQUFvQjtJQUNwQixhQUFhO0lBQ2IsZUFBZTtJQUNmLFVBQVU7Q0FDWCxDQUFDO0FBRUYsTUFBTSx5QkFBeUIsR0FBYSxFQUUzQyxDQUFDO0FBRUYsTUFBTSx5QkFBeUIsR0FBYSxFQUUzQyxDQUFDO0lBaUJXLGtCQUFrQixTQUFsQixrQkFBa0I7SUFLN0IsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxNQUFNLENBQUMseUJBQXlCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN2QixDQUFDO0NBQ0YsQ0FBQTs7WUFsQkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsd0JBQXdCO2dCQUNoQyxPQUFPLEVBQUUseUJBQXlCO2FBQ25DOzs7WUF6Q2lDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUEwQ25GLGtCQUFrQjtJQVg5QixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsd0JBQXdCO1FBQ2hDLE9BQU8sRUFBRSx5QkFBeUI7S0FDbkMsQ0FBQztHQVFXLGtCQUFrQixDQVc5QjtTQVhZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1EYmxDbGlja0Z1bGxzY3JlZW4gXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgRGJsQ2xpY2tGdWxsc2NyZWVuSW5wdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ3VzZU9uTW9iaWxlJyxcbiAgJ2lzRnVsbHNjcmVlbkFjdGl2ZScsXG4gICdpc1ZpZGVvVmlldycsXG4gICdwbGF5YmFja1JlYWR5JyxcbiAgJ2lzTW9iaWxlJyxcbl07XG5cbmNvbnN0IERibENsaWNrRnVsbHNjcmVlbk1ldGhvZHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmNvbnN0IERibENsaWNrRnVsbHNjcmVlbk91dHB1dHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEYmxDbGlja0Z1bGxzY3JlZW4gZXh0ZW5kcyBDb21wb25lbnRzLlZtRGJsQ2xpY2tGdWxsc2NyZWVuIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogRGJsQ2xpY2tGdWxsc2NyZWVuSW5wdXRzLFxuICBtZXRob2RzOiBEYmxDbGlja0Z1bGxzY3JlZW5NZXRob2RzLFxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ZtLWRibC1jbGljay1mdWxsc2NyZWVuJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogRGJsQ2xpY2tGdWxsc2NyZWVuSW5wdXRzLFxuICBvdXRwdXRzOiBEYmxDbGlja0Z1bGxzY3JlZW5PdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBEYmxDbGlja0Z1bGxzY3JlZW4ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIFxuXG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgZGVmaW5lKCd2bS1kYmwtY2xpY2stZnVsbHNjcmVlbicsIFZtRGJsQ2xpY2tGdWxsc2NyZWVuKTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgW10pXG4gIH1cbn1cbiAgIl19