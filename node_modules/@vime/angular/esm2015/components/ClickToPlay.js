import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmClickToPlay } from '@vime/core';
import { define } from '../lib';
const ClickToPlayInputs = [
    'useOnMobile',
    'paused',
    'isVideoView',
    'isMobile',
];
const ClickToPlayMethods = [
    'forceClick',
];
const ClickToPlayOutputs = [];
let ClickToPlay = class ClickToPlay {
    constructor(c, r, z) {
        this.z = z;
        define('vm-click-to-play', VmClickToPlay);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
ClickToPlay.decorators = [
    { type: Component, args: [{
                selector: 'vm-click-to-play',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ClickToPlayInputs,
                outputs: ClickToPlayOutputs
            },] }
];
ClickToPlay.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ClickToPlay = __decorate([
    ProxyCmp({
        inputs: ClickToPlayInputs,
        methods: ClickToPlayMethods,
    })
], ClickToPlay);
export { ClickToPlay };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpY2tUb1BsYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL0NsaWNrVG9QbGF5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxhQUFhLEVBQ2QsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxNQUFNLGlCQUFpQixHQUFhO0lBQ2xDLGFBQWE7SUFDYixRQUFRO0lBQ1IsYUFBYTtJQUNiLFVBQVU7Q0FDWCxDQUFDO0FBRUYsTUFBTSxrQkFBa0IsR0FBYTtJQUNuQyxZQUFZO0NBQ2IsQ0FBQztBQUVGLE1BQU0sa0JBQWtCLEdBQWEsRUFFcEMsQ0FBQztJQWlCVyxXQUFXLFNBQVgsV0FBVztJQUt0QixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN2QixDQUFDO0NBQ0YsQ0FBQTs7WUFsQkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsaUJBQWlCO2dCQUN6QixPQUFPLEVBQUUsa0JBQWtCO2FBQzVCOzs7WUF4Q2lDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUF5Q25GLFdBQVc7SUFYdkIsUUFBUSxDQUFDO1FBQ1IsTUFBTSxFQUFFLGlCQUFpQjtRQUN6QixPQUFPLEVBQUUsa0JBQWtCO0tBQzVCLENBQUM7R0FRVyxXQUFXLENBV3ZCO1NBWFksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1DbGlja1RvUGxheSBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBDbGlja1RvUGxheUlucHV0czogc3RyaW5nW10gPSBbXG4gICd1c2VPbk1vYmlsZScsXG4gICdwYXVzZWQnLFxuICAnaXNWaWRlb1ZpZXcnLFxuICAnaXNNb2JpbGUnLFxuXTtcblxuY29uc3QgQ2xpY2tUb1BsYXlNZXRob2RzOiBzdHJpbmdbXSA9IFtcbiAgJ2ZvcmNlQ2xpY2snLFxuXTtcblxuY29uc3QgQ2xpY2tUb1BsYXlPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgQ2xpY2tUb1BsYXkgZXh0ZW5kcyBDb21wb25lbnRzLlZtQ2xpY2tUb1BsYXkge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBDbGlja1RvUGxheUlucHV0cyxcbiAgbWV0aG9kczogQ2xpY2tUb1BsYXlNZXRob2RzLFxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ZtLWNsaWNrLXRvLXBsYXknLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBDbGlja1RvUGxheUlucHV0cyxcbiAgb3V0cHV0czogQ2xpY2tUb1BsYXlPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBDbGlja1RvUGxheSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgXG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLWNsaWNrLXRvLXBsYXknLCBWbUNsaWNrVG9QbGF5KTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgW10pXG4gIH1cbn1cbiAgIl19