import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmMenuRadio, VmIcon, VmMenuItem } from '@vime/core';
import { define } from '../lib';
const MenuRadioInputs = [
    'label',
    'value',
    'checked',
    'badge',
    'checkIcon',
    'icons',
];
const MenuRadioMethods = [];
const MenuRadioOutputs = [
    'vmCheck',
];
let MenuRadio = class MenuRadio {
    constructor(c, r, z) {
        this.z = z;
        define('vm-menu-radio', VmMenuRadio);
        define('vm-icon', VmIcon);
        define('vm-menu-item', VmMenuItem);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmCheck']);
    }
};
MenuRadio.decorators = [
    { type: Component, args: [{
                selector: 'vm-menu-radio',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: MenuRadioInputs,
                outputs: MenuRadioOutputs
            },] }
];
MenuRadio.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
MenuRadio = __decorate([
    ProxyCmp({
        inputs: MenuRadioInputs,
        methods: MenuRadioMethods,
    })
], MenuRadio);
export { MenuRadio };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudVJhZGlvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9NZW51UmFkaW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLFdBQVcsRUFDWCxNQUFNLEVBQ04sVUFBVSxFQUNYLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxlQUFlLEdBQWE7SUFDaEMsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0NBQ1IsQ0FBQztBQUVGLE1BQU0sZ0JBQWdCLEdBQWEsRUFFbEMsQ0FBQztBQUVGLE1BQU0sZ0JBQWdCLEdBQWE7SUFDakMsU0FBUztDQUNWLENBQUM7SUFpQlcsU0FBUyxTQUFULFNBQVM7SUFNcEIsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxNQUFNLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7SUFDaEMsQ0FBQztDQUNGLENBQUE7O1lBckJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxlQUFlO2dCQUN2QixPQUFPLEVBQUUsZ0JBQWdCO2FBQzFCOzs7WUE1Q2lDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUE2Q25GLFNBQVM7SUFYckIsUUFBUSxDQUFDO1FBQ1IsTUFBTSxFQUFFLGVBQWU7UUFDdkIsT0FBTyxFQUFFLGdCQUFnQjtLQUMxQixDQUFDO0dBUVcsU0FBUyxDQWNyQjtTQWRZLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtTWVudVJhZGlvLFxuICBWbUljb24sXG4gIFZtTWVudUl0ZW0gXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgTWVudVJhZGlvSW5wdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ2xhYmVsJyxcbiAgJ3ZhbHVlJyxcbiAgJ2NoZWNrZWQnLFxuICAnYmFkZ2UnLFxuICAnY2hlY2tJY29uJyxcbiAgJ2ljb25zJyxcbl07XG5cbmNvbnN0IE1lbnVSYWRpb01ldGhvZHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmNvbnN0IE1lbnVSYWRpb091dHB1dHM6IHN0cmluZ1tdID0gW1xuICAndm1DaGVjaycsXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgTWVudVJhZGlvIGV4dGVuZHMgQ29tcG9uZW50cy5WbU1lbnVSYWRpbyB7fVxuXG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IE1lbnVSYWRpb0lucHV0cyxcbiAgbWV0aG9kczogTWVudVJhZGlvTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1tZW51LXJhZGlvJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogTWVudVJhZGlvSW5wdXRzLFxuICBvdXRwdXRzOiBNZW51UmFkaW9PdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBNZW51UmFkaW8ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHJhZGlvIGJ1dHRvbiBpcyBzZWxlY3RlZC4gKi9cbiAgdm1DaGVjayE6IEVtaXR0ZXI8SlNYLlZtTWVudVJhZGlvW1wib25WbUNoZWNrXCJdPjtcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tbWVudS1yYWRpbycsIFZtTWVudVJhZGlvKTtcbiAgICBkZWZpbmUoJ3ZtLWljb24nLCBWbUljb24pO1xuICAgIGRlZmluZSgndm0tbWVudS1pdGVtJywgVm1NZW51SXRlbSk7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFsndm1DaGVjayddKVxuICB9XG59XG4gICJdfQ==