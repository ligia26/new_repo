import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmSpinner } from '@vime/core';
import { define } from '../lib';
const SpinnerInputs = [
    'isVideoView',
    'currentProvider',
    'showWhenMediaLoading',
    'playbackReady',
    'buffering',
];
const SpinnerMethods = [];
const SpinnerOutputs = [
    'vmWillShow',
    'vmWillHide',
];
let Spinner = class Spinner {
    constructor(c, r, z) {
        this.z = z;
        define('vm-spinner', VmSpinner);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmWillShow', 'vmWillHide']);
    }
};
Spinner.decorators = [
    { type: Component, args: [{
                selector: 'vm-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: SpinnerInputs,
                outputs: SpinnerOutputs
            },] }
];
Spinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Spinner = __decorate([
    ProxyCmp({
        inputs: SpinnerInputs,
        methods: SpinnerMethods,
    })
], Spinner);
export { Spinner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3Bpbm5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvU3Bpbm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsU0FBUyxFQUNWLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxhQUFhLEdBQWE7SUFDOUIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEIsZUFBZTtJQUNmLFdBQVc7Q0FDWixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQWEsRUFFaEMsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFhO0lBQy9CLFlBQVk7SUFDWixZQUFZO0NBQ2IsQ0FBQztJQWlCVyxPQUFPLFNBQVAsT0FBTztJQVFsQixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQTtJQUNqRCxDQUFDO0NBQ0YsQ0FBQTs7WUFyQkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLGFBQWE7Z0JBQ3JCLE9BQU8sRUFBRSxjQUFjO2FBQ3hCOzs7WUExQ2lDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUEyQ25GLE9BQU87SUFYbkIsUUFBUSxDQUFDO1FBQ1IsTUFBTSxFQUFFLGFBQWE7UUFDckIsT0FBTyxFQUFFLGNBQWM7S0FDeEIsQ0FBQztHQVFXLE9BQU8sQ0FjbkI7U0FkWSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbVNwaW5uZXIgXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgU3Bpbm5lcklucHV0czogc3RyaW5nW10gPSBbXG4gICdpc1ZpZGVvVmlldycsXG4gICdjdXJyZW50UHJvdmlkZXInLFxuICAnc2hvd1doZW5NZWRpYUxvYWRpbmcnLFxuICAncGxheWJhY2tSZWFkeScsXG4gICdidWZmZXJpbmcnLFxuXTtcblxuY29uc3QgU3Bpbm5lck1ldGhvZHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmNvbnN0IFNwaW5uZXJPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ3ZtV2lsbFNob3cnLFxuICAndm1XaWxsSGlkZScsXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU3Bpbm5lciBleHRlbmRzIENvbXBvbmVudHMuVm1TcGlubmVyIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogU3Bpbm5lcklucHV0cyxcbiAgbWV0aG9kczogU3Bpbm5lck1ldGhvZHMsXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndm0tc3Bpbm5lcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFNwaW5uZXJJbnB1dHMsXG4gIG91dHB1dHM6IFNwaW5uZXJPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBTcGlubmVyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBzcGlubmVyIHdpbGwgYmUgc2hvd24uICovXG4gIHZtV2lsbFNob3chOiBFbWl0dGVyPEpTWC5WbVNwaW5uZXJbXCJvblZtV2lsbFNob3dcIl0+O1xuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBzcGlubmVyIHdpbGwgYmUgaGlkZGVuLiAqL1xuICB2bVdpbGxIaWRlITogRW1pdHRlcjxKU1guVm1TcGlubmVyW1wib25WbVdpbGxIaWRlXCJdPjtcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tc3Bpbm5lcicsIFZtU3Bpbm5lcik7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFsndm1XaWxsU2hvdycsICd2bVdpbGxIaWRlJ10pXG4gIH1cbn1cbiAgIl19