import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmVolumeControl, VmControl, VmIcon, VmMuteControl, VmTooltip, VmSlider } from '@vime/core';
import { define } from '../lib';
const VolumeControlInputs = [
    'lowVolumeIcon',
    'highVolumeIcon',
    'mutedIcon',
    'icons',
    'tooltipPosition',
    'tooltipDirection',
    'hideTooltip',
    'muteKeys',
    'noKeyboard',
    'muted',
    'volume',
    'isMobile',
    'i18n',
];
const VolumeControlMethods = [];
const VolumeControlOutputs = [];
let VolumeControl = class VolumeControl {
    constructor(c, r, z) {
        this.z = z;
        define('vm-volume-control', VmVolumeControl);
        define('vm-control', VmControl);
        define('vm-icon', VmIcon);
        define('vm-mute-control', VmMuteControl);
        define('vm-tooltip', VmTooltip);
        define('vm-slider', VmSlider);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
VolumeControl.decorators = [
    { type: Component, args: [{
                selector: 'vm-volume-control',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: VolumeControlInputs,
                outputs: VolumeControlOutputs
            },] }
];
VolumeControl.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
VolumeControl = __decorate([
    ProxyCmp({
        inputs: VolumeControlInputs,
        methods: VolumeControlMethods,
    })
], VolumeControl);
export { VolumeControl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVm9sdW1lQ29udHJvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvVm9sdW1lQ29udHJvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsZUFBZSxFQUNmLFNBQVMsRUFDVCxNQUFNLEVBQ04sYUFBYSxFQUNiLFNBQVMsRUFDVCxRQUFRLEVBQ1QsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxNQUFNLG1CQUFtQixHQUFhO0lBQ3BDLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLE9BQU87SUFDUCxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixVQUFVO0lBQ1YsWUFBWTtJQUNaLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07Q0FDUCxDQUFDO0FBRUYsTUFBTSxvQkFBb0IsR0FBYSxFQUV0QyxDQUFDO0FBRUYsTUFBTSxvQkFBb0IsR0FBYSxFQUV0QyxDQUFDO0lBaUJXLGFBQWEsU0FBYixhQUFhO0lBS3hCLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsTUFBTSxDQUFDLG1CQUFtQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsaUJBQWlCLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDekMsTUFBTSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUMxQixXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3ZCLENBQUM7Q0FDRixDQUFBOztZQXZCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxtQkFBbUI7Z0JBQzNCLE9BQU8sRUFBRSxvQkFBb0I7YUFDOUI7OztZQXREaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQXVEbkYsYUFBYTtJQVh6QixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsbUJBQW1CO1FBQzNCLE9BQU8sRUFBRSxvQkFBb0I7S0FDOUIsQ0FBQztHQVFXLGFBQWEsQ0FnQnpCO1NBaEJZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtVm9sdW1lQ29udHJvbCxcbiAgVm1Db250cm9sLFxuICBWbUljb24sXG4gIFZtTXV0ZUNvbnRyb2wsXG4gIFZtVG9vbHRpcCxcbiAgVm1TbGlkZXIgXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgVm9sdW1lQ29udHJvbElucHV0czogc3RyaW5nW10gPSBbXG4gICdsb3dWb2x1bWVJY29uJyxcbiAgJ2hpZ2hWb2x1bWVJY29uJyxcbiAgJ211dGVkSWNvbicsXG4gICdpY29ucycsXG4gICd0b29sdGlwUG9zaXRpb24nLFxuICAndG9vbHRpcERpcmVjdGlvbicsXG4gICdoaWRlVG9vbHRpcCcsXG4gICdtdXRlS2V5cycsXG4gICdub0tleWJvYXJkJyxcbiAgJ211dGVkJyxcbiAgJ3ZvbHVtZScsXG4gICdpc01vYmlsZScsXG4gICdpMThuJyxcbl07XG5cbmNvbnN0IFZvbHVtZUNvbnRyb2xNZXRob2RzOiBzdHJpbmdbXSA9IFtcbiAgXG5dO1xuXG5jb25zdCBWb2x1bWVDb250cm9sT3V0cHV0czogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFZvbHVtZUNvbnRyb2wgZXh0ZW5kcyBDb21wb25lbnRzLlZtVm9sdW1lQ29udHJvbCB7fVxuXG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFZvbHVtZUNvbnRyb2xJbnB1dHMsXG4gIG1ldGhvZHM6IFZvbHVtZUNvbnRyb2xNZXRob2RzLFxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ZtLXZvbHVtZS1jb250cm9sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogVm9sdW1lQ29udHJvbElucHV0cyxcbiAgb3V0cHV0czogVm9sdW1lQ29udHJvbE91dHB1dHMsXG59KVxuZXhwb3J0IGNsYXNzIFZvbHVtZUNvbnRyb2wge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIFxuXG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgZGVmaW5lKCd2bS12b2x1bWUtY29udHJvbCcsIFZtVm9sdW1lQ29udHJvbCk7XG4gICAgZGVmaW5lKCd2bS1jb250cm9sJywgVm1Db250cm9sKTtcbiAgICBkZWZpbmUoJ3ZtLWljb24nLCBWbUljb24pO1xuICAgIGRlZmluZSgndm0tbXV0ZS1jb250cm9sJywgVm1NdXRlQ29udHJvbCk7XG4gICAgZGVmaW5lKCd2bS10b29sdGlwJywgVm1Ub29sdGlwKTtcbiAgICBkZWZpbmUoJ3ZtLXNsaWRlcicsIFZtU2xpZGVyKTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgW10pXG4gIH1cbn1cbiAgIl19