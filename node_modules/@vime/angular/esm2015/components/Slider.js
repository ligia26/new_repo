import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmSlider } from '@vime/core';
import { define } from '../lib';
const SliderInputs = [
    'step',
    'min',
    'max',
    'value',
    'valueText',
    'label',
];
const SliderMethods = [];
const SliderOutputs = [
    'vmValueChange',
    'vmFocus',
    'vmBlur',
];
let Slider = class Slider {
    constructor(c, r, z) {
        this.z = z;
        define('vm-slider', VmSlider);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmValueChange', 'vmFocus', 'vmBlur']);
    }
};
Slider.decorators = [
    { type: Component, args: [{
                selector: 'vm-slider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: SliderInputs,
                outputs: SliderOutputs
            },] }
];
Slider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Slider = __decorate([
    ProxyCmp({
        inputs: SliderInputs,
        methods: SliderMethods,
    })
], Slider);
export { Slider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9TbGlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLFFBQVEsRUFDVCxNQUFNLFlBQVksQ0FBQztBQUVwQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2hDLE1BQU0sWUFBWSxHQUFhO0lBQzdCLE1BQU07SUFDTixLQUFLO0lBQ0wsS0FBSztJQUNMLE9BQU87SUFDUCxXQUFXO0lBQ1gsT0FBTztDQUNSLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBYSxFQUUvQixDQUFDO0FBRUYsTUFBTSxhQUFhLEdBQWE7SUFDOUIsZUFBZTtJQUNmLFNBQVM7SUFDVCxRQUFRO0NBQ1QsQ0FBQztJQWlCVyxNQUFNLFNBQU4sTUFBTTtJQVVqQixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDM0QsQ0FBQztDQUNGLENBQUE7O1lBdkJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsV0FBVztnQkFDckIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixPQUFPLEVBQUUsYUFBYTthQUN2Qjs7O1lBNUNpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBNkNuRixNQUFNO0lBWGxCLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxZQUFZO1FBQ3BCLE9BQU8sRUFBRSxhQUFhO0tBQ3ZCLENBQUM7R0FRVyxNQUFNLENBZ0JsQjtTQWhCWSxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbVNsaWRlciBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBTbGlkZXJJbnB1dHM6IHN0cmluZ1tdID0gW1xuICAnc3RlcCcsXG4gICdtaW4nLFxuICAnbWF4JyxcbiAgJ3ZhbHVlJyxcbiAgJ3ZhbHVlVGV4dCcsXG4gICdsYWJlbCcsXG5dO1xuXG5jb25zdCBTbGlkZXJNZXRob2RzOiBzdHJpbmdbXSA9IFtcbiAgXG5dO1xuXG5jb25zdCBTbGlkZXJPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ3ZtVmFsdWVDaGFuZ2UnLFxuICAndm1Gb2N1cycsXG4gICd2bUJsdXInLFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFNsaWRlciBleHRlbmRzIENvbXBvbmVudHMuVm1TbGlkZXIge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBTbGlkZXJJbnB1dHMsXG4gIG1ldGhvZHM6IFNsaWRlck1ldGhvZHMsXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndm0tc2xpZGVyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogU2xpZGVySW5wdXRzLFxuICBvdXRwdXRzOiBTbGlkZXJPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBTbGlkZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHZhbHVlIG9mIHRoZSB1bmRlcmx5aW5nIGBpbnB1dGAgZmllbGQgY2hhbmdlcy4gKi9cbiAgdm1WYWx1ZUNoYW5nZSE6IEVtaXR0ZXI8SlNYLlZtU2xpZGVyW1wib25WbVZhbHVlQ2hhbmdlXCJdPjtcbiAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgc2xpZGVyIHJlY2VpdmVzIGZvY3VzLiAqL1xuICB2bUZvY3VzITogRW1pdHRlcjxKU1guVm1TbGlkZXJbXCJvblZtRm9jdXNcIl0+O1xuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBzbGlkZXIgbG9zZXMgZm9jdXMuICovXG4gIHZtQmx1ciE6IEVtaXR0ZXI8SlNYLlZtU2xpZGVyW1wib25WbUJsdXJcIl0+O1xuXG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgZGVmaW5lKCd2bS1zbGlkZXInLCBWbVNsaWRlcik7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFsndm1WYWx1ZUNoYW5nZScsICd2bUZvY3VzJywgJ3ZtQmx1ciddKVxuICB9XG59XG4gICJdfQ==