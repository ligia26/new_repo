import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmEmbed } from '@vime/core';
import { define } from '../lib';
const EmbedInputs = [
    'embedSrc',
    'mediaTitle',
    'params',
    'origin',
    'preconnections',
    'decoder',
];
const EmbedMethods = [
    'postMessage',
];
const EmbedOutputs = [
    'vmEmbedSrcChange',
    'vmEmbedMessage',
    'vmEmbedLoaded',
];
let Embed = class Embed {
    constructor(c, r, z) {
        this.z = z;
        define('vm-embed', VmEmbed);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmEmbedSrcChange', 'vmEmbedMessage', 'vmEmbedLoaded']);
    }
};
Embed.decorators = [
    { type: Component, args: [{
                selector: 'vm-embed',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: EmbedInputs,
                outputs: EmbedOutputs
            },] }
];
Embed.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Embed = __decorate([
    ProxyCmp({
        inputs: EmbedInputs,
        methods: EmbedMethods,
    })
], Embed);
export { Embed };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW1iZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL0VtYmVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxPQUFPLEVBQ1IsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxNQUFNLFdBQVcsR0FBYTtJQUM1QixVQUFVO0lBQ1YsWUFBWTtJQUNaLFFBQVE7SUFDUixRQUFRO0lBQ1IsZ0JBQWdCO0lBQ2hCLFNBQVM7Q0FDVixDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQWE7SUFDN0IsYUFBYTtDQUNkLENBQUM7QUFFRixNQUFNLFlBQVksR0FBYTtJQUM3QixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGVBQWU7Q0FDaEIsQ0FBQztJQWlCVyxLQUFLLFNBQUwsS0FBSztJQVdoQixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFBO0lBQzVFLENBQUM7Q0FDRixDQUFBOztZQXhCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsV0FBVztnQkFDbkIsT0FBTyxFQUFFLFlBQVk7YUFDdEI7OztZQTVDaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQTZDbkYsS0FBSztJQVhqQixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsV0FBVztRQUNuQixPQUFPLEVBQUUsWUFBWTtLQUN0QixDQUFDO0dBUVcsS0FBSyxDQWlCakI7U0FqQlksS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1FbWJlZCBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBFbWJlZElucHV0czogc3RyaW5nW10gPSBbXG4gICdlbWJlZFNyYycsXG4gICdtZWRpYVRpdGxlJyxcbiAgJ3BhcmFtcycsXG4gICdvcmlnaW4nLFxuICAncHJlY29ubmVjdGlvbnMnLFxuICAnZGVjb2RlcicsXG5dO1xuXG5jb25zdCBFbWJlZE1ldGhvZHM6IHN0cmluZ1tdID0gW1xuICAncG9zdE1lc3NhZ2UnLFxuXTtcblxuY29uc3QgRW1iZWRPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ3ZtRW1iZWRTcmNDaGFuZ2UnLFxuICAndm1FbWJlZE1lc3NhZ2UnLFxuICAndm1FbWJlZExvYWRlZCcsXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRW1iZWQgZXh0ZW5kcyBDb21wb25lbnRzLlZtRW1iZWQge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBFbWJlZElucHV0cyxcbiAgbWV0aG9kczogRW1iZWRNZXRob2RzLFxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ZtLWVtYmVkJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogRW1iZWRJbnB1dHMsXG4gIG91dHB1dHM6IEVtYmVkT3V0cHV0cyxcbn0pXG5leHBvcnQgY2xhc3MgRW1iZWQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGBlbWJlZFNyY2Agb3IgYHBhcmFtc2AgcHJvcHMgY2hhbmdlLiBUaGUgcGF5bG9hZCBjb250YWlucyB0aGUgYHBhcmFtc2BcbnNlcmlhbGl6ZWQgaW50byBhIHF1ZXJ5IHN0cmluZyBhbmQgYXBwZW5kZWQgdG8gYGVtYmVkU3JjYC4gKi9cbiAgdm1FbWJlZFNyY0NoYW5nZSE6IEVtaXR0ZXI8SlNYLlZtRW1iZWRbXCJvblZtRW1iZWRTcmNDaGFuZ2VcIl0+O1xuICAvKiogRW1pdHRlZCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgZW1iZWRkZWQgcGxheWVyIHZpYSBgcG9zdE1lc3NhZ2VgLiAqL1xuICB2bUVtYmVkTWVzc2FnZSE6IEVtaXR0ZXI8SlNYLlZtRW1iZWRbXCJvblZtRW1iZWRNZXNzYWdlXCJdPjtcbiAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgZW1iZWRkZWQgcGxheWVyIGFuZCBhbnkgbmV3IG1lZGlhIGhhcyBsb2FkZWQuICovXG4gIHZtRW1iZWRMb2FkZWQhOiBFbWl0dGVyPEpTWC5WbUVtYmVkW1wib25WbUVtYmVkTG9hZGVkXCJdPjtcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tZW1iZWQnLCBWbUVtYmVkKTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgWyd2bUVtYmVkU3JjQ2hhbmdlJywgJ3ZtRW1iZWRNZXNzYWdlJywgJ3ZtRW1iZWRMb2FkZWQnXSlcbiAgfVxufVxuICAiXX0=