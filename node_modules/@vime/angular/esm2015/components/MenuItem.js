import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmMenuItem, VmIcon } from '@vime/core';
import { define } from '../lib';
const MenuItemInputs = [
    'identifier',
    'hidden',
    'label',
    'menu',
    'expanded',
    'checked',
    'hint',
    'badge',
    'checkIcon',
    'icons',
    'isTouch',
];
const MenuItemMethods = [
    'focusItem',
    'blurItem',
    'getHeight',
];
const MenuItemOutputs = [
    'vmFocus',
    'vmBlur',
];
let MenuItem = class MenuItem {
    constructor(c, r, z) {
        this.z = z;
        define('vm-menu-item', VmMenuItem);
        define('vm-icon', VmIcon);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmFocus', 'vmBlur']);
    }
};
MenuItem.decorators = [
    { type: Component, args: [{
                selector: 'vm-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: MenuItemInputs,
                outputs: MenuItemOutputs
            },] }
];
MenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
MenuItem = __decorate([
    ProxyCmp({
        inputs: MenuItemInputs,
        methods: MenuItemMethods,
    })
], MenuItem);
export { MenuItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudUl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL01lbnVJdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxVQUFVLEVBQ1YsTUFBTSxFQUNQLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxjQUFjLEdBQWE7SUFDL0IsWUFBWTtJQUNaLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7Q0FDVixDQUFDO0FBRUYsTUFBTSxlQUFlLEdBQWE7SUFDaEMsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0NBQ1osQ0FBQztBQUVGLE1BQU0sZUFBZSxHQUFhO0lBQ2hDLFNBQVM7SUFDVCxRQUFRO0NBQ1QsQ0FBQztJQWlCVyxRQUFRLFNBQVIsUUFBUTtJQVFuQixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO0lBQzFDLENBQUM7Q0FDRixDQUFBOztZQXRCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsY0FBYztnQkFDdEIsT0FBTyxFQUFFLGVBQWU7YUFDekI7OztZQW5EaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQW9EbkYsUUFBUTtJQVhwQixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsY0FBYztRQUN0QixPQUFPLEVBQUUsZUFBZTtLQUN6QixDQUFDO0dBUVcsUUFBUSxDQWVwQjtTQWZZLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtTWVudUl0ZW0sXG4gIFZtSWNvbiBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBNZW51SXRlbUlucHV0czogc3RyaW5nW10gPSBbXG4gICdpZGVudGlmaWVyJyxcbiAgJ2hpZGRlbicsXG4gICdsYWJlbCcsXG4gICdtZW51JyxcbiAgJ2V4cGFuZGVkJyxcbiAgJ2NoZWNrZWQnLFxuICAnaGludCcsXG4gICdiYWRnZScsXG4gICdjaGVja0ljb24nLFxuICAnaWNvbnMnLFxuICAnaXNUb3VjaCcsXG5dO1xuXG5jb25zdCBNZW51SXRlbU1ldGhvZHM6IHN0cmluZ1tdID0gW1xuICAnZm9jdXNJdGVtJyxcbiAgJ2JsdXJJdGVtJyxcbiAgJ2dldEhlaWdodCcsXG5dO1xuXG5jb25zdCBNZW51SXRlbU91dHB1dHM6IHN0cmluZ1tdID0gW1xuICAndm1Gb2N1cycsXG4gICd2bUJsdXInLFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIE1lbnVJdGVtIGV4dGVuZHMgQ29tcG9uZW50cy5WbU1lbnVJdGVtIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogTWVudUl0ZW1JbnB1dHMsXG4gIG1ldGhvZHM6IE1lbnVJdGVtTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1tZW51LWl0ZW0nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBNZW51SXRlbUlucHV0cyxcbiAgb3V0cHV0czogTWVudUl0ZW1PdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBNZW51SXRlbSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgaXRlbSBpcyBmb2N1c2VkLiAqL1xuICB2bUZvY3VzITogRW1pdHRlcjxKU1guVm1NZW51SXRlbVtcIm9uVm1Gb2N1c1wiXT47XG4gIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGl0ZW0gbG9zZXMgZm9jdXMuICovXG4gIHZtQmx1ciE6IEVtaXR0ZXI8SlNYLlZtTWVudUl0ZW1bXCJvblZtQmx1clwiXT47XG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLW1lbnUtaXRlbScsIFZtTWVudUl0ZW0pO1xuICAgIGRlZmluZSgndm0taWNvbicsIFZtSWNvbik7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFsndm1Gb2N1cycsICd2bUJsdXInXSlcbiAgfVxufVxuICAiXX0=