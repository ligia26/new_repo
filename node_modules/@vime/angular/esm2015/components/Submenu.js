import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmSubmenu, VmIcon, VmMenu, VmMenuItem } from '@vime/core';
import { define } from '../lib';
const SubmenuInputs = [
    'label',
    'hint',
    'slideInDirection',
    'active',
];
const SubmenuMethods = [
    'getController',
    'getMenu',
    'getControllerHeight',
];
const SubmenuOutputs = [
    'vmOpenSubmenu',
    'vmCloseSubmenu',
];
let Submenu = class Submenu {
    constructor(c, r, z) {
        this.z = z;
        define('vm-submenu', VmSubmenu);
        define('vm-icon', VmIcon);
        define('vm-menu', VmMenu);
        define('vm-menu-item', VmMenuItem);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmOpenSubmenu', 'vmCloseSubmenu']);
    }
};
Submenu.decorators = [
    { type: Component, args: [{
                selector: 'vm-submenu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: SubmenuInputs,
                outputs: SubmenuOutputs
            },] }
];
Submenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Submenu = __decorate([
    ProxyCmp({
        inputs: SubmenuInputs,
        methods: SubmenuMethods,
    })
], Submenu);
export { Submenu };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3VibWVudS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvU3VibWVudS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixNQUFNLEVBQ04sVUFBVSxFQUNYLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxhQUFhLEdBQWE7SUFDOUIsT0FBTztJQUNQLE1BQU07SUFDTixrQkFBa0I7SUFDbEIsUUFBUTtDQUNULENBQUM7QUFFRixNQUFNLGNBQWMsR0FBYTtJQUMvQixlQUFlO0lBQ2YsU0FBUztJQUNULHFCQUFxQjtDQUN0QixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQWE7SUFDL0IsZUFBZTtJQUNmLGdCQUFnQjtDQUNqQixDQUFDO0lBaUJXLE9BQU8sU0FBUCxPQUFPO0lBUWxCLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsTUFBTSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUE7SUFDeEQsQ0FBQztDQUNGLENBQUE7O1lBeEJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxhQUFhO2dCQUNyQixPQUFPLEVBQUUsY0FBYzthQUN4Qjs7O1lBOUNpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBK0NuRixPQUFPO0lBWG5CLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxhQUFhO1FBQ3JCLE9BQU8sRUFBRSxjQUFjO0tBQ3hCLENBQUM7R0FRVyxPQUFPLENBaUJuQjtTQWpCWSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbVN1Ym1lbnUsXG4gIFZtSWNvbixcbiAgVm1NZW51LFxuICBWbU1lbnVJdGVtIFxufSBmcm9tICdAdmltZS9jb3JlJztcblxuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vbGliJztcbiAgXG5cbmNvbnN0IFN1Ym1lbnVJbnB1dHM6IHN0cmluZ1tdID0gW1xuICAnbGFiZWwnLFxuICAnaGludCcsXG4gICdzbGlkZUluRGlyZWN0aW9uJyxcbiAgJ2FjdGl2ZScsXG5dO1xuXG5jb25zdCBTdWJtZW51TWV0aG9kczogc3RyaW5nW10gPSBbXG4gICdnZXRDb250cm9sbGVyJyxcbiAgJ2dldE1lbnUnLFxuICAnZ2V0Q29udHJvbGxlckhlaWdodCcsXG5dO1xuXG5jb25zdCBTdWJtZW51T3V0cHV0czogc3RyaW5nW10gPSBbXG4gICd2bU9wZW5TdWJtZW51JyxcbiAgJ3ZtQ2xvc2VTdWJtZW51Jyxcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBTdWJtZW51IGV4dGVuZHMgQ29tcG9uZW50cy5WbVN1Ym1lbnUge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBTdWJtZW51SW5wdXRzLFxuICBtZXRob2RzOiBTdWJtZW51TWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1zdWJtZW51JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogU3VibWVudUlucHV0cyxcbiAgb3V0cHV0czogU3VibWVudU91dHB1dHMsXG59KVxuZXhwb3J0IGNsYXNzIFN1Ym1lbnUge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHN1Ym1lbnUgaXMgb3Blbi9hY3RpdmUuICovXG4gIHZtT3BlblN1Ym1lbnUhOiBFbWl0dGVyPEpTWC5WbVN1Ym1lbnVbXCJvblZtT3BlblN1Ym1lbnVcIl0+O1xuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBzdWJtZW51IGhhcyBjbG9zZWQvaXMgbm90IGFjdGl2ZS4gKi9cbiAgdm1DbG9zZVN1Ym1lbnUhOiBFbWl0dGVyPEpTWC5WbVN1Ym1lbnVbXCJvblZtQ2xvc2VTdWJtZW51XCJdPjtcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tc3VibWVudScsIFZtU3VibWVudSk7XG4gICAgZGVmaW5lKCd2bS1pY29uJywgVm1JY29uKTtcbiAgICBkZWZpbmUoJ3ZtLW1lbnUnLCBWbU1lbnUpO1xuICAgIGRlZmluZSgndm0tbWVudS1pdGVtJywgVm1NZW51SXRlbSk7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFsndm1PcGVuU3VibWVudScsICd2bUNsb3NlU3VibWVudSddKVxuICB9XG59XG4gICJdfQ==