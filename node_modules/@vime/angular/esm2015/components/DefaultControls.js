import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmDefaultControls, VmCaptionControl, VmControl, VmIcon, VmTooltip, VmControlGroup, VmControlSpacer, VmControls, VmCurrentTime, VmTime, VmEndTime, VmFullscreenControl, VmLiveIndicator, VmMuteControl, VmPipControl, VmPlaybackControl, VmScrim, VmScrubberControl, VmSlider, VmSettingsControl, VmTimeProgress, VmVolumeControl } from '@vime/core';
import { define } from '../lib';
const DefaultControlsInputs = [
    'activeDuration',
    'waitForPlaybackStart',
    'hideWhenPaused',
    'hideOnMouseLeave',
    'theme',
    'isMobile',
    'isLive',
    'isAudioView',
    'isVideoView',
];
const DefaultControlsMethods = [];
const DefaultControlsOutputs = [];
let DefaultControls = class DefaultControls {
    constructor(c, r, z) {
        this.z = z;
        define('vm-default-controls', VmDefaultControls);
        define('vm-caption-control', VmCaptionControl);
        define('vm-control', VmControl);
        define('vm-icon', VmIcon);
        define('vm-tooltip', VmTooltip);
        define('vm-control-group', VmControlGroup);
        define('vm-control-spacer', VmControlSpacer);
        define('vm-controls', VmControls);
        define('vm-current-time', VmCurrentTime);
        define('vm-time', VmTime);
        define('vm-end-time', VmEndTime);
        define('vm-fullscreen-control', VmFullscreenControl);
        define('vm-live-indicator', VmLiveIndicator);
        define('vm-mute-control', VmMuteControl);
        define('vm-pip-control', VmPipControl);
        define('vm-playback-control', VmPlaybackControl);
        define('vm-scrim', VmScrim);
        define('vm-scrubber-control', VmScrubberControl);
        define('vm-slider', VmSlider);
        define('vm-settings-control', VmSettingsControl);
        define('vm-time-progress', VmTimeProgress);
        define('vm-volume-control', VmVolumeControl);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
DefaultControls.decorators = [
    { type: Component, args: [{
                selector: 'vm-default-controls',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: DefaultControlsInputs,
                outputs: DefaultControlsOutputs
            },] }
];
DefaultControls.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DefaultControls = __decorate([
    ProxyCmp({
        inputs: DefaultControlsInputs,
        methods: DefaultControlsMethods,
    })
], DefaultControls);
export { DefaultControls };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmYXVsdENvbnRyb2xzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9EZWZhdWx0Q29udHJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsU0FBUyxFQUNULE1BQU0sRUFDTixTQUFTLEVBQ1QsY0FBYyxFQUNkLGVBQWUsRUFDZixVQUFVLEVBQ1YsYUFBYSxFQUNiLE1BQU0sRUFDTixTQUFTLEVBQ1QsbUJBQW1CLEVBQ25CLGVBQWUsRUFDZixhQUFhLEVBQ2IsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixPQUFPLEVBQ1AsaUJBQWlCLEVBQ2pCLFFBQVEsRUFDUixpQkFBaUIsRUFDakIsY0FBYyxFQUNkLGVBQWUsRUFDaEIsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxNQUFNLHFCQUFxQixHQUFhO0lBQ3RDLGdCQUFnQjtJQUNoQixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixhQUFhO0lBQ2IsYUFBYTtDQUNkLENBQUM7QUFFRixNQUFNLHNCQUFzQixHQUFhLEVBRXhDLENBQUM7QUFFRixNQUFNLHNCQUFzQixHQUFhLEVBRXhDLENBQUM7SUFpQlcsZUFBZSxTQUFmLGVBQWU7SUFLMUIsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxNQUFNLENBQUMscUJBQXFCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsb0JBQW9CLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUMvQyxNQUFNLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLG1CQUFtQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsdUJBQXVCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUNyRCxNQUFNLENBQUMsbUJBQW1CLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLGlCQUFpQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMscUJBQXFCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLHFCQUFxQixFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLGtCQUFrQixFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN2QixDQUFDO0NBQ0YsQ0FBQTs7WUF2Q0EsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUscUJBQXFCO2dCQUM3QixPQUFPLEVBQUUsc0JBQXNCO2FBQ2hDOzs7WUFsRWlDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUFtRW5GLGVBQWU7SUFYM0IsUUFBUSxDQUFDO1FBQ1IsTUFBTSxFQUFFLHFCQUFxQjtRQUM3QixPQUFPLEVBQUUsc0JBQXNCO0tBQ2hDLENBQUM7R0FRVyxlQUFlLENBZ0MzQjtTQWhDWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbURlZmF1bHRDb250cm9scyxcbiAgVm1DYXB0aW9uQ29udHJvbCxcbiAgVm1Db250cm9sLFxuICBWbUljb24sXG4gIFZtVG9vbHRpcCxcbiAgVm1Db250cm9sR3JvdXAsXG4gIFZtQ29udHJvbFNwYWNlcixcbiAgVm1Db250cm9scyxcbiAgVm1DdXJyZW50VGltZSxcbiAgVm1UaW1lLFxuICBWbUVuZFRpbWUsXG4gIFZtRnVsbHNjcmVlbkNvbnRyb2wsXG4gIFZtTGl2ZUluZGljYXRvcixcbiAgVm1NdXRlQ29udHJvbCxcbiAgVm1QaXBDb250cm9sLFxuICBWbVBsYXliYWNrQ29udHJvbCxcbiAgVm1TY3JpbSxcbiAgVm1TY3J1YmJlckNvbnRyb2wsXG4gIFZtU2xpZGVyLFxuICBWbVNldHRpbmdzQ29udHJvbCxcbiAgVm1UaW1lUHJvZ3Jlc3MsXG4gIFZtVm9sdW1lQ29udHJvbCBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBEZWZhdWx0Q29udHJvbHNJbnB1dHM6IHN0cmluZ1tdID0gW1xuICAnYWN0aXZlRHVyYXRpb24nLFxuICAnd2FpdEZvclBsYXliYWNrU3RhcnQnLFxuICAnaGlkZVdoZW5QYXVzZWQnLFxuICAnaGlkZU9uTW91c2VMZWF2ZScsXG4gICd0aGVtZScsXG4gICdpc01vYmlsZScsXG4gICdpc0xpdmUnLFxuICAnaXNBdWRpb1ZpZXcnLFxuICAnaXNWaWRlb1ZpZXcnLFxuXTtcblxuY29uc3QgRGVmYXVsdENvbnRyb2xzTWV0aG9kczogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuY29uc3QgRGVmYXVsdENvbnRyb2xzT3V0cHV0czogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERlZmF1bHRDb250cm9scyBleHRlbmRzIENvbXBvbmVudHMuVm1EZWZhdWx0Q29udHJvbHMge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBEZWZhdWx0Q29udHJvbHNJbnB1dHMsXG4gIG1ldGhvZHM6IERlZmF1bHRDb250cm9sc01ldGhvZHMsXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndm0tZGVmYXVsdC1jb250cm9scycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IERlZmF1bHRDb250cm9sc0lucHV0cyxcbiAgb3V0cHV0czogRGVmYXVsdENvbnRyb2xzT3V0cHV0cyxcbn0pXG5leHBvcnQgY2xhc3MgRGVmYXVsdENvbnRyb2xzIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICBcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tZGVmYXVsdC1jb250cm9scycsIFZtRGVmYXVsdENvbnRyb2xzKTtcbiAgICBkZWZpbmUoJ3ZtLWNhcHRpb24tY29udHJvbCcsIFZtQ2FwdGlvbkNvbnRyb2wpO1xuICAgIGRlZmluZSgndm0tY29udHJvbCcsIFZtQ29udHJvbCk7XG4gICAgZGVmaW5lKCd2bS1pY29uJywgVm1JY29uKTtcbiAgICBkZWZpbmUoJ3ZtLXRvb2x0aXAnLCBWbVRvb2x0aXApO1xuICAgIGRlZmluZSgndm0tY29udHJvbC1ncm91cCcsIFZtQ29udHJvbEdyb3VwKTtcbiAgICBkZWZpbmUoJ3ZtLWNvbnRyb2wtc3BhY2VyJywgVm1Db250cm9sU3BhY2VyKTtcbiAgICBkZWZpbmUoJ3ZtLWNvbnRyb2xzJywgVm1Db250cm9scyk7XG4gICAgZGVmaW5lKCd2bS1jdXJyZW50LXRpbWUnLCBWbUN1cnJlbnRUaW1lKTtcbiAgICBkZWZpbmUoJ3ZtLXRpbWUnLCBWbVRpbWUpO1xuICAgIGRlZmluZSgndm0tZW5kLXRpbWUnLCBWbUVuZFRpbWUpO1xuICAgIGRlZmluZSgndm0tZnVsbHNjcmVlbi1jb250cm9sJywgVm1GdWxsc2NyZWVuQ29udHJvbCk7XG4gICAgZGVmaW5lKCd2bS1saXZlLWluZGljYXRvcicsIFZtTGl2ZUluZGljYXRvcik7XG4gICAgZGVmaW5lKCd2bS1tdXRlLWNvbnRyb2wnLCBWbU11dGVDb250cm9sKTtcbiAgICBkZWZpbmUoJ3ZtLXBpcC1jb250cm9sJywgVm1QaXBDb250cm9sKTtcbiAgICBkZWZpbmUoJ3ZtLXBsYXliYWNrLWNvbnRyb2wnLCBWbVBsYXliYWNrQ29udHJvbCk7XG4gICAgZGVmaW5lKCd2bS1zY3JpbScsIFZtU2NyaW0pO1xuICAgIGRlZmluZSgndm0tc2NydWJiZXItY29udHJvbCcsIFZtU2NydWJiZXJDb250cm9sKTtcbiAgICBkZWZpbmUoJ3ZtLXNsaWRlcicsIFZtU2xpZGVyKTtcbiAgICBkZWZpbmUoJ3ZtLXNldHRpbmdzLWNvbnRyb2wnLCBWbVNldHRpbmdzQ29udHJvbCk7XG4gICAgZGVmaW5lKCd2bS10aW1lLXByb2dyZXNzJywgVm1UaW1lUHJvZ3Jlc3MpO1xuICAgIGRlZmluZSgndm0tdm9sdW1lLWNvbnRyb2wnLCBWbVZvbHVtZUNvbnRyb2wpO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbXSlcbiAgfVxufVxuICAiXX0=