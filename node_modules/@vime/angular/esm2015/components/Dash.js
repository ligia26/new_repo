import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmDash, VmFile, VmVideo } from '@vime/core';
import { define } from '../lib';
const DashInputs = [
    'src',
    'version',
    'libSrc',
    'config',
    'autoplay',
    'crossOrigin',
    'preload',
    'poster',
    'controlsList',
    'autoPiP',
    'disablePiP',
    'disableRemotePlayback',
    'mediaTitle',
    'enableTextTracksByDefault',
    'shouldRenderNativeTextTracks',
    'isTextTrackVisible',
    'currentTextTrack',
];
const DashMethods = [
    'getAdapter',
];
const DashOutputs = [
    'vmError',
];
let Dash = class Dash {
    constructor(c, r, z) {
        this.z = z;
        define('vm-dash', VmDash);
        define('vm-file', VmFile);
        define('vm-video', VmVideo);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmError']);
    }
};
Dash.decorators = [
    { type: Component, args: [{
                selector: 'vm-dash',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: DashInputs,
                outputs: DashOutputs
            },] }
];
Dash.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Dash = __decorate([
    ProxyCmp({
        inputs: DashInputs,
        methods: DashMethods,
    })
], Dash);
export { Dash };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGFzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvRGFzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsTUFBTSxFQUNOLE1BQU0sRUFDTixPQUFPLEVBQ1IsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxNQUFNLFVBQVUsR0FBYTtJQUMzQixLQUFLO0lBQ0wsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLGFBQWE7SUFDYixTQUFTO0lBQ1QsUUFBUTtJQUNSLGNBQWM7SUFDZCxTQUFTO0lBQ1QsWUFBWTtJQUNaLHVCQUF1QjtJQUN2QixZQUFZO0lBQ1osMkJBQTJCO0lBQzNCLDhCQUE4QjtJQUM5QixvQkFBb0I7SUFDcEIsa0JBQWtCO0NBQ25CLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBYTtJQUM1QixZQUFZO0NBQ2IsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFhO0lBQzVCLFNBQVM7Q0FDVixDQUFDO0lBaUJXLElBQUksU0FBSixJQUFJO0lBTWYsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7SUFDaEMsQ0FBQztDQUNGLENBQUE7O1lBckJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsU0FBUztnQkFDbkIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixPQUFPLEVBQUUsV0FBVzthQUNyQjs7O1lBdkRpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBd0RuRixJQUFJO0lBWGhCLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLE9BQU8sRUFBRSxXQUFXO0tBQ3JCLENBQUM7R0FRVyxJQUFJLENBY2hCO1NBZFksSUFBSSIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1EYXNoLFxuICBWbUZpbGUsXG4gIFZtVmlkZW8gXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgRGFzaElucHV0czogc3RyaW5nW10gPSBbXG4gICdzcmMnLFxuICAndmVyc2lvbicsXG4gICdsaWJTcmMnLFxuICAnY29uZmlnJyxcbiAgJ2F1dG9wbGF5JyxcbiAgJ2Nyb3NzT3JpZ2luJyxcbiAgJ3ByZWxvYWQnLFxuICAncG9zdGVyJyxcbiAgJ2NvbnRyb2xzTGlzdCcsXG4gICdhdXRvUGlQJyxcbiAgJ2Rpc2FibGVQaVAnLFxuICAnZGlzYWJsZVJlbW90ZVBsYXliYWNrJyxcbiAgJ21lZGlhVGl0bGUnLFxuICAnZW5hYmxlVGV4dFRyYWNrc0J5RGVmYXVsdCcsXG4gICdzaG91bGRSZW5kZXJOYXRpdmVUZXh0VHJhY2tzJyxcbiAgJ2lzVGV4dFRyYWNrVmlzaWJsZScsXG4gICdjdXJyZW50VGV4dFRyYWNrJyxcbl07XG5cbmNvbnN0IERhc2hNZXRob2RzOiBzdHJpbmdbXSA9IFtcbiAgJ2dldEFkYXB0ZXInLFxuXTtcblxuY29uc3QgRGFzaE91dHB1dHM6IHN0cmluZ1tdID0gW1xuICAndm1FcnJvcicsXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRGFzaCBleHRlbmRzIENvbXBvbmVudHMuVm1EYXNoIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogRGFzaElucHV0cyxcbiAgbWV0aG9kczogRGFzaE1ldGhvZHMsXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndm0tZGFzaCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IERhc2hJbnB1dHMsXG4gIG91dHB1dHM6IERhc2hPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBEYXNoIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4gKi9cbiAgdm1FcnJvciE6IEVtaXR0ZXI8SlNYLlZtRGFzaFtcIm9uVm1FcnJvclwiXT47XG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLWRhc2gnLCBWbURhc2gpO1xuICAgIGRlZmluZSgndm0tZmlsZScsIFZtRmlsZSk7XG4gICAgZGVmaW5lKCd2bS12aWRlbycsIFZtVmlkZW8pO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbJ3ZtRXJyb3InXSlcbiAgfVxufVxuICAiXX0=