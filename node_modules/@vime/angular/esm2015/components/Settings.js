import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmSettings, VmMenu } from '@vime/core';
import { define } from '../lib';
const SettingsInputs = [
    'pin',
    'active',
    'isMobile',
    'isAudioView',
];
const SettingsMethods = [
    'setController',
];
const SettingsOutputs = [];
let Settings = class Settings {
    constructor(c, r, z) {
        this.z = z;
        define('vm-settings', VmSettings);
        define('vm-menu', VmMenu);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
Settings.decorators = [
    { type: Component, args: [{
                selector: 'vm-settings',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: SettingsInputs,
                outputs: SettingsOutputs
            },] }
];
Settings.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Settings = __decorate([
    ProxyCmp({
        inputs: SettingsInputs,
        methods: SettingsMethods,
    })
], Settings);
export { Settings };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL1NldHRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxVQUFVLEVBQ1YsTUFBTSxFQUNQLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxjQUFjLEdBQWE7SUFDL0IsS0FBSztJQUNMLFFBQVE7SUFDUixVQUFVO0lBQ1YsYUFBYTtDQUNkLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBYTtJQUNoQyxlQUFlO0NBQ2hCLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBYSxFQUVqQyxDQUFDO0lBaUJXLFFBQVEsU0FBUixRQUFRO0lBS25CLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsTUFBTSxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUMxQixXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3ZCLENBQUM7Q0FDRixDQUFBOztZQW5CQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsY0FBYztnQkFDdEIsT0FBTyxFQUFFLGVBQWU7YUFDekI7OztZQXpDaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQTBDbkYsUUFBUTtJQVhwQixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsY0FBYztRQUN0QixPQUFPLEVBQUUsZUFBZTtLQUN6QixDQUFDO0dBUVcsUUFBUSxDQVlwQjtTQVpZLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtU2V0dGluZ3MsXG4gIFZtTWVudSBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBTZXR0aW5nc0lucHV0czogc3RyaW5nW10gPSBbXG4gICdwaW4nLFxuICAnYWN0aXZlJyxcbiAgJ2lzTW9iaWxlJyxcbiAgJ2lzQXVkaW9WaWV3Jyxcbl07XG5cbmNvbnN0IFNldHRpbmdzTWV0aG9kczogc3RyaW5nW10gPSBbXG4gICdzZXRDb250cm9sbGVyJyxcbl07XG5cbmNvbnN0IFNldHRpbmdzT3V0cHV0czogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFNldHRpbmdzIGV4dGVuZHMgQ29tcG9uZW50cy5WbVNldHRpbmdzIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogU2V0dGluZ3NJbnB1dHMsXG4gIG1ldGhvZHM6IFNldHRpbmdzTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1zZXR0aW5ncycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFNldHRpbmdzSW5wdXRzLFxuICBvdXRwdXRzOiBTZXR0aW5nc091dHB1dHMsXG59KVxuZXhwb3J0IGNsYXNzIFNldHRpbmdzIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICBcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tc2V0dGluZ3MnLCBWbVNldHRpbmdzKTtcbiAgICBkZWZpbmUoJ3ZtLW1lbnUnLCBWbU1lbnUpO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbXSlcbiAgfVxufVxuICAiXX0=