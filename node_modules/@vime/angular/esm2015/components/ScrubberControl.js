import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmScrubberControl, VmSlider, VmTooltip } from '@vime/core';
import { define } from '../lib';
const ScrubberControlInputs = [
    'alwaysShowHours',
    'hideTooltip',
    'currentTime',
    'duration',
    'noKeyboard',
    'buffering',
    'buffered',
    'i18n',
];
const ScrubberControlMethods = [];
const ScrubberControlOutputs = [];
let ScrubberControl = class ScrubberControl {
    constructor(c, r, z) {
        this.z = z;
        define('vm-scrubber-control', VmScrubberControl);
        define('vm-slider', VmSlider);
        define('vm-tooltip', VmTooltip);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
ScrubberControl.decorators = [
    { type: Component, args: [{
                selector: 'vm-scrubber-control',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ScrubberControlInputs,
                outputs: ScrubberControlOutputs
            },] }
];
ScrubberControl.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScrubberControl = __decorate([
    ProxyCmp({
        inputs: ScrubberControlInputs,
        methods: ScrubberControlMethods,
    })
], ScrubberControl);
export { ScrubberControl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NydWJiZXJDb250cm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9TY3J1YmJlckNvbnRyb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixRQUFRLEVBQ1IsU0FBUyxFQUNWLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxxQkFBcUIsR0FBYTtJQUN0QyxpQkFBaUI7SUFDakIsYUFBYTtJQUNiLGFBQWE7SUFDYixVQUFVO0lBQ1YsWUFBWTtJQUNaLFdBQVc7SUFDWCxVQUFVO0lBQ1YsTUFBTTtDQUNQLENBQUM7QUFFRixNQUFNLHNCQUFzQixHQUFhLEVBRXhDLENBQUM7QUFFRixNQUFNLHNCQUFzQixHQUFhLEVBRXhDLENBQUM7SUFpQlcsZUFBZSxTQUFmLGVBQWU7SUFLMUIsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxNQUFNLENBQUMscUJBQXFCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkIsQ0FBQztDQUNGLENBQUE7O1lBcEJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLHFCQUFxQjtnQkFDN0IsT0FBTyxFQUFFLHNCQUFzQjthQUNoQzs7O1lBOUNpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBK0NuRixlQUFlO0lBWDNCLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxxQkFBcUI7UUFDN0IsT0FBTyxFQUFFLHNCQUFzQjtLQUNoQyxDQUFDO0dBUVcsZUFBZSxDQWEzQjtTQWJZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtU2NydWJiZXJDb250cm9sLFxuICBWbVNsaWRlcixcbiAgVm1Ub29sdGlwIFxufSBmcm9tICdAdmltZS9jb3JlJztcblxuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vbGliJztcbiAgXG5cbmNvbnN0IFNjcnViYmVyQ29udHJvbElucHV0czogc3RyaW5nW10gPSBbXG4gICdhbHdheXNTaG93SG91cnMnLFxuICAnaGlkZVRvb2x0aXAnLFxuICAnY3VycmVudFRpbWUnLFxuICAnZHVyYXRpb24nLFxuICAnbm9LZXlib2FyZCcsXG4gICdidWZmZXJpbmcnLFxuICAnYnVmZmVyZWQnLFxuICAnaTE4bicsXG5dO1xuXG5jb25zdCBTY3J1YmJlckNvbnRyb2xNZXRob2RzOiBzdHJpbmdbXSA9IFtcbiAgXG5dO1xuXG5jb25zdCBTY3J1YmJlckNvbnRyb2xPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU2NydWJiZXJDb250cm9sIGV4dGVuZHMgQ29tcG9uZW50cy5WbVNjcnViYmVyQ29udHJvbCB7fVxuXG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFNjcnViYmVyQ29udHJvbElucHV0cyxcbiAgbWV0aG9kczogU2NydWJiZXJDb250cm9sTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1zY3J1YmJlci1jb250cm9sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogU2NydWJiZXJDb250cm9sSW5wdXRzLFxuICBvdXRwdXRzOiBTY3J1YmJlckNvbnRyb2xPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBTY3J1YmJlckNvbnRyb2wge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIFxuXG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgZGVmaW5lKCd2bS1zY3J1YmJlci1jb250cm9sJywgVm1TY3J1YmJlckNvbnRyb2wpO1xuICAgIGRlZmluZSgndm0tc2xpZGVyJywgVm1TbGlkZXIpO1xuICAgIGRlZmluZSgndm0tdG9vbHRpcCcsIFZtVG9vbHRpcCk7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFtdKVxuICB9XG59XG4gICJdfQ==