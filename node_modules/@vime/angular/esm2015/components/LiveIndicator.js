import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmLiveIndicator } from '@vime/core';
import { define } from '../lib';
const LiveIndicatorInputs = [
    'isLive',
    'i18n',
];
const LiveIndicatorMethods = [];
const LiveIndicatorOutputs = [];
let LiveIndicator = class LiveIndicator {
    constructor(c, r, z) {
        this.z = z;
        define('vm-live-indicator', VmLiveIndicator);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
LiveIndicator.decorators = [
    { type: Component, args: [{
                selector: 'vm-live-indicator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: LiveIndicatorInputs,
                outputs: LiveIndicatorOutputs
            },] }
];
LiveIndicator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
LiveIndicator = __decorate([
    ProxyCmp({
        inputs: LiveIndicatorInputs,
        methods: LiveIndicatorMethods,
    })
], LiveIndicator);
export { LiveIndicator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGl2ZUluZGljYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvTGl2ZUluZGljYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsZUFBZSxFQUNoQixNQUFNLFlBQVksQ0FBQztBQUVwQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2hDLE1BQU0sbUJBQW1CLEdBQWE7SUFDcEMsUUFBUTtJQUNSLE1BQU07Q0FDUCxDQUFDO0FBRUYsTUFBTSxvQkFBb0IsR0FBYSxFQUV0QyxDQUFDO0FBRUYsTUFBTSxvQkFBb0IsR0FBYSxFQUV0QyxDQUFDO0lBaUJXLGFBQWEsU0FBYixhQUFhO0lBS3hCLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsTUFBTSxDQUFDLG1CQUFtQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUMxQixXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3ZCLENBQUM7Q0FDRixDQUFBOztZQWxCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxtQkFBbUI7Z0JBQzNCLE9BQU8sRUFBRSxvQkFBb0I7YUFDOUI7OztZQXRDaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQXVDbkYsYUFBYTtJQVh6QixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsbUJBQW1CO1FBQzNCLE9BQU8sRUFBRSxvQkFBb0I7S0FDOUIsQ0FBQztHQVFXLGFBQWEsQ0FXekI7U0FYWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbUxpdmVJbmRpY2F0b3IgXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgTGl2ZUluZGljYXRvcklucHV0czogc3RyaW5nW10gPSBbXG4gICdpc0xpdmUnLFxuICAnaTE4bicsXG5dO1xuXG5jb25zdCBMaXZlSW5kaWNhdG9yTWV0aG9kczogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuY29uc3QgTGl2ZUluZGljYXRvck91dHB1dHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBMaXZlSW5kaWNhdG9yIGV4dGVuZHMgQ29tcG9uZW50cy5WbUxpdmVJbmRpY2F0b3Ige31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBMaXZlSW5kaWNhdG9ySW5wdXRzLFxuICBtZXRob2RzOiBMaXZlSW5kaWNhdG9yTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1saXZlLWluZGljYXRvcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IExpdmVJbmRpY2F0b3JJbnB1dHMsXG4gIG91dHB1dHM6IExpdmVJbmRpY2F0b3JPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBMaXZlSW5kaWNhdG9yIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICBcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tbGl2ZS1pbmRpY2F0b3InLCBWbUxpdmVJbmRpY2F0b3IpO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbXSlcbiAgfVxufVxuICAiXX0=