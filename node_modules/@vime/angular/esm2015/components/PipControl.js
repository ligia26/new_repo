import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmPipControl, VmControl, VmIcon, VmTooltip } from '@vime/core';
import { define } from '../lib';
const PipControlInputs = [
    'enterIcon',
    'exitIcon',
    'icons',
    'tooltipPosition',
    'tooltipDirection',
    'hideTooltip',
    'keys',
    'isPiPActive',
    'i18n',
    'playbackReady',
];
const PipControlMethods = [];
const PipControlOutputs = [];
let PipControl = class PipControl {
    constructor(c, r, z) {
        this.z = z;
        define('vm-pip-control', VmPipControl);
        define('vm-control', VmControl);
        define('vm-icon', VmIcon);
        define('vm-tooltip', VmTooltip);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
PipControl.decorators = [
    { type: Component, args: [{
                selector: 'vm-pip-control',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: PipControlInputs,
                outputs: PipControlOutputs
            },] }
];
PipControl.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
PipControl = __decorate([
    ProxyCmp({
        inputs: PipControlInputs,
        methods: PipControlMethods,
    })
], PipControl);
export { PipControl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGlwQ29udHJvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvUGlwQ29udHJvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsWUFBWSxFQUNaLFNBQVMsRUFDVCxNQUFNLEVBQ04sU0FBUyxFQUNWLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxnQkFBZ0IsR0FBYTtJQUNqQyxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixNQUFNO0lBQ04sYUFBYTtJQUNiLE1BQU07SUFDTixlQUFlO0NBQ2hCLENBQUM7QUFFRixNQUFNLGlCQUFpQixHQUFhLEVBRW5DLENBQUM7QUFFRixNQUFNLGlCQUFpQixHQUFhLEVBRW5DLENBQUM7SUFpQlcsVUFBVSxTQUFWLFVBQVU7SUFLckIsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkIsQ0FBQztDQUNGLENBQUE7O1lBckJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLGdCQUFnQjtnQkFDeEIsT0FBTyxFQUFFLGlCQUFpQjthQUMzQjs7O1lBakRpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBa0RuRixVQUFVO0lBWHRCLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxnQkFBZ0I7UUFDeEIsT0FBTyxFQUFFLGlCQUFpQjtLQUMzQixDQUFDO0dBUVcsVUFBVSxDQWN0QjtTQWRZLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtUGlwQ29udHJvbCxcbiAgVm1Db250cm9sLFxuICBWbUljb24sXG4gIFZtVG9vbHRpcCBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBQaXBDb250cm9sSW5wdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ2VudGVySWNvbicsXG4gICdleGl0SWNvbicsXG4gICdpY29ucycsXG4gICd0b29sdGlwUG9zaXRpb24nLFxuICAndG9vbHRpcERpcmVjdGlvbicsXG4gICdoaWRlVG9vbHRpcCcsXG4gICdrZXlzJyxcbiAgJ2lzUGlQQWN0aXZlJyxcbiAgJ2kxOG4nLFxuICAncGxheWJhY2tSZWFkeScsXG5dO1xuXG5jb25zdCBQaXBDb250cm9sTWV0aG9kczogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuY29uc3QgUGlwQ29udHJvbE91dHB1dHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBQaXBDb250cm9sIGV4dGVuZHMgQ29tcG9uZW50cy5WbVBpcENvbnRyb2wge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBQaXBDb250cm9sSW5wdXRzLFxuICBtZXRob2RzOiBQaXBDb250cm9sTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1waXAtY29udHJvbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFBpcENvbnRyb2xJbnB1dHMsXG4gIG91dHB1dHM6IFBpcENvbnRyb2xPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBQaXBDb250cm9sIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICBcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tcGlwLWNvbnRyb2wnLCBWbVBpcENvbnRyb2wpO1xuICAgIGRlZmluZSgndm0tY29udHJvbCcsIFZtQ29udHJvbCk7XG4gICAgZGVmaW5lKCd2bS1pY29uJywgVm1JY29uKTtcbiAgICBkZWZpbmUoJ3ZtLXRvb2x0aXAnLCBWbVRvb2x0aXApO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbXSlcbiAgfVxufVxuICAiXX0=