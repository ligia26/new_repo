import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmFullscreenControl, VmControl, VmIcon, VmTooltip } from '@vime/core';
import { define } from '../lib';
const FullscreenControlInputs = [
    'enterIcon',
    'exitIcon',
    'icons',
    'tooltipPosition',
    'tooltipDirection',
    'hideTooltip',
    'keys',
    'isFullscreenActive',
    'i18n',
    'playbackReady',
];
const FullscreenControlMethods = [];
const FullscreenControlOutputs = [];
let FullscreenControl = class FullscreenControl {
    constructor(c, r, z) {
        this.z = z;
        define('vm-fullscreen-control', VmFullscreenControl);
        define('vm-control', VmControl);
        define('vm-icon', VmIcon);
        define('vm-tooltip', VmTooltip);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
FullscreenControl.decorators = [
    { type: Component, args: [{
                selector: 'vm-fullscreen-control',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: FullscreenControlInputs,
                outputs: FullscreenControlOutputs
            },] }
];
FullscreenControl.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
FullscreenControl = __decorate([
    ProxyCmp({
        inputs: FullscreenControlInputs,
        methods: FullscreenControlMethods,
    })
], FullscreenControl);
export { FullscreenControl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVsbHNjcmVlbkNvbnRyb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL0Z1bGxzY3JlZW5Db250cm9sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsU0FBUyxFQUNULE1BQU0sRUFDTixTQUFTLEVBQ1YsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxNQUFNLHVCQUF1QixHQUFhO0lBQ3hDLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLE1BQU07SUFDTixvQkFBb0I7SUFDcEIsTUFBTTtJQUNOLGVBQWU7Q0FDaEIsQ0FBQztBQUVGLE1BQU0sd0JBQXdCLEdBQWEsRUFFMUMsQ0FBQztBQUVGLE1BQU0sd0JBQXdCLEdBQWEsRUFFMUMsQ0FBQztJQWlCVyxpQkFBaUIsU0FBakIsaUJBQWlCO0lBSzVCLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsTUFBTSxDQUFDLHVCQUF1QixFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkIsQ0FBQztDQUNGLENBQUE7O1lBckJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLHVCQUF1QjtnQkFDL0IsT0FBTyxFQUFFLHdCQUF3QjthQUNsQzs7O1lBakRpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBa0RuRixpQkFBaUI7SUFYN0IsUUFBUSxDQUFDO1FBQ1IsTUFBTSxFQUFFLHVCQUF1QjtRQUMvQixPQUFPLEVBQUUsd0JBQXdCO0tBQ2xDLENBQUM7R0FRVyxpQkFBaUIsQ0FjN0I7U0FkWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtRnVsbHNjcmVlbkNvbnRyb2wsXG4gIFZtQ29udHJvbCxcbiAgVm1JY29uLFxuICBWbVRvb2x0aXAgXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgRnVsbHNjcmVlbkNvbnRyb2xJbnB1dHM6IHN0cmluZ1tdID0gW1xuICAnZW50ZXJJY29uJyxcbiAgJ2V4aXRJY29uJyxcbiAgJ2ljb25zJyxcbiAgJ3Rvb2x0aXBQb3NpdGlvbicsXG4gICd0b29sdGlwRGlyZWN0aW9uJyxcbiAgJ2hpZGVUb29sdGlwJyxcbiAgJ2tleXMnLFxuICAnaXNGdWxsc2NyZWVuQWN0aXZlJyxcbiAgJ2kxOG4nLFxuICAncGxheWJhY2tSZWFkeScsXG5dO1xuXG5jb25zdCBGdWxsc2NyZWVuQ29udHJvbE1ldGhvZHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmNvbnN0IEZ1bGxzY3JlZW5Db250cm9sT3V0cHV0czogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIEZ1bGxzY3JlZW5Db250cm9sIGV4dGVuZHMgQ29tcG9uZW50cy5WbUZ1bGxzY3JlZW5Db250cm9sIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogRnVsbHNjcmVlbkNvbnRyb2xJbnB1dHMsXG4gIG1ldGhvZHM6IEZ1bGxzY3JlZW5Db250cm9sTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1mdWxsc2NyZWVuLWNvbnRyb2wnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBGdWxsc2NyZWVuQ29udHJvbElucHV0cyxcbiAgb3V0cHV0czogRnVsbHNjcmVlbkNvbnRyb2xPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBGdWxsc2NyZWVuQ29udHJvbCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgXG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLWZ1bGxzY3JlZW4tY29udHJvbCcsIFZtRnVsbHNjcmVlbkNvbnRyb2wpO1xuICAgIGRlZmluZSgndm0tY29udHJvbCcsIFZtQ29udHJvbCk7XG4gICAgZGVmaW5lKCd2bS1pY29uJywgVm1JY29uKTtcbiAgICBkZWZpbmUoJ3ZtLXRvb2x0aXAnLCBWbVRvb2x0aXApO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbXSlcbiAgfVxufVxuICAiXX0=