import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmMenu } from '@vime/core';
import { define } from '../lib';
const MenuInputs = [
    'active',
    'identifier',
    'controller',
    'slideInDirection',
];
const MenuMethods = [
    'focusMenu',
    'blurMenu',
    'getActiveMenuItem',
    'setActiveMenuItem',
    'calculateHeight',
];
const MenuOutputs = [
    'vmOpen',
    'vmClose',
    'vmFocus',
    'vmBlur',
    'vmActiveSubmenuChange',
    'vmActiveMenuItemChange',
    'vmMenuHeightChange',
];
let Menu = class Menu {
    constructor(c, r, z) {
        this.z = z;
        define('vm-menu', VmMenu);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmOpen', 'vmClose', 'vmFocus', 'vmBlur', 'vmActiveSubmenuChange', 'vmActiveMenuItemChange', 'vmMenuHeightChange']);
    }
};
Menu.decorators = [
    { type: Component, args: [{
                selector: 'vm-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: MenuInputs,
                outputs: MenuOutputs
            },] }
];
Menu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Menu = __decorate([
    ProxyCmp({
        inputs: MenuInputs,
        methods: MenuMethods,
    })
], Menu);
export { Menu };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvTWVudS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsTUFBTSxFQUNQLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxVQUFVLEdBQWE7SUFDM0IsUUFBUTtJQUNSLFlBQVk7SUFDWixZQUFZO0lBQ1osa0JBQWtCO0NBQ25CLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBYTtJQUM1QixXQUFXO0lBQ1gsVUFBVTtJQUNWLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsaUJBQWlCO0NBQ2xCLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBYTtJQUM1QixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4QixvQkFBb0I7Q0FDckIsQ0FBQztJQWlCVyxJQUFJLFNBQUosSUFBSTtJQWtCZixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsd0JBQXdCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxDQUFBO0lBQ3hJLENBQUM7Q0FDRixDQUFBOztZQS9CQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsVUFBVTtnQkFDbEIsT0FBTyxFQUFFLFdBQVc7YUFDckI7OztZQWxEaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQW1EbkYsSUFBSTtJQVhoQixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsVUFBVTtRQUNsQixPQUFPLEVBQUUsV0FBVztLQUNyQixDQUFDO0dBUVcsSUFBSSxDQXdCaEI7U0F4QlksSUFBSSIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1NZW51IFxufSBmcm9tICdAdmltZS9jb3JlJztcblxuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vbGliJztcbiAgXG5cbmNvbnN0IE1lbnVJbnB1dHM6IHN0cmluZ1tdID0gW1xuICAnYWN0aXZlJyxcbiAgJ2lkZW50aWZpZXInLFxuICAnY29udHJvbGxlcicsXG4gICdzbGlkZUluRGlyZWN0aW9uJyxcbl07XG5cbmNvbnN0IE1lbnVNZXRob2RzOiBzdHJpbmdbXSA9IFtcbiAgJ2ZvY3VzTWVudScsXG4gICdibHVyTWVudScsXG4gICdnZXRBY3RpdmVNZW51SXRlbScsXG4gICdzZXRBY3RpdmVNZW51SXRlbScsXG4gICdjYWxjdWxhdGVIZWlnaHQnLFxuXTtcblxuY29uc3QgTWVudU91dHB1dHM6IHN0cmluZ1tdID0gW1xuICAndm1PcGVuJyxcbiAgJ3ZtQ2xvc2UnLFxuICAndm1Gb2N1cycsXG4gICd2bUJsdXInLFxuICAndm1BY3RpdmVTdWJtZW51Q2hhbmdlJyxcbiAgJ3ZtQWN0aXZlTWVudUl0ZW1DaGFuZ2UnLFxuICAndm1NZW51SGVpZ2h0Q2hhbmdlJyxcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBNZW51IGV4dGVuZHMgQ29tcG9uZW50cy5WbU1lbnUge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBNZW51SW5wdXRzLFxuICBtZXRob2RzOiBNZW51TWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1tZW51JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogTWVudUlucHV0cyxcbiAgb3V0cHV0czogTWVudU91dHB1dHMsXG59KVxuZXhwb3J0IGNsYXNzIE1lbnUge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIC8qKiBFbWl0dGVkIHdoZW4gdGhlIG1lbnUgaXMgb3Blbi9hY3RpdmUuICovXG4gIHZtT3BlbiE6IEVtaXR0ZXI8SlNYLlZtTWVudVtcIm9uVm1PcGVuXCJdPjtcbiAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgbWVudSBoYXMgY2xvc2VkL2lzIG5vdCBhY3RpdmUuICovXG4gIHZtQ2xvc2UhOiBFbWl0dGVyPEpTWC5WbU1lbnVbXCJvblZtQ2xvc2VcIl0+O1xuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBtZW51IGlzIGZvY3VzZWQuICovXG4gIHZtRm9jdXMhOiBFbWl0dGVyPEpTWC5WbU1lbnVbXCJvblZtRm9jdXNcIl0+O1xuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBtZW51IGxvc2VzIGZvY3VzLiAqL1xuICB2bUJsdXIhOiBFbWl0dGVyPEpTWC5WbU1lbnVbXCJvblZtQmx1clwiXT47XG4gIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGFjdGl2ZSBzdWJtZW51IGNoYW5nZXMuICovXG4gIHZtQWN0aXZlU3VibWVudUNoYW5nZSE6IEVtaXR0ZXI8SlNYLlZtTWVudVtcIm9uVm1BY3RpdmVTdWJtZW51Q2hhbmdlXCJdPjtcbiAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgY3VycmVudGx5IGZvY3VzZWQgbWVudSBpdGVtIGNoYW5nZXMuICovXG4gIHZtQWN0aXZlTWVudUl0ZW1DaGFuZ2UhOiBFbWl0dGVyPEpTWC5WbU1lbnVbXCJvblZtQWN0aXZlTWVudUl0ZW1DaGFuZ2VcIl0+O1xuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBoZWlnaHQgb2YgdGhlIG1lbnUgY2hhbmdlcy4gKi9cbiAgdm1NZW51SGVpZ2h0Q2hhbmdlITogRW1pdHRlcjxKU1guVm1NZW51W1wib25WbU1lbnVIZWlnaHRDaGFuZ2VcIl0+O1xuXG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgZGVmaW5lKCd2bS1tZW51JywgVm1NZW51KTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgWyd2bU9wZW4nLCAndm1DbG9zZScsICd2bUZvY3VzJywgJ3ZtQmx1cicsICd2bUFjdGl2ZVN1Ym1lbnVDaGFuZ2UnLCAndm1BY3RpdmVNZW51SXRlbUNoYW5nZScsICd2bU1lbnVIZWlnaHRDaGFuZ2UnXSlcbiAgfVxufVxuICAiXX0=