import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmCurrentTime, VmTime } from '@vime/core';
import { define } from '../lib';
const CurrentTimeInputs = [
    'currentTime',
    'i18n',
    'alwaysShowHours',
];
const CurrentTimeMethods = [];
const CurrentTimeOutputs = [];
let CurrentTime = class CurrentTime {
    constructor(c, r, z) {
        this.z = z;
        define('vm-current-time', VmCurrentTime);
        define('vm-time', VmTime);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
CurrentTime.decorators = [
    { type: Component, args: [{
                selector: 'vm-current-time',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: CurrentTimeInputs,
                outputs: CurrentTimeOutputs
            },] }
];
CurrentTime.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
CurrentTime = __decorate([
    ProxyCmp({
        inputs: CurrentTimeInputs,
        methods: CurrentTimeMethods,
    })
], CurrentTime);
export { CurrentTime };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VycmVudFRpbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL0N1cnJlbnRUaW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxhQUFhLEVBQ2IsTUFBTSxFQUNQLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxpQkFBaUIsR0FBYTtJQUNsQyxhQUFhO0lBQ2IsTUFBTTtJQUNOLGlCQUFpQjtDQUNsQixDQUFDO0FBRUYsTUFBTSxrQkFBa0IsR0FBYSxFQUVwQyxDQUFDO0FBRUYsTUFBTSxrQkFBa0IsR0FBYSxFQUVwQyxDQUFDO0lBaUJXLFdBQVcsU0FBWCxXQUFXO0lBS3RCLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsTUFBTSxDQUFDLGlCQUFpQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkIsQ0FBQztDQUNGLENBQUE7O1lBbkJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLGlCQUFpQjtnQkFDekIsT0FBTyxFQUFFLGtCQUFrQjthQUM1Qjs7O1lBeENpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBeUNuRixXQUFXO0lBWHZCLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxpQkFBaUI7UUFDekIsT0FBTyxFQUFFLGtCQUFrQjtLQUM1QixDQUFDO0dBUVcsV0FBVyxDQVl2QjtTQVpZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtQ3VycmVudFRpbWUsXG4gIFZtVGltZSBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBDdXJyZW50VGltZUlucHV0czogc3RyaW5nW10gPSBbXG4gICdjdXJyZW50VGltZScsXG4gICdpMThuJyxcbiAgJ2Fsd2F5c1Nob3dIb3VycycsXG5dO1xuXG5jb25zdCBDdXJyZW50VGltZU1ldGhvZHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmNvbnN0IEN1cnJlbnRUaW1lT3V0cHV0czogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIEN1cnJlbnRUaW1lIGV4dGVuZHMgQ29tcG9uZW50cy5WbUN1cnJlbnRUaW1lIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogQ3VycmVudFRpbWVJbnB1dHMsXG4gIG1ldGhvZHM6IEN1cnJlbnRUaW1lTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1jdXJyZW50LXRpbWUnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBDdXJyZW50VGltZUlucHV0cyxcbiAgb3V0cHV0czogQ3VycmVudFRpbWVPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBDdXJyZW50VGltZSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgXG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLWN1cnJlbnQtdGltZScsIFZtQ3VycmVudFRpbWUpO1xuICAgIGRlZmluZSgndm0tdGltZScsIFZtVGltZSk7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFtdKVxuICB9XG59XG4gICJdfQ==