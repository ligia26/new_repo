import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmPlaybackControl, VmControl, VmIcon, VmTooltip } from '@vime/core';
import { define } from '../lib';
const PlaybackControlInputs = [
    'playIcon',
    'pauseIcon',
    'icons',
    'tooltipPosition',
    'tooltipDirection',
    'hideTooltip',
    'keys',
    'paused',
    'i18n',
];
const PlaybackControlMethods = [];
const PlaybackControlOutputs = [];
let PlaybackControl = class PlaybackControl {
    constructor(c, r, z) {
        this.z = z;
        define('vm-playback-control', VmPlaybackControl);
        define('vm-control', VmControl);
        define('vm-icon', VmIcon);
        define('vm-tooltip', VmTooltip);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
PlaybackControl.decorators = [
    { type: Component, args: [{
                selector: 'vm-playback-control',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: PlaybackControlInputs,
                outputs: PlaybackControlOutputs
            },] }
];
PlaybackControl.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
PlaybackControl = __decorate([
    ProxyCmp({
        inputs: PlaybackControlInputs,
        methods: PlaybackControlMethods,
    })
], PlaybackControl);
export { PlaybackControl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxheWJhY2tDb250cm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9QbGF5YmFja0NvbnRyb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLFlBQVksQ0FBQztBQUVwQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2hDLE1BQU0scUJBQXFCLEdBQWE7SUFDdEMsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0NBQ1AsQ0FBQztBQUVGLE1BQU0sc0JBQXNCLEdBQWEsRUFFeEMsQ0FBQztBQUVGLE1BQU0sc0JBQXNCLEdBQWEsRUFFeEMsQ0FBQztJQWlCVyxlQUFlLFNBQWYsZUFBZTtJQUsxQixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUMxQixXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3ZCLENBQUM7Q0FDRixDQUFBOztZQXJCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxxQkFBcUI7Z0JBQzdCLE9BQU8sRUFBRSxzQkFBc0I7YUFDaEM7OztZQWhEaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQWlEbkYsZUFBZTtJQVgzQixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUscUJBQXFCO1FBQzdCLE9BQU8sRUFBRSxzQkFBc0I7S0FDaEMsQ0FBQztHQVFXLGVBQWUsQ0FjM0I7U0FkWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbVBsYXliYWNrQ29udHJvbCxcbiAgVm1Db250cm9sLFxuICBWbUljb24sXG4gIFZtVG9vbHRpcCBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBQbGF5YmFja0NvbnRyb2xJbnB1dHM6IHN0cmluZ1tdID0gW1xuICAncGxheUljb24nLFxuICAncGF1c2VJY29uJyxcbiAgJ2ljb25zJyxcbiAgJ3Rvb2x0aXBQb3NpdGlvbicsXG4gICd0b29sdGlwRGlyZWN0aW9uJyxcbiAgJ2hpZGVUb29sdGlwJyxcbiAgJ2tleXMnLFxuICAncGF1c2VkJyxcbiAgJ2kxOG4nLFxuXTtcblxuY29uc3QgUGxheWJhY2tDb250cm9sTWV0aG9kczogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuY29uc3QgUGxheWJhY2tDb250cm9sT3V0cHV0czogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFBsYXliYWNrQ29udHJvbCBleHRlbmRzIENvbXBvbmVudHMuVm1QbGF5YmFja0NvbnRyb2wge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBQbGF5YmFja0NvbnRyb2xJbnB1dHMsXG4gIG1ldGhvZHM6IFBsYXliYWNrQ29udHJvbE1ldGhvZHMsXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndm0tcGxheWJhY2stY29udHJvbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFBsYXliYWNrQ29udHJvbElucHV0cyxcbiAgb3V0cHV0czogUGxheWJhY2tDb250cm9sT3V0cHV0cyxcbn0pXG5leHBvcnQgY2xhc3MgUGxheWJhY2tDb250cm9sIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICBcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tcGxheWJhY2stY29udHJvbCcsIFZtUGxheWJhY2tDb250cm9sKTtcbiAgICBkZWZpbmUoJ3ZtLWNvbnRyb2wnLCBWbUNvbnRyb2wpO1xuICAgIGRlZmluZSgndm0taWNvbicsIFZtSWNvbik7XG4gICAgZGVmaW5lKCd2bS10b29sdGlwJywgVm1Ub29sdGlwKTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgW10pXG4gIH1cbn1cbiAgIl19