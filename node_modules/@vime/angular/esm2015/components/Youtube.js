import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmYoutube, VmEmbed } from '@vime/core';
import { define } from '../lib';
const YoutubeInputs = [
    'cookies',
    'videoId',
    'showFullscreenControl',
    'poster',
    'language',
    'autoplay',
    'controls',
    'logger',
    'loop',
    'muted',
    'playsinline',
];
const YoutubeMethods = [
    'getAdapter',
];
const YoutubeOutputs = [];
let Youtube = class Youtube {
    constructor(c, r, z) {
        this.z = z;
        define('vm-youtube', VmYoutube);
        define('vm-embed', VmEmbed);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
Youtube.decorators = [
    { type: Component, args: [{
                selector: 'vm-youtube',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: YoutubeInputs,
                outputs: YoutubeOutputs
            },] }
];
Youtube.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Youtube = __decorate([
    ProxyCmp({
        inputs: YoutubeInputs,
        methods: YoutubeMethods,
    })
], Youtube);
export { Youtube };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWW91dHViZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvWW91dHViZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsU0FBUyxFQUNULE9BQU8sRUFDUixNQUFNLFlBQVksQ0FBQztBQUVwQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2hDLE1BQU0sYUFBYSxHQUFhO0lBQzlCLFNBQVM7SUFDVCxTQUFTO0lBQ1QsdUJBQXVCO0lBQ3ZCLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxhQUFhO0NBQ2QsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFhO0lBQy9CLFlBQVk7Q0FDYixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQWEsRUFFaEMsQ0FBQztJQWlCVyxPQUFPLFNBQVAsT0FBTztJQUtsQixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN2QixDQUFDO0NBQ0YsQ0FBQTs7WUFuQkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLGFBQWE7Z0JBQ3JCLE9BQU8sRUFBRSxjQUFjO2FBQ3hCOzs7WUFoRGlDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUFpRG5GLE9BQU87SUFYbkIsUUFBUSxDQUFDO1FBQ1IsTUFBTSxFQUFFLGFBQWE7UUFDckIsT0FBTyxFQUFFLGNBQWM7S0FDeEIsQ0FBQztHQVFXLE9BQU8sQ0FZbkI7U0FaWSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbVlvdXR1YmUsXG4gIFZtRW1iZWQgXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgWW91dHViZUlucHV0czogc3RyaW5nW10gPSBbXG4gICdjb29raWVzJyxcbiAgJ3ZpZGVvSWQnLFxuICAnc2hvd0Z1bGxzY3JlZW5Db250cm9sJyxcbiAgJ3Bvc3RlcicsXG4gICdsYW5ndWFnZScsXG4gICdhdXRvcGxheScsXG4gICdjb250cm9scycsXG4gICdsb2dnZXInLFxuICAnbG9vcCcsXG4gICdtdXRlZCcsXG4gICdwbGF5c2lubGluZScsXG5dO1xuXG5jb25zdCBZb3V0dWJlTWV0aG9kczogc3RyaW5nW10gPSBbXG4gICdnZXRBZGFwdGVyJyxcbl07XG5cbmNvbnN0IFlvdXR1YmVPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgWW91dHViZSBleHRlbmRzIENvbXBvbmVudHMuVm1Zb3V0dWJlIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWW91dHViZUlucHV0cyxcbiAgbWV0aG9kczogWW91dHViZU1ldGhvZHMsXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndm0teW91dHViZScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFlvdXR1YmVJbnB1dHMsXG4gIG91dHB1dHM6IFlvdXR1YmVPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBZb3V0dWJlIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICBcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0teW91dHViZScsIFZtWW91dHViZSk7XG4gICAgZGVmaW5lKCd2bS1lbWJlZCcsIFZtRW1iZWQpO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbXSlcbiAgfVxufVxuICAiXX0=