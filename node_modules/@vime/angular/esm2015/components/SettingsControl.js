import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmSettingsControl, VmControl, VmIcon, VmTooltip } from '@vime/core';
import { define } from '../lib';
const SettingsControlInputs = [
    'icon',
    'icons',
    'tooltipPosition',
    'tooltipDirection',
    'menu',
    'expanded',
    'i18n',
    'hideTooltip',
];
const SettingsControlMethods = [
    'focusControl',
    'blurControl',
];
const SettingsControlOutputs = [];
let SettingsControl = class SettingsControl {
    constructor(c, r, z) {
        this.z = z;
        define('vm-settings-control', VmSettingsControl);
        define('vm-control', VmControl);
        define('vm-icon', VmIcon);
        define('vm-tooltip', VmTooltip);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
SettingsControl.decorators = [
    { type: Component, args: [{
                selector: 'vm-settings-control',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: SettingsControlInputs,
                outputs: SettingsControlOutputs
            },] }
];
SettingsControl.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
SettingsControl = __decorate([
    ProxyCmp({
        inputs: SettingsControlInputs,
        methods: SettingsControlMethods,
    })
], SettingsControl);
export { SettingsControl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3NDb250cm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9TZXR0aW5nc0NvbnRyb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLFlBQVksQ0FBQztBQUVwQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2hDLE1BQU0scUJBQXFCLEdBQWE7SUFDdEMsTUFBTTtJQUNOLE9BQU87SUFDUCxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLE1BQU07SUFDTixVQUFVO0lBQ1YsTUFBTTtJQUNOLGFBQWE7Q0FDZCxDQUFDO0FBRUYsTUFBTSxzQkFBc0IsR0FBYTtJQUN2QyxjQUFjO0lBQ2QsYUFBYTtDQUNkLENBQUM7QUFFRixNQUFNLHNCQUFzQixHQUFhLEVBRXhDLENBQUM7SUFpQlcsZUFBZSxTQUFmLGVBQWU7SUFLMUIsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxNQUFNLENBQUMscUJBQXFCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN2QixDQUFDO0NBQ0YsQ0FBQTs7WUFyQkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUscUJBQXFCO2dCQUM3QixPQUFPLEVBQUUsc0JBQXNCO2FBQ2hDOzs7WUFoRGlDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUFpRG5GLGVBQWU7SUFYM0IsUUFBUSxDQUFDO1FBQ1IsTUFBTSxFQUFFLHFCQUFxQjtRQUM3QixPQUFPLEVBQUUsc0JBQXNCO0tBQ2hDLENBQUM7R0FRVyxlQUFlLENBYzNCO1NBZFksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1TZXR0aW5nc0NvbnRyb2wsXG4gIFZtQ29udHJvbCxcbiAgVm1JY29uLFxuICBWbVRvb2x0aXAgXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgU2V0dGluZ3NDb250cm9sSW5wdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ2ljb24nLFxuICAnaWNvbnMnLFxuICAndG9vbHRpcFBvc2l0aW9uJyxcbiAgJ3Rvb2x0aXBEaXJlY3Rpb24nLFxuICAnbWVudScsXG4gICdleHBhbmRlZCcsXG4gICdpMThuJyxcbiAgJ2hpZGVUb29sdGlwJyxcbl07XG5cbmNvbnN0IFNldHRpbmdzQ29udHJvbE1ldGhvZHM6IHN0cmluZ1tdID0gW1xuICAnZm9jdXNDb250cm9sJyxcbiAgJ2JsdXJDb250cm9sJyxcbl07XG5cbmNvbnN0IFNldHRpbmdzQ29udHJvbE91dHB1dHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBTZXR0aW5nc0NvbnRyb2wgZXh0ZW5kcyBDb21wb25lbnRzLlZtU2V0dGluZ3NDb250cm9sIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogU2V0dGluZ3NDb250cm9sSW5wdXRzLFxuICBtZXRob2RzOiBTZXR0aW5nc0NvbnRyb2xNZXRob2RzLFxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ZtLXNldHRpbmdzLWNvbnRyb2wnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBTZXR0aW5nc0NvbnRyb2xJbnB1dHMsXG4gIG91dHB1dHM6IFNldHRpbmdzQ29udHJvbE91dHB1dHMsXG59KVxuZXhwb3J0IGNsYXNzIFNldHRpbmdzQ29udHJvbCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgXG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLXNldHRpbmdzLWNvbnRyb2wnLCBWbVNldHRpbmdzQ29udHJvbCk7XG4gICAgZGVmaW5lKCd2bS1jb250cm9sJywgVm1Db250cm9sKTtcbiAgICBkZWZpbmUoJ3ZtLWljb24nLCBWbUljb24pO1xuICAgIGRlZmluZSgndm0tdG9vbHRpcCcsIFZtVG9vbHRpcCk7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFtdKVxuICB9XG59XG4gICJdfQ==