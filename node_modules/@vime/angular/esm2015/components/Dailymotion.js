import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmDailymotion, VmEmbed } from '@vime/core';
import { define } from '../lib';
const DailymotionInputs = [
    'videoId',
    'shouldAutoplayQueue',
    'showUpNextQueue',
    'showShareButtons',
    'color',
    'syndication',
    'showDailymotionLogo',
    'showVideoInfo',
    'language',
    'autoplay',
    'controls',
    'poster',
    'logger',
    'loop',
    'muted',
    'playsinline',
];
const DailymotionMethods = [
    'getAdapter',
];
const DailymotionOutputs = [
    'vmError',
];
let Dailymotion = class Dailymotion {
    constructor(c, r, z) {
        this.z = z;
        define('vm-dailymotion', VmDailymotion);
        define('vm-embed', VmEmbed);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmError']);
    }
};
Dailymotion.decorators = [
    { type: Component, args: [{
                selector: 'vm-dailymotion',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: DailymotionInputs,
                outputs: DailymotionOutputs
            },] }
];
Dailymotion.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Dailymotion = __decorate([
    ProxyCmp({
        inputs: DailymotionInputs,
        methods: DailymotionMethods,
    })
], Dailymotion);
export { Dailymotion };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGFpbHltb3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL0RhaWx5bW90aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxhQUFhLEVBQ2IsT0FBTyxFQUNSLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxpQkFBaUIsR0FBYTtJQUNsQyxTQUFTO0lBQ1QscUJBQXFCO0lBQ3JCLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsT0FBTztJQUNQLGFBQWE7SUFDYixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxhQUFhO0NBQ2QsQ0FBQztBQUVGLE1BQU0sa0JBQWtCLEdBQWE7SUFDbkMsWUFBWTtDQUNiLENBQUM7QUFFRixNQUFNLGtCQUFrQixHQUFhO0lBQ25DLFNBQVM7Q0FDVixDQUFDO0lBaUJXLFdBQVcsU0FBWCxXQUFXO0lBTXRCLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsTUFBTSxDQUFDLGdCQUFnQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO0lBQ2hDLENBQUM7Q0FDRixDQUFBOztZQXBCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxpQkFBaUI7Z0JBQ3pCLE9BQU8sRUFBRSxrQkFBa0I7YUFDNUI7OztZQXJEaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQXNEbkYsV0FBVztJQVh2QixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsaUJBQWlCO1FBQ3pCLE9BQU8sRUFBRSxrQkFBa0I7S0FDNUIsQ0FBQztHQVFXLFdBQVcsQ0FhdkI7U0FiWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbURhaWx5bW90aW9uLFxuICBWbUVtYmVkIFxufSBmcm9tICdAdmltZS9jb3JlJztcblxuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vbGliJztcbiAgXG5cbmNvbnN0IERhaWx5bW90aW9uSW5wdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ3ZpZGVvSWQnLFxuICAnc2hvdWxkQXV0b3BsYXlRdWV1ZScsXG4gICdzaG93VXBOZXh0UXVldWUnLFxuICAnc2hvd1NoYXJlQnV0dG9ucycsXG4gICdjb2xvcicsXG4gICdzeW5kaWNhdGlvbicsXG4gICdzaG93RGFpbHltb3Rpb25Mb2dvJyxcbiAgJ3Nob3dWaWRlb0luZm8nLFxuICAnbGFuZ3VhZ2UnLFxuICAnYXV0b3BsYXknLFxuICAnY29udHJvbHMnLFxuICAncG9zdGVyJyxcbiAgJ2xvZ2dlcicsXG4gICdsb29wJyxcbiAgJ211dGVkJyxcbiAgJ3BsYXlzaW5saW5lJyxcbl07XG5cbmNvbnN0IERhaWx5bW90aW9uTWV0aG9kczogc3RyaW5nW10gPSBbXG4gICdnZXRBZGFwdGVyJyxcbl07XG5cbmNvbnN0IERhaWx5bW90aW9uT3V0cHV0czogc3RyaW5nW10gPSBbXG4gICd2bUVycm9yJyxcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEYWlseW1vdGlvbiBleHRlbmRzIENvbXBvbmVudHMuVm1EYWlseW1vdGlvbiB7fVxuXG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IERhaWx5bW90aW9uSW5wdXRzLFxuICBtZXRob2RzOiBEYWlseW1vdGlvbk1ldGhvZHMsXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndm0tZGFpbHltb3Rpb24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBEYWlseW1vdGlvbklucHV0cyxcbiAgb3V0cHV0czogRGFpbHltb3Rpb25PdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBEYWlseW1vdGlvbiB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBoYXMgb2NjdXJyZWQuICovXG4gIHZtRXJyb3IhOiBFbWl0dGVyPEpTWC5WbURhaWx5bW90aW9uW1wib25WbUVycm9yXCJdPjtcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tZGFpbHltb3Rpb24nLCBWbURhaWx5bW90aW9uKTtcbiAgICBkZWZpbmUoJ3ZtLWVtYmVkJywgVm1FbWJlZCk7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFsndm1FcnJvciddKVxuICB9XG59XG4gICJdfQ==