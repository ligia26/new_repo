import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmVimeo, VmEmbed } from '@vime/core';
import { define } from '../lib';
const VimeoInputs = [
    'videoId',
    'byline',
    'color',
    'portrait',
    'noAutoAspectRatio',
    'poster',
    'cookies',
    'language',
    'aspectRatio',
    'autoplay',
    'controls',
    'logger',
    'loop',
    'muted',
    'playsinline',
];
const VimeoMethods = [
    'getAdapter',
];
const VimeoOutputs = [
    'vmError',
];
let Vimeo = class Vimeo {
    constructor(c, r, z) {
        this.z = z;
        define('vm-vimeo', VmVimeo);
        define('vm-embed', VmEmbed);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmError']);
    }
};
Vimeo.decorators = [
    { type: Component, args: [{
                selector: 'vm-vimeo',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: VimeoInputs,
                outputs: VimeoOutputs
            },] }
];
Vimeo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Vimeo = __decorate([
    ProxyCmp({
        inputs: VimeoInputs,
        methods: VimeoMethods,
    })
], Vimeo);
export { Vimeo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmltZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL1ZpbWVvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxPQUFPLEVBQ1AsT0FBTyxFQUNSLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxXQUFXLEdBQWE7SUFDNUIsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtJQUNWLG1CQUFtQjtJQUNuQixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixhQUFhO0lBQ2IsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxhQUFhO0NBQ2QsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFhO0lBQzdCLFlBQVk7Q0FDYixDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQWE7SUFDN0IsU0FBUztDQUNWLENBQUM7SUFpQlcsS0FBSyxTQUFMLEtBQUs7SUFNaEIsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxNQUFNLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO0lBQ2hDLENBQUM7Q0FDRixDQUFBOztZQXBCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsV0FBVztnQkFDbkIsT0FBTyxFQUFFLFlBQVk7YUFDdEI7OztZQXBEaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQXFEbkYsS0FBSztJQVhqQixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsV0FBVztRQUNuQixPQUFPLEVBQUUsWUFBWTtLQUN0QixDQUFDO0dBUVcsS0FBSyxDQWFqQjtTQWJZLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtVmltZW8sXG4gIFZtRW1iZWQgXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgVmltZW9JbnB1dHM6IHN0cmluZ1tdID0gW1xuICAndmlkZW9JZCcsXG4gICdieWxpbmUnLFxuICAnY29sb3InLFxuICAncG9ydHJhaXQnLFxuICAnbm9BdXRvQXNwZWN0UmF0aW8nLFxuICAncG9zdGVyJyxcbiAgJ2Nvb2tpZXMnLFxuICAnbGFuZ3VhZ2UnLFxuICAnYXNwZWN0UmF0aW8nLFxuICAnYXV0b3BsYXknLFxuICAnY29udHJvbHMnLFxuICAnbG9nZ2VyJyxcbiAgJ2xvb3AnLFxuICAnbXV0ZWQnLFxuICAncGxheXNpbmxpbmUnLFxuXTtcblxuY29uc3QgVmltZW9NZXRob2RzOiBzdHJpbmdbXSA9IFtcbiAgJ2dldEFkYXB0ZXInLFxuXTtcblxuY29uc3QgVmltZW9PdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ3ZtRXJyb3InLFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFZpbWVvIGV4dGVuZHMgQ29tcG9uZW50cy5WbVZpbWVvIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogVmltZW9JbnB1dHMsXG4gIG1ldGhvZHM6IFZpbWVvTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS12aW1lbycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFZpbWVvSW5wdXRzLFxuICBvdXRwdXRzOiBWaW1lb091dHB1dHMsXG59KVxuZXhwb3J0IGNsYXNzIFZpbWVvIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4gKi9cbiAgdm1FcnJvciE6IEVtaXR0ZXI8SlNYLlZtVmltZW9bXCJvblZtRXJyb3JcIl0+O1xuXG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgZGVmaW5lKCd2bS12aW1lbycsIFZtVmltZW8pO1xuICAgIGRlZmluZSgndm0tZW1iZWQnLCBWbUVtYmVkKTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgWyd2bUVycm9yJ10pXG4gIH1cbn1cbiAgIl19