import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmIcon } from '@vime/core';
import { define } from '../lib';
const IconInputs = [
    'name',
    'src',
    'label',
    'library',
    'icons',
];
const IconMethods = [
    'redraw',
];
const IconOutputs = [
    'vmLoad',
    'vmError',
];
let Icon = class Icon {
    constructor(c, r, z) {
        this.z = z;
        define('vm-icon', VmIcon);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmLoad', 'vmError']);
    }
};
Icon.decorators = [
    { type: Component, args: [{
                selector: 'vm-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: IconInputs,
                outputs: IconOutputs
            },] }
];
Icon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Icon = __decorate([
    ProxyCmp({
        inputs: IconInputs,
        methods: IconMethods,
    })
], Icon);
export { Icon };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvSWNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsTUFBTSxFQUNQLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxVQUFVLEdBQWE7SUFDM0IsTUFBTTtJQUNOLEtBQUs7SUFDTCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87Q0FDUixDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQWE7SUFDNUIsUUFBUTtDQUNULENBQUM7QUFFRixNQUFNLFdBQVcsR0FBYTtJQUM1QixRQUFRO0lBQ1IsU0FBUztDQUNWLENBQUM7SUFpQlcsSUFBSSxTQUFKLElBQUk7SUFRZixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0NBQ0YsQ0FBQTs7WUFyQkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxTQUFTO2dCQUNuQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLE9BQU8sRUFBRSxXQUFXO2FBQ3JCOzs7WUExQ2lDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUEyQ25GLElBQUk7SUFYaEIsUUFBUSxDQUFDO1FBQ1IsTUFBTSxFQUFFLFVBQVU7UUFDbEIsT0FBTyxFQUFFLFdBQVc7S0FDckIsQ0FBQztHQVFXLElBQUksQ0FjaEI7U0FkWSxJQUFJIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbUljb24gXG59IGZyb20gJ0B2aW1lL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi9saWInO1xuICBcblxuY29uc3QgSWNvbklucHV0czogc3RyaW5nW10gPSBbXG4gICduYW1lJyxcbiAgJ3NyYycsXG4gICdsYWJlbCcsXG4gICdsaWJyYXJ5JyxcbiAgJ2ljb25zJyxcbl07XG5cbmNvbnN0IEljb25NZXRob2RzOiBzdHJpbmdbXSA9IFtcbiAgJ3JlZHJhdycsXG5dO1xuXG5jb25zdCBJY29uT3V0cHV0czogc3RyaW5nW10gPSBbXG4gICd2bUxvYWQnLFxuICAndm1FcnJvcicsXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgSWNvbiBleHRlbmRzIENvbXBvbmVudHMuVm1JY29uIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogSWNvbklucHV0cyxcbiAgbWV0aG9kczogSWNvbk1ldGhvZHMsXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndm0taWNvbicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IEljb25JbnB1dHMsXG4gIG91dHB1dHM6IEljb25PdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBJY29uIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBpY29uIGhhcyBsb2FkZWQuICovXG4gIHZtTG9hZCE6IEVtaXR0ZXI8SlNYLlZtSWNvbltcIm9uVm1Mb2FkXCJdPjtcbiAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgaWNvbiBmYWlsZWQgdG8gbG9hZC4gKi9cbiAgdm1FcnJvciE6IEVtaXR0ZXI8SlNYLlZtSWNvbltcIm9uVm1FcnJvclwiXT47XG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLWljb24nLCBWbUljb24pO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbJ3ZtTG9hZCcsICd2bUVycm9yJ10pXG4gIH1cbn1cbiAgIl19