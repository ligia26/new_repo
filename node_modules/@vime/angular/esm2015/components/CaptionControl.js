import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmCaptionControl, VmControl, VmIcon, VmTooltip } from '@vime/core';
import { define } from '../lib';
const CaptionControlInputs = [
    'showIcon',
    'hideIcon',
    'tooltipPosition',
    'tooltipDirection',
    'hideTooltip',
    'icons',
    'keys',
    'i18n',
    'playbackReady',
    'textTracks',
    'isTextTrackVisible',
];
const CaptionControlMethods = [];
const CaptionControlOutputs = [];
let CaptionControl = class CaptionControl {
    constructor(c, r, z) {
        this.z = z;
        define('vm-caption-control', VmCaptionControl);
        define('vm-control', VmControl);
        define('vm-icon', VmIcon);
        define('vm-tooltip', VmTooltip);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
CaptionControl.decorators = [
    { type: Component, args: [{
                selector: 'vm-caption-control',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: CaptionControlInputs,
                outputs: CaptionControlOutputs
            },] }
];
CaptionControl.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
CaptionControl = __decorate([
    ProxyCmp({
        inputs: CaptionControlInputs,
        methods: CaptionControlMethods,
    })
], CaptionControl);
export { CaptionControl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FwdGlvbkNvbnRyb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL0NhcHRpb25Db250cm9sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsU0FBUyxFQUNULE1BQU0sRUFDTixTQUFTLEVBQ1YsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxNQUFNLG9CQUFvQixHQUFhO0lBQ3JDLFVBQVU7SUFDVixVQUFVO0lBQ1YsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsT0FBTztJQUNQLE1BQU07SUFDTixNQUFNO0lBQ04sZUFBZTtJQUNmLFlBQVk7SUFDWixvQkFBb0I7Q0FDckIsQ0FBQztBQUVGLE1BQU0scUJBQXFCLEdBQWEsRUFFdkMsQ0FBQztBQUVGLE1BQU0scUJBQXFCLEdBQWEsRUFFdkMsQ0FBQztJQWlCVyxjQUFjLFNBQWQsY0FBYztJQUt6QixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUMxQixXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3ZCLENBQUM7Q0FDRixDQUFBOztZQXJCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxvQkFBb0I7Z0JBQzVCLE9BQU8sRUFBRSxxQkFBcUI7YUFDL0I7OztZQWxEaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQW1EbkYsY0FBYztJQVgxQixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsb0JBQW9CO1FBQzVCLE9BQU8sRUFBRSxxQkFBcUI7S0FDL0IsQ0FBQztHQVFXLGNBQWMsQ0FjMUI7U0FkWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbUNhcHRpb25Db250cm9sLFxuICBWbUNvbnRyb2wsXG4gIFZtSWNvbixcbiAgVm1Ub29sdGlwIFxufSBmcm9tICdAdmltZS9jb3JlJztcblxuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vbGliJztcbiAgXG5cbmNvbnN0IENhcHRpb25Db250cm9sSW5wdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ3Nob3dJY29uJyxcbiAgJ2hpZGVJY29uJyxcbiAgJ3Rvb2x0aXBQb3NpdGlvbicsXG4gICd0b29sdGlwRGlyZWN0aW9uJyxcbiAgJ2hpZGVUb29sdGlwJyxcbiAgJ2ljb25zJyxcbiAgJ2tleXMnLFxuICAnaTE4bicsXG4gICdwbGF5YmFja1JlYWR5JyxcbiAgJ3RleHRUcmFja3MnLFxuICAnaXNUZXh0VHJhY2tWaXNpYmxlJyxcbl07XG5cbmNvbnN0IENhcHRpb25Db250cm9sTWV0aG9kczogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuY29uc3QgQ2FwdGlvbkNvbnRyb2xPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgQ2FwdGlvbkNvbnRyb2wgZXh0ZW5kcyBDb21wb25lbnRzLlZtQ2FwdGlvbkNvbnRyb2wge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBDYXB0aW9uQ29udHJvbElucHV0cyxcbiAgbWV0aG9kczogQ2FwdGlvbkNvbnRyb2xNZXRob2RzLFxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ZtLWNhcHRpb24tY29udHJvbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IENhcHRpb25Db250cm9sSW5wdXRzLFxuICBvdXRwdXRzOiBDYXB0aW9uQ29udHJvbE91dHB1dHMsXG59KVxuZXhwb3J0IGNsYXNzIENhcHRpb25Db250cm9sIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICBcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tY2FwdGlvbi1jb250cm9sJywgVm1DYXB0aW9uQ29udHJvbCk7XG4gICAgZGVmaW5lKCd2bS1jb250cm9sJywgVm1Db250cm9sKTtcbiAgICBkZWZpbmUoJ3ZtLWljb24nLCBWbUljb24pO1xuICAgIGRlZmluZSgndm0tdG9vbHRpcCcsIFZtVG9vbHRpcCk7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFtdKVxuICB9XG59XG4gICJdfQ==