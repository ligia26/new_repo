import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmCaptions } from '@vime/core';
import { define } from '../lib';
const CaptionsInputs = [
    'hidden',
    'isControlsActive',
    'isVideoView',
    'playbackStarted',
    'textTracks',
    'currentTextTrack',
    'isTextTrackVisible',
];
const CaptionsMethods = [];
const CaptionsOutputs = [];
let Captions = class Captions {
    constructor(c, r, z) {
        this.z = z;
        define('vm-captions', VmCaptions);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
Captions.decorators = [
    { type: Component, args: [{
                selector: 'vm-captions',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: CaptionsInputs,
                outputs: CaptionsOutputs
            },] }
];
Captions.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Captions = __decorate([
    ProxyCmp({
        inputs: CaptionsInputs,
        methods: CaptionsMethods,
    })
], Captions);
export { Captions };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FwdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL0NhcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxVQUFVLEVBQ1gsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxNQUFNLGNBQWMsR0FBYTtJQUMvQixRQUFRO0lBQ1Isa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixvQkFBb0I7Q0FDckIsQ0FBQztBQUVGLE1BQU0sZUFBZSxHQUFhLEVBRWpDLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBYSxFQUVqQyxDQUFDO0lBaUJXLFFBQVEsU0FBUixRQUFRO0lBS25CLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsTUFBTSxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN2QixDQUFDO0NBQ0YsQ0FBQTs7WUFsQkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLGNBQWM7Z0JBQ3RCLE9BQU8sRUFBRSxlQUFlO2FBQ3pCOzs7WUEzQ2lDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUE0Q25GLFFBQVE7SUFYcEIsUUFBUSxDQUFDO1FBQ1IsTUFBTSxFQUFFLGNBQWM7UUFDdEIsT0FBTyxFQUFFLGVBQWU7S0FDekIsQ0FBQztHQVFXLFFBQVEsQ0FXcEI7U0FYWSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbUNhcHRpb25zIFxufSBmcm9tICdAdmltZS9jb3JlJztcblxuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vbGliJztcbiAgXG5cbmNvbnN0IENhcHRpb25zSW5wdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ2hpZGRlbicsXG4gICdpc0NvbnRyb2xzQWN0aXZlJyxcbiAgJ2lzVmlkZW9WaWV3JyxcbiAgJ3BsYXliYWNrU3RhcnRlZCcsXG4gICd0ZXh0VHJhY2tzJyxcbiAgJ2N1cnJlbnRUZXh0VHJhY2snLFxuICAnaXNUZXh0VHJhY2tWaXNpYmxlJyxcbl07XG5cbmNvbnN0IENhcHRpb25zTWV0aG9kczogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuY29uc3QgQ2FwdGlvbnNPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgQ2FwdGlvbnMgZXh0ZW5kcyBDb21wb25lbnRzLlZtQ2FwdGlvbnMge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBDYXB0aW9uc0lucHV0cyxcbiAgbWV0aG9kczogQ2FwdGlvbnNNZXRob2RzLFxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ZtLWNhcHRpb25zJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogQ2FwdGlvbnNJbnB1dHMsXG4gIG91dHB1dHM6IENhcHRpb25zT3V0cHV0cyxcbn0pXG5leHBvcnQgY2xhc3MgQ2FwdGlvbnMge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIFxuXG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgZGVmaW5lKCd2bS1jYXB0aW9ucycsIFZtQ2FwdGlvbnMpO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbXSlcbiAgfVxufVxuICAiXX0=