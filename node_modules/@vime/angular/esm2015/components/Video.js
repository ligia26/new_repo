import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmVideo, VmFile } from '@vime/core';
import { define } from '../lib';
const VideoInputs = [
    'willAttach',
    'hasCustomTextManager',
    'crossOrigin',
    'preload',
    'poster',
    'controlsList',
    'autoPiP',
    'disablePiP',
    'disableRemotePlayback',
    'mediaTitle',
];
const VideoMethods = [
    'getAdapter',
];
const VideoOutputs = [];
let Video = class Video {
    constructor(c, r, z) {
        this.z = z;
        define('vm-video', VmVideo);
        define('vm-file', VmFile);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
Video.decorators = [
    { type: Component, args: [{
                selector: 'vm-video',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: VideoInputs,
                outputs: VideoOutputs
            },] }
];
Video.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Video = __decorate([
    ProxyCmp({
        inputs: VideoInputs,
        methods: VideoMethods,
    })
], Video);
export { Video };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL1ZpZGVvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxPQUFPLEVBQ1AsTUFBTSxFQUNQLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxXQUFXLEdBQWE7SUFDNUIsWUFBWTtJQUNaLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsU0FBUztJQUNULFFBQVE7SUFDUixjQUFjO0lBQ2QsU0FBUztJQUNULFlBQVk7SUFDWix1QkFBdUI7SUFDdkIsWUFBWTtDQUNiLENBQUM7QUFFRixNQUFNLFlBQVksR0FBYTtJQUM3QixZQUFZO0NBQ2IsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFhLEVBRTlCLENBQUM7SUFpQlcsS0FBSyxTQUFMLEtBQUs7SUFLaEIsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxNQUFNLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkIsQ0FBQztDQUNGLENBQUE7O1lBbkJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsVUFBVTtnQkFDcEIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxXQUFXO2dCQUNuQixPQUFPLEVBQUUsWUFBWTthQUN0Qjs7O1lBL0NpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBZ0RuRixLQUFLO0lBWGpCLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxXQUFXO1FBQ25CLE9BQU8sRUFBRSxZQUFZO0tBQ3RCLENBQUM7R0FRVyxLQUFLLENBWWpCO1NBWlksS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1WaWRlbyxcbiAgVm1GaWxlIFxufSBmcm9tICdAdmltZS9jb3JlJztcblxuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vbGliJztcbiAgXG5cbmNvbnN0IFZpZGVvSW5wdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ3dpbGxBdHRhY2gnLFxuICAnaGFzQ3VzdG9tVGV4dE1hbmFnZXInLFxuICAnY3Jvc3NPcmlnaW4nLFxuICAncHJlbG9hZCcsXG4gICdwb3N0ZXInLFxuICAnY29udHJvbHNMaXN0JyxcbiAgJ2F1dG9QaVAnLFxuICAnZGlzYWJsZVBpUCcsXG4gICdkaXNhYmxlUmVtb3RlUGxheWJhY2snLFxuICAnbWVkaWFUaXRsZScsXG5dO1xuXG5jb25zdCBWaWRlb01ldGhvZHM6IHN0cmluZ1tdID0gW1xuICAnZ2V0QWRhcHRlcicsXG5dO1xuXG5jb25zdCBWaWRlb091dHB1dHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBWaWRlbyBleHRlbmRzIENvbXBvbmVudHMuVm1WaWRlbyB7fVxuXG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFZpZGVvSW5wdXRzLFxuICBtZXRob2RzOiBWaWRlb01ldGhvZHMsXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndm0tdmlkZW8nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBWaWRlb0lucHV0cyxcbiAgb3V0cHV0czogVmlkZW9PdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBWaWRlbyB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgXG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLXZpZGVvJywgVm1WaWRlbyk7XG4gICAgZGVmaW5lKCd2bS1maWxlJywgVm1GaWxlKTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgW10pXG4gIH1cbn1cbiAgIl19