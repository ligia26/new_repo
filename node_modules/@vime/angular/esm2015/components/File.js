import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmFile } from '@vime/core';
import { define } from '../lib';
const FileInputs = [
    'willAttach',
    'crossOrigin',
    'preload',
    'poster',
    'mediaTitle',
    'controlsList',
    'autoPiP',
    'disablePiP',
    'disableRemotePlayback',
    'viewType',
    'playbackRates',
    'language',
    'autoplay',
    'controls',
    'logger',
    'loop',
    'muted',
    'playsinline',
    'noConnect',
    'paused',
    'currentTime',
    'volume',
    'playbackReady',
    'playbackStarted',
    'currentTextTrack',
    'hasCustomTextManager',
    'isTextTrackVisible',
    'shouldRenderNativeTextTracks',
];
const FileMethods = [
    'getAdapter',
];
const FileOutputs = [
    'vmError',
    'vmMediaElChange',
    'vmSrcSetChange',
];
let File = class File {
    constructor(c, r, z) {
        this.z = z;
        define('vm-file', VmFile);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmError', 'vmMediaElChange', 'vmSrcSetChange']);
    }
};
File.decorators = [
    { type: Component, args: [{
                selector: 'vm-file',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: FileInputs,
                outputs: FileOutputs
            },] }
];
File.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
File = __decorate([
    ProxyCmp({
        inputs: FileInputs,
        methods: FileMethods,
    })
], File);
export { File };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvRmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsTUFBTSxFQUNQLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxVQUFVLEdBQWE7SUFDM0IsWUFBWTtJQUNaLGFBQWE7SUFDYixTQUFTO0lBQ1QsUUFBUTtJQUNSLFlBQVk7SUFDWixjQUFjO0lBQ2QsU0FBUztJQUNULFlBQVk7SUFDWix1QkFBdUI7SUFDdkIsVUFBVTtJQUNWLGVBQWU7SUFDZixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxhQUFhO0lBQ2IsV0FBVztJQUNYLFFBQVE7SUFDUixhQUFhO0lBQ2IsUUFBUTtJQUNSLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0QixvQkFBb0I7SUFDcEIsOEJBQThCO0NBQy9CLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBYTtJQUM1QixZQUFZO0NBQ2IsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFhO0lBQzVCLFNBQVM7SUFDVCxpQkFBaUI7SUFDakIsZ0JBQWdCO0NBQ2pCLENBQUM7SUFpQlcsSUFBSSxTQUFKLElBQUk7SUFVZixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFBO0lBQ3JFLENBQUM7Q0FDRixDQUFBOztZQXZCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsVUFBVTtnQkFDbEIsT0FBTyxFQUFFLFdBQVc7YUFDckI7OztZQWxFaUMsaUJBQWlCO1lBQWEsVUFBVTtZQUFnQixNQUFNOztBQW1FbkYsSUFBSTtJQVhoQixRQUFRLENBQUM7UUFDUixNQUFNLEVBQUUsVUFBVTtRQUNsQixPQUFPLEVBQUUsV0FBVztLQUNyQixDQUFDO0dBUVcsSUFBSSxDQWdCaEI7U0FoQlksSUFBSSIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1GaWxlIFxufSBmcm9tICdAdmltZS9jb3JlJztcblxuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vbGliJztcbiAgXG5cbmNvbnN0IEZpbGVJbnB1dHM6IHN0cmluZ1tdID0gW1xuICAnd2lsbEF0dGFjaCcsXG4gICdjcm9zc09yaWdpbicsXG4gICdwcmVsb2FkJyxcbiAgJ3Bvc3RlcicsXG4gICdtZWRpYVRpdGxlJyxcbiAgJ2NvbnRyb2xzTGlzdCcsXG4gICdhdXRvUGlQJyxcbiAgJ2Rpc2FibGVQaVAnLFxuICAnZGlzYWJsZVJlbW90ZVBsYXliYWNrJyxcbiAgJ3ZpZXdUeXBlJyxcbiAgJ3BsYXliYWNrUmF0ZXMnLFxuICAnbGFuZ3VhZ2UnLFxuICAnYXV0b3BsYXknLFxuICAnY29udHJvbHMnLFxuICAnbG9nZ2VyJyxcbiAgJ2xvb3AnLFxuICAnbXV0ZWQnLFxuICAncGxheXNpbmxpbmUnLFxuICAnbm9Db25uZWN0JyxcbiAgJ3BhdXNlZCcsXG4gICdjdXJyZW50VGltZScsXG4gICd2b2x1bWUnLFxuICAncGxheWJhY2tSZWFkeScsXG4gICdwbGF5YmFja1N0YXJ0ZWQnLFxuICAnY3VycmVudFRleHRUcmFjaycsXG4gICdoYXNDdXN0b21UZXh0TWFuYWdlcicsXG4gICdpc1RleHRUcmFja1Zpc2libGUnLFxuICAnc2hvdWxkUmVuZGVyTmF0aXZlVGV4dFRyYWNrcycsXG5dO1xuXG5jb25zdCBGaWxlTWV0aG9kczogc3RyaW5nW10gPSBbXG4gICdnZXRBZGFwdGVyJyxcbl07XG5cbmNvbnN0IEZpbGVPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ3ZtRXJyb3InLFxuICAndm1NZWRpYUVsQ2hhbmdlJyxcbiAgJ3ZtU3JjU2V0Q2hhbmdlJyxcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBGaWxlIGV4dGVuZHMgQ29tcG9uZW50cy5WbUZpbGUge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBGaWxlSW5wdXRzLFxuICBtZXRob2RzOiBGaWxlTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1maWxlJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogRmlsZUlucHV0cyxcbiAgb3V0cHV0czogRmlsZU91dHB1dHMsXG59KVxuZXhwb3J0IGNsYXNzIEZpbGUge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIC8qKiBFbWl0dGVkIHdoZW4gYW4gZXJyb3IgaGFzIG9jY3VycmVkLiAqL1xuICB2bUVycm9yITogRW1pdHRlcjxKU1guVm1GaWxlW1wib25WbUVycm9yXCJdPjtcbiAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgdW5kZXJseWluZyBtZWRpYSBlbGVtZW50IGNoYW5nZXMuICovXG4gIHZtTWVkaWFFbENoYW5nZSE6IEVtaXR0ZXI8SlNYLlZtRmlsZVtcIm9uVm1NZWRpYUVsQ2hhbmdlXCJdPjtcbiAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgY2hpbGQgYDxzb3VyY2UgLz5gIGVsZW1lbnRzIGFyZSBtb2RpZmllZC4gKi9cbiAgdm1TcmNTZXRDaGFuZ2UhOiBFbWl0dGVyPEpTWC5WbUZpbGVbXCJvblZtU3JjU2V0Q2hhbmdlXCJdPjtcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tZmlsZScsIFZtRmlsZSk7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIGluaXRPdXRwdXRzKHRoaXMsIFsndm1FcnJvcicsICd2bU1lZGlhRWxDaGFuZ2UnLCAndm1TcmNTZXRDaGFuZ2UnXSlcbiAgfVxufVxuICAiXX0=