import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmPlayer } from '@vime/core';
import { define } from '../lib';
const PlayerInputs = [
    'logger',
    'theme',
    'icons',
    'paused',
    'playing',
    'duration',
    'mediaTitle',
    'currentProvider',
    'currentSrc',
    'currentPoster',
    'currentTime',
    'autoplay',
    'ready',
    'playbackReady',
    'loop',
    'muted',
    'buffered',
    'playbackRate',
    'playbackRates',
    'playbackQuality',
    'playbackQualities',
    'seeking',
    'debug',
    'playbackStarted',
    'playbackEnded',
    'buffering',
    'controls',
    'isControlsActive',
    'isSettingsActive',
    'volume',
    'isFullscreenActive',
    'aspectRatio',
    'viewType',
    'isAudioView',
    'isVideoView',
    'mediaType',
    'isAudio',
    'isVideo',
    'isLive',
    'isMobile',
    'isTouch',
    'isPiPActive',
    'textTracks',
    'currentTextTrack',
    'isTextTrackVisible',
    'shouldRenderNativeTextTracks',
    'audioTracks',
    'currentAudioTrack',
    'autopause',
    'playsinline',
    'language',
    'translations',
    'languages',
    'i18n',
];
const PlayerMethods = [
    'getProvider',
    'getAdapter',
    'play',
    'pause',
    'canPlay',
    'canAutoplay',
    'canMutedAutoplay',
    'canSetPlaybackRate',
    'canSetPlaybackQuality',
    'canSetFullscreen',
    'enterFullscreen',
    'exitFullscreen',
    'canSetPiP',
    'enterPiP',
    'exitPiP',
    'canSetAudioTrack',
    'setCurrentAudioTrack',
    'canSetTextTrack',
    'setCurrentTextTrack',
    'canSetTextTrackVisibility',
    'setTextTrackVisibility',
    'extendLanguage',
    'getContainer',
    'callAdapter',
];
const PlayerOutputs = [
    'vmThemeChange',
    'vmPausedChange',
    'vmPlay',
    'vmPlayingChange',
    'vmSeekingChange',
    'vmSeeked',
    'vmBufferingChange',
    'vmDurationChange',
    'vmCurrentTimeChange',
    'vmReady',
    'vmPlaybackReady',
    'vmPlaybackStarted',
    'vmPlaybackEnded',
    'vmBufferedChange',
    'vmError',
    'vmLoadStart',
    'vmCurrentProviderChange',
    'vmCurrentSrcChange',
    'vmCurrentPosterChange',
    'vmMediaTitleChange',
    'vmControlsChange',
    'vmPlaybackRateChange',
    'vmPlaybackRatesChange',
    'vmPlaybackQualityChange',
    'vmPlaybackQualitiesChange',
    'vmMutedChange',
    'vmVolumeChange',
    'vmViewTypeChange',
    'vmMediaTypeChange',
    'vmLiveChange',
    'vmTouchChange',
    'vmLanguageChange',
    'vmI18nChange',
    'vmTranslationsChange',
    'vmLanguagesChange',
    'vmFullscreenChange',
    'vmPiPChange',
    'vmTextTracksChange',
    'vmCurrentTextTrackChange',
    'vmTextTrackVisibleChange',
    'vmAudioTracksChange',
    'vmCurrentAudioTrackChange',
];
let Player = class Player {
    constructor(c, r, z) {
        this.z = z;
        define('vm-player', VmPlayer);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmThemeChange', 'vmPausedChange', 'vmPlay', 'vmPlayingChange', 'vmSeekingChange', 'vmSeeked', 'vmBufferingChange', 'vmDurationChange', 'vmCurrentTimeChange', 'vmReady', 'vmPlaybackReady', 'vmPlaybackStarted', 'vmPlaybackEnded', 'vmBufferedChange', 'vmError', 'vmLoadStart', 'vmCurrentProviderChange', 'vmCurrentSrcChange', 'vmCurrentPosterChange', 'vmMediaTitleChange', 'vmControlsChange', 'vmPlaybackRateChange', 'vmPlaybackRatesChange', 'vmPlaybackQualityChange', 'vmPlaybackQualitiesChange', 'vmMutedChange', 'vmVolumeChange', 'vmViewTypeChange', 'vmMediaTypeChange', 'vmLiveChange', 'vmTouchChange', 'vmLanguageChange', 'vmI18nChange', 'vmTranslationsChange', 'vmLanguagesChange', 'vmFullscreenChange', 'vmPiPChange', 'vmTextTracksChange', 'vmCurrentTextTrackChange', 'vmTextTrackVisibleChange', 'vmAudioTracksChange', 'vmCurrentAudioTrackChange']);
    }
};
Player.decorators = [
    { type: Component, args: [{
                selector: 'vm-player',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: PlayerInputs,
                outputs: PlayerOutputs
            },] }
];
Player.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Player = __decorate([
    ProxyCmp({
        inputs: PlayerInputs,
        methods: PlayerMethods,
    })
], Player);
export { Player };
//# sourceMappingURL=data:application/json;base64,