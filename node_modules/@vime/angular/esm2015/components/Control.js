import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmControl } from '@vime/core';
import { define } from '../lib';
const ControlInputs = [
    'keys',
    'identifier',
    'hidden',
    'label',
    'menu',
    'expanded',
    'pressed',
    'isTouch',
];
const ControlMethods = [
    'focusControl',
    'blurControl',
];
const ControlOutputs = [
    'vmInteractionChange',
    'vmFocus',
    'vmBlur',
];
let Control = class Control {
    constructor(c, r, z) {
        this.z = z;
        define('vm-control', VmControl);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmInteractionChange', 'vmFocus', 'vmBlur']);
    }
};
Control.decorators = [
    { type: Component, args: [{
                selector: 'vm-control',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ControlInputs,
                outputs: ControlOutputs
            },] }
];
Control.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Control = __decorate([
    ProxyCmp({
        inputs: ControlInputs,
        methods: ControlMethods,
    })
], Control);
export { Control };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3ZpbWUvc3JjL2NvbXBvbmVudHMvQ29udHJvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUcvQyxPQUFPLEVBQ0wsU0FBUyxFQUNWLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxhQUFhLEdBQWE7SUFDOUIsTUFBTTtJQUNOLFlBQVk7SUFDWixRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7Q0FDVixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQWE7SUFDL0IsY0FBYztJQUNkLGFBQWE7Q0FDZCxDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQWE7SUFDL0IscUJBQXFCO0lBQ3JCLFNBQVM7SUFDVCxRQUFRO0NBQ1QsQ0FBQztJQWlCVyxPQUFPLFNBQVAsT0FBTztJQVVsQixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0NBQ0YsQ0FBQTs7WUF2QkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLGFBQWE7Z0JBQ3JCLE9BQU8sRUFBRSxjQUFjO2FBQ3hCOzs7WUEvQ2lDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUFnRG5GLE9BQU87SUFYbkIsUUFBUSxDQUFDO1FBQ1IsTUFBTSxFQUFFLGFBQWE7UUFDckIsT0FBTyxFQUFFLGNBQWM7S0FDeEIsQ0FBQztHQVFXLE9BQU8sQ0FnQm5CO1NBaEJZLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtQ29udHJvbCBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBDb250cm9sSW5wdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ2tleXMnLFxuICAnaWRlbnRpZmllcicsXG4gICdoaWRkZW4nLFxuICAnbGFiZWwnLFxuICAnbWVudScsXG4gICdleHBhbmRlZCcsXG4gICdwcmVzc2VkJyxcbiAgJ2lzVG91Y2gnLFxuXTtcblxuY29uc3QgQ29udHJvbE1ldGhvZHM6IHN0cmluZ1tdID0gW1xuICAnZm9jdXNDb250cm9sJyxcbiAgJ2JsdXJDb250cm9sJyxcbl07XG5cbmNvbnN0IENvbnRyb2xPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgJ3ZtSW50ZXJhY3Rpb25DaGFuZ2UnLFxuICAndm1Gb2N1cycsXG4gICd2bUJsdXInLFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIENvbnRyb2wgZXh0ZW5kcyBDb21wb25lbnRzLlZtQ29udHJvbCB7fVxuXG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IENvbnRyb2xJbnB1dHMsXG4gIG1ldGhvZHM6IENvbnRyb2xNZXRob2RzLFxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ZtLWNvbnRyb2wnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBDb250cm9sSW5wdXRzLFxuICBvdXRwdXRzOiBDb250cm9sT3V0cHV0cyxcbn0pXG5leHBvcnQgY2xhc3MgQ29udHJvbCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgdXNlciBpcyBpbnRlcmFjdGluZyB3aXRoIHRoZSBjb250cm9sIGJ5IGZvY3VzaW5nLCB0b3VjaGluZyBvciBob3ZlcmluZyBvbiBpdC4gKi9cbiAgdm1JbnRlcmFjdGlvbkNoYW5nZSE6IEVtaXR0ZXI8SlNYLlZtQ29udHJvbFtcIm9uVm1JbnRlcmFjdGlvbkNoYW5nZVwiXT47XG4gIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGNvbnRyb2wgcmVjZWl2ZXMgZm9jdXMuICovXG4gIHZtRm9jdXMhOiBFbWl0dGVyPEpTWC5WbUNvbnRyb2xbXCJvblZtRm9jdXNcIl0+O1xuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBjb250cm9sIGxvc2VzIGZvY3VzLiAqL1xuICB2bUJsdXIhOiBFbWl0dGVyPEpTWC5WbUNvbnRyb2xbXCJvblZtQmx1clwiXT47XG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLWNvbnRyb2wnLCBWbUNvbnRyb2wpO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbJ3ZtSW50ZXJhY3Rpb25DaGFuZ2UnLCAndm1Gb2N1cycsICd2bUJsdXInXSlcbiAgfVxufVxuICAiXX0=