import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmControls } from '@vime/core';
import { define } from '../lib';
const ControlsInputs = [
    'hidden',
    'fullWidth',
    'fullHeight',
    'direction',
    'align',
    'justify',
    'pin',
    'activeDuration',
    'waitForPlaybackStart',
    'hideWhenPaused',
    'hideOnMouseLeave',
    'isAudioView',
    'isSettingsActive',
    'playbackReady',
    'isControlsActive',
    'paused',
    'playbackStarted',
];
const ControlsMethods = [];
const ControlsOutputs = [];
let Controls = class Controls {
    constructor(c, r, z) {
        this.z = z;
        define('vm-controls', VmControls);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
Controls.decorators = [
    { type: Component, args: [{
                selector: 'vm-controls',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ControlsInputs,
                outputs: ControlsOutputs
            },] }
];
Controls.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Controls = __decorate([
    ProxyCmp({
        inputs: ControlsInputs,
        methods: ControlsMethods,
    })
], Controls);
export { Controls };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJvbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy92aW1lL3NyYy9jb21wb25lbnRzL0NvbnRyb2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLE9BQU8sRUFDTCxVQUFVLEVBQ1gsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxNQUFNLGNBQWMsR0FBYTtJQUMvQixRQUFRO0lBQ1IsV0FBVztJQUNYLFlBQVk7SUFDWixXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxLQUFLO0lBQ0wsZ0JBQWdCO0lBQ2hCLHNCQUFzQjtJQUN0QixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixRQUFRO0lBQ1IsaUJBQWlCO0NBQ2xCLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBYSxFQUVqQyxDQUFDO0FBRUYsTUFBTSxlQUFlLEdBQWEsRUFFakMsQ0FBQztJQWlCVyxRQUFRLFNBQVIsUUFBUTtJQUtuQixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkIsQ0FBQztDQUNGLENBQUE7O1lBbEJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxjQUFjO2dCQUN0QixPQUFPLEVBQUUsZUFBZTthQUN6Qjs7O1lBckRpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBc0RuRixRQUFRO0lBWHBCLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxjQUFjO1FBQ3RCLE9BQU8sRUFBRSxlQUFlO0tBQ3pCLENBQUM7R0FRVyxRQUFRLENBV3BCO1NBWFksUUFBUSIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1Db250cm9scyBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBDb250cm9sc0lucHV0czogc3RyaW5nW10gPSBbXG4gICdoaWRkZW4nLFxuICAnZnVsbFdpZHRoJyxcbiAgJ2Z1bGxIZWlnaHQnLFxuICAnZGlyZWN0aW9uJyxcbiAgJ2FsaWduJyxcbiAgJ2p1c3RpZnknLFxuICAncGluJyxcbiAgJ2FjdGl2ZUR1cmF0aW9uJyxcbiAgJ3dhaXRGb3JQbGF5YmFja1N0YXJ0JyxcbiAgJ2hpZGVXaGVuUGF1c2VkJyxcbiAgJ2hpZGVPbk1vdXNlTGVhdmUnLFxuICAnaXNBdWRpb1ZpZXcnLFxuICAnaXNTZXR0aW5nc0FjdGl2ZScsXG4gICdwbGF5YmFja1JlYWR5JyxcbiAgJ2lzQ29udHJvbHNBY3RpdmUnLFxuICAncGF1c2VkJyxcbiAgJ3BsYXliYWNrU3RhcnRlZCcsXG5dO1xuXG5jb25zdCBDb250cm9sc01ldGhvZHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmNvbnN0IENvbnRyb2xzT3V0cHV0czogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIENvbnRyb2xzIGV4dGVuZHMgQ29tcG9uZW50cy5WbUNvbnRyb2xzIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogQ29udHJvbHNJbnB1dHMsXG4gIG1ldGhvZHM6IENvbnRyb2xzTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS1jb250cm9scycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IENvbnRyb2xzSW5wdXRzLFxuICBvdXRwdXRzOiBDb250cm9sc091dHB1dHMsXG59KVxuZXhwb3J0IGNsYXNzIENvbnRyb2xzIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcblxuICBcblxuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGRlZmluZSgndm0tY29udHJvbHMnLCBWbUNvbnRyb2xzKTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgW10pXG4gIH1cbn1cbiAgIl19