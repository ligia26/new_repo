import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmPoster } from '@vime/core';
import { define } from '../lib';
const PosterInputs = [
    'fit',
    'isVideoView',
    'currentPoster',
    'mediaTitle',
    'playbackStarted',
    'currentTime',
];
const PosterMethods = [];
const PosterOutputs = [
    'vmLoaded',
    'vmWillShow',
    'vmWillHide',
];
let Poster = class Poster {
    constructor(c, r, z) {
        this.z = z;
        define('vm-poster', VmPoster);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, ['vmLoaded', 'vmWillShow', 'vmWillHide']);
    }
};
Poster.decorators = [
    { type: Component, args: [{
                selector: 'vm-poster',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: PosterInputs,
                outputs: PosterOutputs
            },] }
];
Poster.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
Poster = __decorate([
    ProxyCmp({
        inputs: PosterInputs,
        methods: PosterMethods,
    })
], Poster);
export { Poster };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9zdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9Qb3N0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLFFBQVEsRUFDVCxNQUFNLFlBQVksQ0FBQztBQUVwQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2hDLE1BQU0sWUFBWSxHQUFhO0lBQzdCLEtBQUs7SUFDTCxhQUFhO0lBQ2IsZUFBZTtJQUNmLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsYUFBYTtDQUNkLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBYSxFQUUvQixDQUFDO0FBRUYsTUFBTSxhQUFhLEdBQWE7SUFDOUIsVUFBVTtJQUNWLFlBQVk7SUFDWixZQUFZO0NBQ2IsQ0FBQztJQWlCVyxNQUFNLFNBQU4sTUFBTTtJQVVqQixZQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUE7SUFDN0QsQ0FBQztDQUNGLENBQUE7O1lBdkJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsV0FBVztnQkFDckIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixPQUFPLEVBQUUsYUFBYTthQUN2Qjs7O1lBNUNpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBNkNuRixNQUFNO0lBWGxCLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxZQUFZO1FBQ3BCLE9BQU8sRUFBRSxhQUFhO0tBQ3ZCLENBQUM7R0FRVyxNQUFNLENBZ0JsQjtTQWhCWSxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3h5Q21wLCBpbml0T3V0cHV0cyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgdHlwZSB7IEpTWCwgQ29tcG9uZW50cyB9IGZyb20gJ0B2aW1lL2NvcmUvZGlzdC90eXBlcyc7XG5cbmltcG9ydCB7IFxuICBWbVBvc3RlciBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBQb3N0ZXJJbnB1dHM6IHN0cmluZ1tdID0gW1xuICAnZml0JyxcbiAgJ2lzVmlkZW9WaWV3JyxcbiAgJ2N1cnJlbnRQb3N0ZXInLFxuICAnbWVkaWFUaXRsZScsXG4gICdwbGF5YmFja1N0YXJ0ZWQnLFxuICAnY3VycmVudFRpbWUnLFxuXTtcblxuY29uc3QgUG9zdGVyTWV0aG9kczogc3RyaW5nW10gPSBbXG4gIFxuXTtcblxuY29uc3QgUG9zdGVyT3V0cHV0czogc3RyaW5nW10gPSBbXG4gICd2bUxvYWRlZCcsXG4gICd2bVdpbGxTaG93JyxcbiAgJ3ZtV2lsbEhpZGUnLFxuXTtcblxuZXhwb3J0IHR5cGUgRW1pdHRlcjxUIGV4dGVuZHMgKCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB8IHVuZGVmaW5lZD4gPSBFdmVudEVtaXR0ZXI8UGFyYW1ldGVyczxFeGNsdWRlPFQsIHVuZGVmaW5lZD4+WzBdPjtcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFBvc3RlciBleHRlbmRzIENvbXBvbmVudHMuVm1Qb3N0ZXIge31cblxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBQb3N0ZXJJbnB1dHMsXG4gIG1ldGhvZHM6IFBvc3Rlck1ldGhvZHMsXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndm0tcG9zdGVyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogUG9zdGVySW5wdXRzLFxuICBvdXRwdXRzOiBQb3N0ZXJPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBQb3N0ZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHBvc3RlciBoYXMgbG9hZGVkLiAqL1xuICB2bUxvYWRlZCE6IEVtaXR0ZXI8SlNYLlZtUG9zdGVyW1wib25WbUxvYWRlZFwiXT47XG4gIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHBvc3RlciB3aWxsIGJlIHNob3duLiAqL1xuICB2bVdpbGxTaG93ITogRW1pdHRlcjxKU1guVm1Qb3N0ZXJbXCJvblZtV2lsbFNob3dcIl0+O1xuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBwb3N0ZXIgd2lsbCBiZSBoaWRkZW4uICovXG4gIHZtV2lsbEhpZGUhOiBFbWl0dGVyPEpTWC5WbVBvc3RlcltcIm9uVm1XaWxsSGlkZVwiXT47XG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLXBvc3RlcicsIFZtUG9zdGVyKTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgWyd2bUxvYWRlZCcsICd2bVdpbGxTaG93JywgJ3ZtV2lsbEhpZGUnXSlcbiAgfVxufVxuICAiXX0=