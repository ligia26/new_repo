import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmTimeProgress, VmCurrentTime, VmTime, VmEndTime } from '@vime/core';
import { define } from '../lib';
const TimeProgressInputs = [
    'separator',
    'alwaysShowHours',
];
const TimeProgressMethods = [];
const TimeProgressOutputs = [];
let TimeProgress = class TimeProgress {
    constructor(c, r, z) {
        this.z = z;
        define('vm-time-progress', VmTimeProgress);
        define('vm-current-time', VmCurrentTime);
        define('vm-time', VmTime);
        define('vm-end-time', VmEndTime);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
TimeProgress.decorators = [
    { type: Component, args: [{
                selector: 'vm-time-progress',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: TimeProgressInputs,
                outputs: TimeProgressOutputs
            },] }
];
TimeProgress.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
TimeProgress = __decorate([
    ProxyCmp({
        inputs: TimeProgressInputs,
        methods: TimeProgressMethods,
    })
], TimeProgress);
export { TimeProgress };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGltZVByb2dyZXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9UaW1lUHJvZ3Jlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLGNBQWMsRUFDZCxhQUFhLEVBQ2IsTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLFlBQVksQ0FBQztBQUVwQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2hDLE1BQU0sa0JBQWtCLEdBQWE7SUFDbkMsV0FBVztJQUNYLGlCQUFpQjtDQUNsQixDQUFDO0FBRUYsTUFBTSxtQkFBbUIsR0FBYSxFQUVyQyxDQUFDO0FBRUYsTUFBTSxtQkFBbUIsR0FBYSxFQUVyQyxDQUFDO0lBaUJXLFlBQVksU0FBWixZQUFZO0lBS3ZCLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6QyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkIsQ0FBQztDQUNGLENBQUE7O1lBckJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLGtCQUFrQjtnQkFDMUIsT0FBTyxFQUFFLG1CQUFtQjthQUM3Qjs7O1lBekNpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBMENuRixZQUFZO0lBWHhCLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxrQkFBa0I7UUFDMUIsT0FBTyxFQUFFLG1CQUFtQjtLQUM3QixDQUFDO0dBUVcsWUFBWSxDQWN4QjtTQWRZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJveHlDbXAsIGluaXRPdXRwdXRzIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB0eXBlIHsgSlNYLCBDb21wb25lbnRzIH0gZnJvbSAnQHZpbWUvY29yZS9kaXN0L3R5cGVzJztcblxuaW1wb3J0IHsgXG4gIFZtVGltZVByb2dyZXNzLFxuICBWbUN1cnJlbnRUaW1lLFxuICBWbVRpbWUsXG4gIFZtRW5kVGltZSBcbn0gZnJvbSAnQHZpbWUvY29yZSc7XG5cbmltcG9ydCB7IGRlZmluZSB9IGZyb20gJy4uL2xpYic7XG4gIFxuXG5jb25zdCBUaW1lUHJvZ3Jlc3NJbnB1dHM6IHN0cmluZ1tdID0gW1xuICAnc2VwYXJhdG9yJyxcbiAgJ2Fsd2F5c1Nob3dIb3VycycsXG5dO1xuXG5jb25zdCBUaW1lUHJvZ3Jlc3NNZXRob2RzOiBzdHJpbmdbXSA9IFtcbiAgXG5dO1xuXG5jb25zdCBUaW1lUHJvZ3Jlc3NPdXRwdXRzOiBzdHJpbmdbXSA9IFtcbiAgXG5dO1xuXG5leHBvcnQgdHlwZSBFbWl0dGVyPFQgZXh0ZW5kcyAoKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpIHwgdW5kZWZpbmVkPiA9IEV2ZW50RW1pdHRlcjxQYXJhbWV0ZXJzPEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPj5bMF0+O1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgVGltZVByb2dyZXNzIGV4dGVuZHMgQ29tcG9uZW50cy5WbVRpbWVQcm9ncmVzcyB7fVxuXG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFRpbWVQcm9ncmVzc0lucHV0cyxcbiAgbWV0aG9kczogVGltZVByb2dyZXNzTWV0aG9kcyxcbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd2bS10aW1lLXByb2dyZXNzJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogVGltZVByb2dyZXNzSW5wdXRzLFxuICBvdXRwdXRzOiBUaW1lUHJvZ3Jlc3NPdXRwdXRzLFxufSlcbmV4cG9ydCBjbGFzcyBUaW1lUHJvZ3Jlc3Mge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIFxuXG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgZGVmaW5lKCd2bS10aW1lLXByb2dyZXNzJywgVm1UaW1lUHJvZ3Jlc3MpO1xuICAgIGRlZmluZSgndm0tY3VycmVudC10aW1lJywgVm1DdXJyZW50VGltZSk7XG4gICAgZGVmaW5lKCd2bS10aW1lJywgVm1UaW1lKTtcbiAgICBkZWZpbmUoJ3ZtLWVuZC10aW1lJywgVm1FbmRUaW1lKTtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaW5pdE91dHB1dHModGhpcywgW10pXG4gIH1cbn1cbiAgIl19