import { __decorate } from "tslib";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, initOutputs } from '../lib';
import { VmDefaultSettings, VmIcon, VmMenu, VmMenuItem, VmMenuRadio, VmMenuRadioGroup, VmSettings, VmSubmenu } from '@vime/core';
import { define } from '../lib';
const DefaultSettingsInputs = [
    'pin',
    'i18n',
    'playbackReady',
    'playbackRate',
    'playbackRates',
    'isVideoView',
    'playbackQuality',
    'playbackQualities',
    'textTracks',
    'currentTextTrack',
    'audioTracks',
    'currentAudioTrack',
    'isTextTrackVisible',
];
const DefaultSettingsMethods = [];
const DefaultSettingsOutputs = [];
let DefaultSettings = class DefaultSettings {
    constructor(c, r, z) {
        this.z = z;
        define('vm-default-settings', VmDefaultSettings);
        define('vm-icon', VmIcon);
        define('vm-menu', VmMenu);
        define('vm-menu-item', VmMenuItem);
        define('vm-menu-radio', VmMenuRadio);
        define('vm-menu-radio-group', VmMenuRadioGroup);
        define('vm-settings', VmSettings);
        define('vm-submenu', VmSubmenu);
        c.detach();
        this.el = r.nativeElement;
        initOutputs(this, []);
    }
};
DefaultSettings.decorators = [
    { type: Component, args: [{
                selector: 'vm-default-settings',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: DefaultSettingsInputs,
                outputs: DefaultSettingsOutputs
            },] }
];
DefaultSettings.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DefaultSettings = __decorate([
    ProxyCmp({
        inputs: DefaultSettingsInputs,
        methods: DefaultSettingsMethods,
    })
], DefaultSettings);
export { DefaultSettings };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmYXVsdFNldHRpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvdmltZS9zcmMvY29tcG9uZW50cy9EZWZhdWx0U2V0dGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFnQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHL0MsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixNQUFNLEVBQ04sTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsZ0JBQWdCLEVBQ2hCLFVBQVUsRUFDVixTQUFTLEVBQ1YsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxNQUFNLHFCQUFxQixHQUFhO0lBQ3RDLEtBQUs7SUFDTCxNQUFNO0lBQ04sZUFBZTtJQUNmLGNBQWM7SUFDZCxlQUFlO0lBQ2YsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLG9CQUFvQjtDQUNyQixDQUFDO0FBRUYsTUFBTSxzQkFBc0IsR0FBYSxFQUV4QyxDQUFDO0FBRUYsTUFBTSxzQkFBc0IsR0FBYSxFQUV4QyxDQUFDO0lBaUJXLGVBQWUsU0FBZixlQUFlO0lBSzFCLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsTUFBTSxDQUFDLHFCQUFxQixFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMscUJBQXFCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkIsQ0FBQztDQUNGLENBQUE7O1lBekJBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLHFCQUFxQjtnQkFDN0IsT0FBTyxFQUFFLHNCQUFzQjthQUNoQzs7O1lBeERpQyxpQkFBaUI7WUFBYSxVQUFVO1lBQWdCLE1BQU07O0FBeURuRixlQUFlO0lBWDNCLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxxQkFBcUI7UUFDN0IsT0FBTyxFQUFFLHNCQUFzQjtLQUNoQyxDQUFDO0dBUVcsZUFBZSxDQWtCM0I7U0FsQlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgaW5pdE91dHB1dHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHR5cGUgeyBKU1gsIENvbXBvbmVudHMgfSBmcm9tICdAdmltZS9jb3JlL2Rpc3QvdHlwZXMnO1xuXG5pbXBvcnQgeyBcbiAgVm1EZWZhdWx0U2V0dGluZ3MsXG4gIFZtSWNvbixcbiAgVm1NZW51LFxuICBWbU1lbnVJdGVtLFxuICBWbU1lbnVSYWRpbyxcbiAgVm1NZW51UmFkaW9Hcm91cCxcbiAgVm1TZXR0aW5ncyxcbiAgVm1TdWJtZW51IFxufSBmcm9tICdAdmltZS9jb3JlJztcblxuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vbGliJztcbiAgXG5cbmNvbnN0IERlZmF1bHRTZXR0aW5nc0lucHV0czogc3RyaW5nW10gPSBbXG4gICdwaW4nLFxuICAnaTE4bicsXG4gICdwbGF5YmFja1JlYWR5JyxcbiAgJ3BsYXliYWNrUmF0ZScsXG4gICdwbGF5YmFja1JhdGVzJyxcbiAgJ2lzVmlkZW9WaWV3JyxcbiAgJ3BsYXliYWNrUXVhbGl0eScsXG4gICdwbGF5YmFja1F1YWxpdGllcycsXG4gICd0ZXh0VHJhY2tzJyxcbiAgJ2N1cnJlbnRUZXh0VHJhY2snLFxuICAnYXVkaW9UcmFja3MnLFxuICAnY3VycmVudEF1ZGlvVHJhY2snLFxuICAnaXNUZXh0VHJhY2tWaXNpYmxlJyxcbl07XG5cbmNvbnN0IERlZmF1bHRTZXR0aW5nc01ldGhvZHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmNvbnN0IERlZmF1bHRTZXR0aW5nc091dHB1dHM6IHN0cmluZ1tdID0gW1xuICBcbl07XG5cbmV4cG9ydCB0eXBlIEVtaXR0ZXI8VCBleHRlbmRzICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCB1bmRlZmluZWQ+ID0gRXZlbnRFbWl0dGVyPFBhcmFtZXRlcnM8RXhjbHVkZTxULCB1bmRlZmluZWQ+PlswXT47XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEZWZhdWx0U2V0dGluZ3MgZXh0ZW5kcyBDb21wb25lbnRzLlZtRGVmYXVsdFNldHRpbmdzIHt9XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogRGVmYXVsdFNldHRpbmdzSW5wdXRzLFxuICBtZXRob2RzOiBEZWZhdWx0U2V0dGluZ3NNZXRob2RzLFxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ZtLWRlZmF1bHQtc2V0dGluZ3MnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBEZWZhdWx0U2V0dGluZ3NJbnB1dHMsXG4gIG91dHB1dHM6IERlZmF1bHRTZXR0aW5nc091dHB1dHMsXG59KVxuZXhwb3J0IGNsYXNzIERlZmF1bHRTZXR0aW5ncyB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgXG5cbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBkZWZpbmUoJ3ZtLWRlZmF1bHQtc2V0dGluZ3MnLCBWbURlZmF1bHRTZXR0aW5ncyk7XG4gICAgZGVmaW5lKCd2bS1pY29uJywgVm1JY29uKTtcbiAgICBkZWZpbmUoJ3ZtLW1lbnUnLCBWbU1lbnUpO1xuICAgIGRlZmluZSgndm0tbWVudS1pdGVtJywgVm1NZW51SXRlbSk7XG4gICAgZGVmaW5lKCd2bS1tZW51LXJhZGlvJywgVm1NZW51UmFkaW8pO1xuICAgIGRlZmluZSgndm0tbWVudS1yYWRpby1ncm91cCcsIFZtTWVudVJhZGlvR3JvdXApO1xuICAgIGRlZmluZSgndm0tc2V0dGluZ3MnLCBWbVNldHRpbmdzKTtcbiAgICBkZWZpbmUoJ3ZtLXN1Ym1lbnUnLCBWbVN1Ym1lbnUpO1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBpbml0T3V0cHV0cyh0aGlzLCBbXSlcbiAgfVxufVxuICAiXX0=