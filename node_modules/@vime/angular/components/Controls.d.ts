import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface Controls extends Components.VmControls {
}
export declare class Controls {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<Controls, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<Controls, "vm-controls", never, { "hidden": "hidden"; "fullWidth": "fullWidth"; "fullHeight": "fullHeight"; "direction": "direction"; "align": "align"; "justify": "justify"; "pin": "pin"; "activeDuration": "activeDuration"; "waitForPlaybackStart": "waitForPlaybackStart"; "hideWhenPaused": "hideWhenPaused"; "hideOnMouseLeave": "hideOnMouseLeave"; "isAudioView": "isAudioView"; "isSettingsActive": "isSettingsActive"; "playbackReady": "playbackReady"; "isControlsActive": "isControlsActive"; "paused": "paused"; "playbackStarted": "playbackStarted"; }, {}, never, ["*"], false, never>;
}

//# sourceMappingURL=Controls.d.ts.map