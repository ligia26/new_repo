import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface Icon extends Components.VmIcon {
}
export declare class Icon {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when the icon has loaded. */
    vmLoad: Emitter<JSX.VmIcon["onVmLoad"]>;
    /** Emitted when the icon failed to load. */
    vmError: Emitter<JSX.VmIcon["onVmError"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<Icon, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<Icon, "vm-icon", never, { "name": "name"; "src": "src"; "label": "label"; "library": "library"; "icons": "icons"; }, { "vmLoad": "vmLoad"; "vmError": "vmError"; }, never, ["*"], false, never>;
}

//# sourceMappingURL=Icon.d.ts.map