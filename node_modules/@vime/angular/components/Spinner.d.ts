import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface Spinner extends Components.VmSpinner {
}
export declare class Spinner {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when the spinner will be shown. */
    vmWillShow: Emitter<JSX.VmSpinner["onVmWillShow"]>;
    /** Emitted when the spinner will be hidden. */
    vmWillHide: Emitter<JSX.VmSpinner["onVmWillHide"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<Spinner, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<Spinner, "vm-spinner", never, { "isVideoView": "isVideoView"; "currentProvider": "currentProvider"; "showWhenMediaLoading": "showWhenMediaLoading"; "playbackReady": "playbackReady"; "buffering": "buffering"; }, { "vmWillShow": "vmWillShow"; "vmWillHide": "vmWillHide"; }, never, ["*"], false, never>;
}

//# sourceMappingURL=Spinner.d.ts.map