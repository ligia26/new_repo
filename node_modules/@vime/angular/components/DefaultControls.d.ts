import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface DefaultControls extends Components.VmDefaultControls {
}
export declare class DefaultControls {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DefaultControls, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DefaultControls, "vm-default-controls", never, { "activeDuration": "activeDuration"; "waitForPlaybackStart": "waitForPlaybackStart"; "hideWhenPaused": "hideWhenPaused"; "hideOnMouseLeave": "hideOnMouseLeave"; "theme": "theme"; "isMobile": "isMobile"; "isLive": "isLive"; "isAudioView": "isAudioView"; "isVideoView": "isVideoView"; }, {}, never, ["*"], false, never>;
}

//# sourceMappingURL=DefaultControls.d.ts.map