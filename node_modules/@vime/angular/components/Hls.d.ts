import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface Hls extends Components.VmHls {
}
export declare class Hls {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when an error has occurred. */
    vmError: Emitter<JSX.VmHls["onVmError"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<Hls, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<Hls, "vm-hls", never, { "version": "version"; "libSrc": "libSrc"; "config": "config"; "crossOrigin": "crossOrigin"; "preload": "preload"; "poster": "poster"; "controlsList": "controlsList"; "autoPiP": "autoPiP"; "disablePiP": "disablePiP"; "disableRemotePlayback": "disableRemotePlayback"; "playbackReady": "playbackReady"; "mediaTitle": "mediaTitle"; }, { "vmError": "vmError"; }, never, ["*"], false, never>;
}

//# sourceMappingURL=Hls.d.ts.map