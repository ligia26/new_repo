import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface DefaultSettings extends Components.VmDefaultSettings {
}
export declare class DefaultSettings {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DefaultSettings, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DefaultSettings, "vm-default-settings", never, { "pin": "pin"; "i18n": "i18n"; "playbackReady": "playbackReady"; "playbackRate": "playbackRate"; "playbackRates": "playbackRates"; "isVideoView": "isVideoView"; "playbackQuality": "playbackQuality"; "playbackQualities": "playbackQualities"; "textTracks": "textTracks"; "currentTextTrack": "currentTextTrack"; "audioTracks": "audioTracks"; "currentAudioTrack": "currentAudioTrack"; "isTextTrackVisible": "isTextTrackVisible"; }, {}, never, ["*"], false, never>;
}

//# sourceMappingURL=DefaultSettings.d.ts.map