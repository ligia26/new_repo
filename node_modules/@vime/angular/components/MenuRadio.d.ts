import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface MenuRadio extends Components.VmMenuRadio {
}
export declare class MenuRadio {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when the radio button is selected. */
    vmCheck: Emitter<JSX.VmMenuRadio["onVmCheck"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MenuRadio, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<MenuRadio, "vm-menu-radio", never, { "label": "label"; "value": "value"; "checked": "checked"; "badge": "badge"; "checkIcon": "checkIcon"; "icons": "icons"; }, { "vmCheck": "vmCheck"; }, never, ["*"], false, never>;
}

//# sourceMappingURL=MenuRadio.d.ts.map