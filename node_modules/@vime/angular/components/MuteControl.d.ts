import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface MuteControl extends Components.VmMuteControl {
}
export declare class MuteControl {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when the control receives focus. */
    vmFocus: Emitter<JSX.VmMuteControl["onVmFocus"]>;
    /** Emitted when the control loses focus. */
    vmBlur: Emitter<JSX.VmMuteControl["onVmBlur"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MuteControl, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<MuteControl, "vm-mute-control", never, { "lowVolumeIcon": "lowVolumeIcon"; "highVolumeIcon": "highVolumeIcon"; "mutedIcon": "mutedIcon"; "icons": "icons"; "tooltipPosition": "tooltipPosition"; "tooltipDirection": "tooltipDirection"; "hideTooltip": "hideTooltip"; "keys": "keys"; "volume": "volume"; "muted": "muted"; "i18n": "i18n"; }, { "vmFocus": "vmFocus"; "vmBlur": "vmBlur"; }, never, ["*"], false, never>;
}

//# sourceMappingURL=MuteControl.d.ts.map