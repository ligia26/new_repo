import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface Embed extends Components.VmEmbed {
}
export declare class Embed {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when the `embedSrc` or `params` props change. The payload contains the `params`
  serialized into a query string and appended to `embedSrc`. */
    vmEmbedSrcChange: Emitter<JSX.VmEmbed["onVmEmbedSrcChange"]>;
    /** Emitted when a new message is received from the embedded player via `postMessage`. */
    vmEmbedMessage: Emitter<JSX.VmEmbed["onVmEmbedMessage"]>;
    /** Emitted when the embedded player and any new media has loaded. */
    vmEmbedLoaded: Emitter<JSX.VmEmbed["onVmEmbedLoaded"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
