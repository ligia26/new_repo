import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface Poster extends Components.VmPoster {
}
export declare class Poster {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when the poster has loaded. */
    vmLoaded: Emitter<JSX.VmPoster["onVmLoaded"]>;
    /** Emitted when the poster will be shown. */
    vmWillShow: Emitter<JSX.VmPoster["onVmWillShow"]>;
    /** Emitted when the poster will be hidden. */
    vmWillHide: Emitter<JSX.VmPoster["onVmWillHide"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<Poster, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<Poster, "vm-poster", never, { "fit": "fit"; "isVideoView": "isVideoView"; "currentPoster": "currentPoster"; "mediaTitle": "mediaTitle"; "playbackStarted": "playbackStarted"; "currentTime": "currentTime"; }, { "vmLoaded": "vmLoaded"; "vmWillShow": "vmWillShow"; "vmWillHide": "vmWillHide"; }, never, ["*"], false, never>;
}

//# sourceMappingURL=Poster.d.ts.map