import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface Vimeo extends Components.VmVimeo {
}
export declare class Vimeo {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when an error has occurred. */
    vmError: Emitter<JSX.VmVimeo["onVmError"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<Vimeo, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<Vimeo, "vm-vimeo", never, { "videoId": "videoId"; "byline": "byline"; "color": "color"; "portrait": "portrait"; "noAutoAspectRatio": "noAutoAspectRatio"; "poster": "poster"; "cookies": "cookies"; "language": "language"; "aspectRatio": "aspectRatio"; "autoplay": "autoplay"; "controls": "controls"; "logger": "logger"; "loop": "loop"; "muted": "muted"; "playsinline": "playsinline"; }, { "vmError": "vmError"; }, never, ["*"], false, never>;
}

//# sourceMappingURL=Vimeo.d.ts.map