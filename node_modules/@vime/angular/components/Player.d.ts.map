{"version":3,"file":"Player.d.ts","sources":["Player.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';\nimport type { JSX, Components } from '@vime/core/dist/types';\nexport declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;\nexport declare interface Player extends Components.VmPlayer {\n}\nexport declare class Player {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    /** Emitted when the `theme` prop changes value. */\n    vmThemeChange: Emitter<JSX.VmPlayer[\"onVmThemeChange\"]>;\n    /** Emitted when the `paused` prop changes value. */\n    vmPausedChange: Emitter<JSX.VmPlayer[\"onVmPausedChange\"]>;\n    /** Emitted when the media is transitioning from `paused` to `playing`. Event flow: `paused` ->\n  `play` -> `playing`. The media starts `playing` once enough content has buffered to\n  begin/resume playback. */\n    vmPlay: Emitter<JSX.VmPlayer[\"onVmPlay\"]>;\n    /** Emitted when the `playing` prop changes value. */\n    vmPlayingChange: Emitter<JSX.VmPlayer[\"onVmPlayingChange\"]>;\n    /** Emitted when the `seeking` prop changes value. */\n    vmSeekingChange: Emitter<JSX.VmPlayer[\"onVmSeekingChange\"]>;\n    /** Emitted directly after the player has successfully transitioned/seeked to a new time position.\n  Event flow: `seeking` -> `seeked`. */\n    vmSeeked: Emitter<JSX.VmPlayer[\"onVmSeeked\"]>;\n    /** Emitted when the `buffering` prop changes value. */\n    vmBufferingChange: Emitter<JSX.VmPlayer[\"onVmBufferingChange\"]>;\n    /** Emitted when the `duration` prop changes value. */\n    vmDurationChange: Emitter<JSX.VmPlayer[\"onVmDurationChange\"]>;\n    /** Emitted when the `currentTime` prop changes value. */\n    vmCurrentTimeChange: Emitter<JSX.VmPlayer[\"onVmCurrentTimeChange\"]>;\n    /** Emitted when the player has loaded and is ready to be interacted with. */\n    vmReady: Emitter<JSX.VmPlayer[\"onVmReady\"]>;\n    /** Emitted when the media is ready to begin playback. The following props are guaranteed to be\n  defined when this fires: `mediaTitle`, `currentSrc`, `currentPoster`, `duration`, `mediaType`,\n  `viewType`. */\n    vmPlaybackReady: Emitter<JSX.VmPlayer[\"onVmPlaybackReady\"]>;\n    /** Emitted when the media initiates playback. */\n    vmPlaybackStarted: Emitter<JSX.VmPlayer[\"onVmPlaybackStarted\"]>;\n    /** Emitted when playback reaches the end of the media. */\n    vmPlaybackEnded: Emitter<JSX.VmPlayer[\"onVmPlaybackEnded\"]>;\n    /** Emitted when the `buffered` prop changes value. */\n    vmBufferedChange: Emitter<JSX.VmPlayer[\"onVmBufferedChange\"]>;\n    /** Emitted when an any error has occurred within the player. */\n    vmError: Emitter<JSX.VmPlayer[\"onVmError\"]>;\n    /** Emitted when the provider starts loading a media resource. */\n    vmLoadStart: Emitter<JSX.VmPlayer[\"onVmLoadStart\"]>;\n    /** Emitted when the `currentProvider` prop changes value. */\n    vmCurrentProviderChange: Emitter<JSX.VmPlayer[\"onVmCurrentProviderChange\"]>;\n    /** Emitted when the `currentSrc` prop changes value. */\n    vmCurrentSrcChange: Emitter<JSX.VmPlayer[\"onVmCurrentSrcChange\"]>;\n    /** Emitted when the `currentPoster` prop changes value. */\n    vmCurrentPosterChange: Emitter<JSX.VmPlayer[\"onVmCurrentPosterChange\"]>;\n    /** Emitted when the `mediaTitle` prop changes value. */\n    vmMediaTitleChange: Emitter<JSX.VmPlayer[\"onVmMediaTitleChange\"]>;\n    /** Emitted when the `isControlsActive` prop changes value. */\n    vmControlsChange: Emitter<JSX.VmPlayer[\"onVmControlsChange\"]>;\n    /** Emitted when the `playbackRate` prop changes value. */\n    vmPlaybackRateChange: Emitter<JSX.VmPlayer[\"onVmPlaybackRateChange\"]>;\n    /** Emitted when the `playbackRates` prop changes value. */\n    vmPlaybackRatesChange: Emitter<JSX.VmPlayer[\"onVmPlaybackRatesChange\"]>;\n    /** Emitted when the `playbackQuality` prop changes value. */\n    vmPlaybackQualityChange: Emitter<JSX.VmPlayer[\"onVmPlaybackQualityChange\"]>;\n    /** Emitted when the `playbackQualities` prop changes value. */\n    vmPlaybackQualitiesChange: Emitter<JSX.VmPlayer[\"onVmPlaybackQualitiesChange\"]>;\n    /** Emitted when the `muted` prop changes value. */\n    vmMutedChange: Emitter<JSX.VmPlayer[\"onVmMutedChange\"]>;\n    /** Emitted when the `volume` prop changes value. */\n    vmVolumeChange: Emitter<JSX.VmPlayer[\"onVmVolumeChange\"]>;\n    /** Emitted when the `viewType` prop changes value. */\n    vmViewTypeChange: Emitter<JSX.VmPlayer[\"onVmViewTypeChange\"]>;\n    /** Emitted when the `mediaType` prop changes value. */\n    vmMediaTypeChange: Emitter<JSX.VmPlayer[\"onVmMediaTypeChange\"]>;\n    /** Emitted when the `isLive` prop changes value. */\n    vmLiveChange: Emitter<JSX.VmPlayer[\"onVmLiveChange\"]>;\n    /** Emitted when the `isTouch` prop changes value. */\n    vmTouchChange: Emitter<JSX.VmPlayer[\"onVmTouchChange\"]>;\n    /** Emitted when the `language` prop changes value. */\n    vmLanguageChange: Emitter<JSX.VmPlayer[\"onVmLanguageChange\"]>;\n    /** Emitted when the `i18n` prop changes value. */\n    vmI18nChange: Emitter<JSX.VmPlayer[\"onVmI18nChange\"]>;\n    /** Emitted when the `translations` prop changes value. */\n    vmTranslationsChange: Emitter<JSX.VmPlayer[\"onVmTranslationsChange\"]>;\n    /** Emitted when the `languages` prop changes value. */\n    vmLanguagesChange: Emitter<JSX.VmPlayer[\"onVmLanguagesChange\"]>;\n    /** Emitted when the `isFullscreenActive` prop changes value. */\n    vmFullscreenChange: Emitter<JSX.VmPlayer[\"onVmFullscreenChange\"]>;\n    /** Emitted when the `isPiPActive` prop changes value. */\n    vmPiPChange: Emitter<JSX.VmPlayer[\"onVmPiPChange\"]>;\n    /** Emitted when the `textTracks` prop changes value. */\n    vmTextTracksChange: Emitter<JSX.VmPlayer[\"onVmTextTracksChange\"]>;\n    /** Emitted when the `currentTextTrack` prop changes value. */\n    vmCurrentTextTrackChange: Emitter<JSX.VmPlayer[\"onVmCurrentTextTrackChange\"]>;\n    /** Emitted when the `isTextTrackVisible` prop changes value. */\n    vmTextTrackVisibleChange: Emitter<JSX.VmPlayer[\"onVmTextTrackVisibleChange\"]>;\n    /** Emitted when the `audioTracks` prop changes value. */\n    vmAudioTracksChange: Emitter<JSX.VmPlayer[\"onVmAudioTracksChange\"]>;\n    /** Emitted when the `currentAudioTrack` prop changes value. */\n    vmCurrentAudioTrackChange: Emitter<JSX.VmPlayer[\"onVmCurrentAudioTrackChange\"]>;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\n"]}