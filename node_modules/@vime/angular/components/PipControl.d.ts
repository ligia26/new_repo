import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface PipControl extends Components.VmPipControl {
}
export declare class PipControl {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<PipControl, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<PipControl, "vm-pip-control", never, { "enterIcon": "enterIcon"; "exitIcon": "exitIcon"; "icons": "icons"; "tooltipPosition": "tooltipPosition"; "tooltipDirection": "tooltipDirection"; "hideTooltip": "hideTooltip"; "keys": "keys"; "isPiPActive": "isPiPActive"; "i18n": "i18n"; "playbackReady": "playbackReady"; }, {}, never, ["*"], false, never>;
}

//# sourceMappingURL=PipControl.d.ts.map