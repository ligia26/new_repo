import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface File extends Components.VmFile {
}
export declare class File {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when an error has occurred. */
    vmError: Emitter<JSX.VmFile["onVmError"]>;
    /** Emitted when the underlying media element changes. */
    vmMediaElChange: Emitter<JSX.VmFile["onVmMediaElChange"]>;
    /** Emitted when the child `<source />` elements are modified. */
    vmSrcSetChange: Emitter<JSX.VmFile["onVmSrcSetChange"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<File, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<File, "vm-file", never, { "willAttach": "willAttach"; "crossOrigin": "crossOrigin"; "preload": "preload"; "poster": "poster"; "mediaTitle": "mediaTitle"; "controlsList": "controlsList"; "autoPiP": "autoPiP"; "disablePiP": "disablePiP"; "disableRemotePlayback": "disableRemotePlayback"; "viewType": "viewType"; "playbackRates": "playbackRates"; "language": "language"; "autoplay": "autoplay"; "controls": "controls"; "logger": "logger"; "loop": "loop"; "muted": "muted"; "playsinline": "playsinline"; "noConnect": "noConnect"; "paused": "paused"; "currentTime": "currentTime"; "volume": "volume"; "playbackReady": "playbackReady"; "playbackStarted": "playbackStarted"; "currentTextTrack": "currentTextTrack"; "hasCustomTextManager": "hasCustomTextManager"; "isTextTrackVisible": "isTextTrackVisible"; "shouldRenderNativeTextTracks": "shouldRenderNativeTextTracks"; }, { "vmError": "vmError"; "vmMediaElChange": "vmMediaElChange"; "vmSrcSetChange": "vmSrcSetChange"; }, never, ["*"], false, never>;
}

//# sourceMappingURL=File.d.ts.map