import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface ScrubberControl extends Components.VmScrubberControl {
}
export declare class ScrubberControl {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ScrubberControl, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<ScrubberControl, "vm-scrubber-control", never, { "alwaysShowHours": "alwaysShowHours"; "hideTooltip": "hideTooltip"; "currentTime": "currentTime"; "duration": "duration"; "noKeyboard": "noKeyboard"; "buffering": "buffering"; "buffered": "buffered"; "i18n": "i18n"; }, {}, never, ["*"], false, never>;
}

//# sourceMappingURL=ScrubberControl.d.ts.map