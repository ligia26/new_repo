import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface Captions extends Components.VmCaptions {
}
export declare class Captions {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<Captions, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<Captions, "vm-captions", never, { "hidden": "hidden"; "isControlsActive": "isControlsActive"; "isVideoView": "isVideoView"; "playbackStarted": "playbackStarted"; "textTracks": "textTracks"; "currentTextTrack": "currentTextTrack"; "isTextTrackVisible": "isTextTrackVisible"; }, {}, never, ["*"], false, never>;
}

//# sourceMappingURL=Captions.d.ts.map