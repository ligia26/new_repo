import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface Audio extends Components.VmAudio {
}
export declare class Audio {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<Audio, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<Audio, "vm-audio", never, { "willAttach": "willAttach"; "crossOrigin": "crossOrigin"; "preload": "preload"; "disableRemotePlayback": "disableRemotePlayback"; "mediaTitle": "mediaTitle"; }, {}, never, ["*"], false, never>;
}

//# sourceMappingURL=Audio.d.ts.map