import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
import * as ɵngcc0 from '@angular/core';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface MenuItem extends Components.VmMenuItem {
}
export declare class MenuItem {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when the item is focused. */
    vmFocus: Emitter<JSX.VmMenuItem["onVmFocus"]>;
    /** Emitted when the item loses focus. */
    vmBlur: Emitter<JSX.VmMenuItem["onVmBlur"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MenuItem, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<MenuItem, "vm-menu-item", never, { "identifier": "identifier"; "hidden": "hidden"; "label": "label"; "menu": "menu"; "expanded": "expanded"; "checked": "checked"; "hint": "hint"; "badge": "badge"; "checkIcon": "checkIcon"; "icons": "icons"; "isTouch": "isTouch"; }, { "vmFocus": "vmFocus"; "vmBlur": "vmBlur"; }, never, ["*"], false, never>;
}

//# sourceMappingURL=MenuItem.d.ts.map