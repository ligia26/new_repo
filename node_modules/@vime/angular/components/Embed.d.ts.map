{"version":3,"file":"Embed.d.ts","sources":["Embed.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';\nimport type { JSX, Components } from '@vime/core/dist/types';\nexport declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;\nexport declare interface Embed extends Components.VmEmbed {\n}\nexport declare class Embed {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    /** Emitted when the `embedSrc` or `params` props change. The payload contains the `params`\n  serialized into a query string and appended to `embedSrc`. */\n    vmEmbedSrcChange: Emitter<JSX.VmEmbed[\"onVmEmbedSrcChange\"]>;\n    /** Emitted when a new message is received from the embedded player via `postMessage`. */\n    vmEmbedMessage: Emitter<JSX.VmEmbed[\"onVmEmbedMessage\"]>;\n    /** Emitted when the embedded player and any new media has loaded. */\n    vmEmbedLoaded: Emitter<JSX.VmEmbed[\"onVmEmbedLoaded\"]>;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\n"]}