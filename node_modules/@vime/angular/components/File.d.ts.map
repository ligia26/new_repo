{"version":3,"file":"File.d.ts","sources":["File.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';\nimport type { JSX, Components } from '@vime/core/dist/types';\nexport declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;\nexport declare interface File extends Components.VmFile {\n}\nexport declare class File {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    /** Emitted when an error has occurred. */\n    vmError: Emitter<JSX.VmFile[\"onVmError\"]>;\n    /** Emitted when the underlying media element changes. */\n    vmMediaElChange: Emitter<JSX.VmFile[\"onVmMediaElChange\"]>;\n    /** Emitted when the child `<source />` elements are modified. */\n    vmSrcSetChange: Emitter<JSX.VmFile[\"onVmSrcSetChange\"]>;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\n"]}