import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import type { JSX, Components } from '@vime/core/dist/types';
export declare type Emitter<T extends ((...args: any[]) => any) | undefined> = EventEmitter<Parameters<Exclude<T, undefined>>[0]>;
export declare interface Slider extends Components.VmSlider {
}
export declare class Slider {
    protected z: NgZone;
    protected el: HTMLElement;
    /** Emitted when the value of the underlying `input` field changes. */
    vmValueChange: Emitter<JSX.VmSlider["onVmValueChange"]>;
    /** Emitted when the slider receives focus. */
    vmFocus: Emitter<JSX.VmSlider["onVmFocus"]>;
    /** Emitted when the slider loses focus. */
    vmBlur: Emitter<JSX.VmSlider["onVmBlur"]>;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
