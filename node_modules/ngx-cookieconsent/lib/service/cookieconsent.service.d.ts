import { Observable } from 'rxjs';
import { NgcCookieConsentStatus } from '../model/common-interfaces';
import { NgcStatusChangeEvent } from '../event/status-change.event';
import { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';
import { NgcInitializingEvent } from '../event/initializing.event';
import { NgcInitializationErrorEvent } from '../event';
import { NgcCookieConsentConfig } from './cookieconsent-config';
import { WindowService } from './window.service';
import * as i0 from "@angular/core";
/**
 * Basic interface to represent `cookieconsent` object.
 */
export interface NgcCookieConsent {
    hasTransition: boolean;
    status: NgcCookieConsentStatus;
    getStatus(): NgcCookieConsentStatus;
    initialise(config: NgcCookieConsentConfig, successCallback?: (popup: NgcCookieConsentPopup) => void, errorCallback?: (error: Error, popup: NgcCookieConsentPopup) => void): void;
}
/**
 * Basic interface to represent `cookieconsent.Popup` object.
 */
export interface NgcCookieConsentPopup {
    setStatus(status: NgcCookieConsentStatus): void;
    getStatus(): NgcCookieConsentStatus;
    clearStatus(): void;
    open(): NgcCookieConsentPopup;
    close(showRevoke: boolean): NgcCookieConsentPopup;
    destroy(): void;
    fadeIn(): void;
    fadeOut(): void;
    isOpen(): boolean;
    toggleRevokeButton(show: boolean): void;
    hasAnswered(): boolean;
    hasConsented(): boolean;
}
/**
 * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.
 */
export interface NgcHasCookieConsent {
    cookieconsent: NgcCookieConsent;
}
/**
 * Service to interact with Cookie Consent API.
 */
export declare class NgcCookieConsentService {
    private cookieconsent;
    private popupInstance;
    private window;
    private config;
    private popupOpenSource;
    private popupCloseSource;
    private initializingSource;
    private initializedSource;
    private initializationErrorSource;
    private statusChangeSource;
    private revokeChoiceSource;
    private noCookieLawSource;
    /**
     * Observable to subscribe to and get notified when Cookie Consent popup opens.
     */
    popupOpen$: Observable<void>;
    /**
     * Observable to subscribe to and get notified when Cookie Consent popup closes.
     */
    popupClose$: Observable<void>;
    /**
     * Observable to subscribe to and get notified when Cookie Consent is initializing.
     */
    initializing$: Observable<NgcInitializingEvent>;
    /**
     * Observable to subscribe to and get notified when Cookie Consent has been successfully initialized.
     */
    initialized$: Observable<void>;
    /**
     * Observable to subscribe to and get notified when Cookie Consent has failed to initialize.
     */
    initializationError$: Observable<NgcInitializationErrorEvent>;
    /**
    * Observable to subscribe to and get notified when Cookie Consent status changes.
    */
    statusChange$: Observable<NgcStatusChangeEvent>;
    /**
     * Observable to subscribe to and get notified when Cookie is revoked.
     */
    revokeChoice$: Observable<void>;
    /**
    * Observable to subscribe to and get notified when no Cookie Law is applicable.
    */
    noCookieLaw$: Observable<NgcNoCookieLawEvent>;
    constructor(windowService: WindowService, config: NgcCookieConsentConfig);
    private checkPopupInstantiated;
    /**
     * Initializes Cookie Consent with the provided configuration.
     * @param config the configuration object
     */
    init(config: NgcCookieConsentConfig): void;
    /**
     * Gets the current configuration  used by the Cookie Consent.
     */
    getConfig(): NgcCookieConsentConfig;
    /**
     * Gets the current cookie status.
     */
    getStatus(): NgcCookieConsentStatus;
    /**
     * Gets the current browser support for translations
     */
    getTransition(): boolean;
    /**
     * Clears the current cookie status.
     */
    clearStatus(): void;
    open(): NgcCookieConsentPopup;
    close(showRevoke: boolean): NgcCookieConsentPopup;
    destroy(): void;
    fadeIn(): void;
    fadeOut(): void;
    isOpen(): boolean;
    toggleRevokeButton(show: boolean): void;
    hasAnswered(): boolean;
    hasConsented(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgcCookieConsentService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NgcCookieConsentService>;
}
