import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Cookie Consent configuration object.
 */
export class NgcCookieConsentConfig {
    constructor() {
        /**
         * If false, this prevents the popup from showing (useful for giving to control to another piece of code)
         */
        this.enabled = true;
        /**
         * Simple whitelist for pages. specify page by:
         * - using a string : '/index.html'           (matches '/index.html' exactly) OR
         * - using RegExp   : /\/page_[\d]+\.html/    (matched '/page_1.html' and '/page_2.html' etc)
         *
         */
        this.whitelistPage = [];
        /**
         * Simple blacklist for pages. specify page by:
         * - using a string : '/index.html'           (matches '/index.html' exactly) OR
         * - using RegExp   : /\/page_[\d]+\.html/    (matched '/page_1.html' and '/page_2.html' etc)
         *
         */
        this.blacklistPage = [];
    }
}
NgcCookieConsentConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: NgcCookieConsentConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgcCookieConsentConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: NgcCookieConsentConfig });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: NgcCookieConsentConfig, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,