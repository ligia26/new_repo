import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { NgcCookieConsentConfig } from './cookieconsent-config';
import { WindowService } from './window.service';
import * as i0 from "@angular/core";
import * as i1 from "./window.service";
import * as i2 from "./cookieconsent-config";
/**
 * Service to interact with Cookie Consent API.
 */
export class NgcCookieConsentService {
    constructor(windowService, config) {
        // Observable  sources
        this.popupOpenSource = new Subject();
        this.popupCloseSource = new Subject();
        this.initializingSource = new Subject();
        this.initializedSource = new Subject();
        this.initializationErrorSource = new Subject();
        this.statusChangeSource = new Subject();
        this.revokeChoiceSource = new Subject();
        this.noCookieLawSource = new Subject();
        // Observable  streams
        this.popupOpen$ = this.popupOpenSource.asObservable();
        this.popupClose$ = this.popupCloseSource.asObservable();
        this.initializing$ = this.initializingSource.asObservable();
        this.initialized$ = this.initializedSource.asObservable();
        this.initializationError$ = this.initializationErrorSource.asObservable();
        this.statusChange$ = this.statusChangeSource.asObservable();
        this.revokeChoice$ = this.revokeChoiceSource.asObservable();
        this.noCookieLaw$ = this.noCookieLawSource.asObservable();
        this.window = windowService.nativeWindow;
        this.init(config);
    }
    checkPopupInstantiated(method) {
        if (this.popupInstance == null) {
            throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);
        }
    }
    /**
     * Initializes Cookie Consent with the provided configuration.
     * @param config the configuration object
     */
    init(config) {
        if (this.window && this.window.cookieconsent) { // For Angular Universal suport
            this.cookieconsent = this.window.cookieconsent;
            this.config = config;
            // Set callbacks hooks:
            this.config.onPopupOpen =
                () => this.popupOpenSource.next();
            this.config.onPopupClose =
                () => this.popupCloseSource.next();
            this.config.onInitialise =
                (status) => this.initializingSource.next({ status: status });
            this.config.onStatusChange =
                (status, chosenBefore) => {
                    this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });
                };
            this.config.onRevokeChoice =
                () => this.revokeChoiceSource.next();
            this.config.onNoCookieLaw =
                (countryCode, country) => {
                    this.noCookieLawSource.next({ countryCode: countryCode, country: country });
                };
            // Init the cookieconsent library with injected config
            this.cookieconsent.initialise(this.config, (popup) => {
                this.popupInstance = popup;
                this.initializedSource.next(); //notify of successful initialization
            }, (error, popup) => {
                this.initializationErrorSource.next({ error: error }); //notify of failed initialization
            });
        }
    }
    /**
     * Gets the current configuration  used by the Cookie Consent.
     */
    getConfig() {
        return this.config;
    }
    /**
     * Gets the current cookie status.
     */
    getStatus() {
        return this.cookieconsent.status;
    }
    /**
     * Gets the current browser support for translations
     */
    getTransition() {
        return this.cookieconsent.hasTransition;
    }
    /**
     * Clears the current cookie status.
     */
    clearStatus() {
        this.checkPopupInstantiated('clearStatus');
        return this.popupInstance.clearStatus();
    }
    open() {
        this.checkPopupInstantiated('open');
        return this.popupInstance.open();
    }
    close(showRevoke) {
        this.checkPopupInstantiated('close');
        return this.popupInstance.close(showRevoke);
    }
    destroy() {
        this.checkPopupInstantiated('destroy');
        this.popupInstance.destroy();
    }
    fadeIn() {
        this.checkPopupInstantiated('fadeIn');
        this.popupInstance.fadeIn();
    }
    fadeOut() {
        this.checkPopupInstantiated('fadeOut');
        this.popupInstance.fadeOut();
    }
    isOpen() {
        this.checkPopupInstantiated('isOpen');
        return this.popupInstance.isOpen();
    }
    toggleRevokeButton(show) {
        this.checkPopupInstantiated('toggleRevokeButton');
        this.popupInstance.toggleRevokeButton(show);
    }
    hasAnswered() {
        this.checkPopupInstantiated('hasAnswered');
        return this.popupInstance.hasAnswered();
    }
    hasConsented() {
        this.checkPopupInstantiated('hasConsented');
        return this.popupInstance.hasConsented();
    }
}
NgcCookieConsentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: NgcCookieConsentService, deps: [{ token: i1.WindowService }, { token: i2.NgcCookieConsentConfig }], target: i0.ɵɵFactoryTarget.Injectable });
NgcCookieConsentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: NgcCookieConsentService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: NgcCookieConsentService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.WindowService }, { type: i2.NgcCookieConsentConfig }]; } });
//# sourceMappingURL=data:application/json;base64,