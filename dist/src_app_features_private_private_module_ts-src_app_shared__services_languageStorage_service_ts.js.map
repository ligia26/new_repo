{"version":3,"file":"src_app_features_private_private_module_ts-src_app_shared__services_languageStorage_service_ts.js","mappings":"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","sources":["./src/app/features/private/private.component.ts","./src/app/features/private/private.module.ts","./src/app/shared/_services/languageStorage.service.ts","./src/app/shared/_services/userData.service.ts","./src/app/features/private/private.component.scss"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: 'app-private',\n  templateUrl: './private.component.html',\n  styleUrls: ['./private.component.scss']\n})\nexport class PrivateComponent {\n\n  constructor(private router: Router) {\n  }\n\n  showMenu= true;\n\n  ngOnInit(){\n\n    if(this.router.url.includes('/editorials/view')){\n      this.showMenu=false;\n    }\n\n  }\n\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PrivateComponent} from './private.component';\nimport {HeaderComponent} from '../../standalone-components/header/header.component';\nimport {MenuComponent} from '../../standalone-components/menu/menu.component';\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {UserRolesGuard} from \"../../shared/_services/user-roles.guard\";\nimport {MatSidenavModule} from \"@angular/material/sidenav\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {FormsModule} from \"@angular/forms\";\nimport {DomainsSelectorComponent} from \"../../standalone-components/domains-selector/domains-selector.component\";\nimport {EditAccountComponent} from \"../../standalone-components/edit-account/edit-account.component\";\nimport {FooterComponent} from \"../../standalone-components/footer/footer.component\";\n\nexport const routes: Routes = [\n    {\n        path: '', component: PrivateComponent, children: [\n            {\n                path: 'admin', loadChildren: () => import('../role-admin/role-admin.module').then(m => m.RoleAdminModule),\n                canActivate: [UserRolesGuard],\n                data: {\n                    allowedRoles: ['ROLE_SUPER_ADMIN']\n                }\n            },\n            {\n                path: 'staff', loadChildren: () => import('../role-staff/role-staff.module').then(m => m.RoleStaffModule),\n                canActivate: [UserRolesGuard],\n                data: {\n                    allowedRoles: ['ROLE_STAFF']\n                }\n            },\n            {\n                path: 'provider', loadChildren: () => import('../role-provider/role-provider.module').then(m => m.RoleProviderModule),\n                canActivate: [UserRolesGuard],\n                data: {\n                    allowedRoles: ['ROLE_PROVIDER', 'ROLE_SUPER_ADMIN']\n                }\n            },\n            {path: '', redirectTo: '/', pathMatch: 'full'}\n        ]\n    },\n];\n\n\n@NgModule({\n    declarations: [\n        PrivateComponent,\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        RouterModule.forChild(routes),\n        SharedModule,\n        FormsModule,\n        DomainsSelectorComponent,\n        HeaderComponent,\n        MenuComponent,\n        FooterComponent\n\n\n    ]\n})\nexport class PrivateModule {\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {UserDataService} from \"./userData.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class LanguageStorageService{\n\n    constructor(private userDataService: UserDataService) {\n        // You can now use methods and properties of ServiceA within ServiceB\n    }\n\n    // Functions For Changes Detection\n    private languageChanged = new BehaviorSubject(false);\n    languageChangedObs = this.languageChanged.asObservable();\n\n      // Trigger list changes\n    triggerUserLanguageChanges(lang: any) {\n\n\n\n        console.log('trigger', lang)\n        this.userDataService.getCurrentSetting().subscribe((resp: any) => {\n            console.log('resp settings', resp);\n\n            if (resp) {\n                resp.language = lang;\n                this.userDataService.updateCurrentSetting(resp).subscribe((newResp: any) => {\n                    console.log('updated settings', resp, newResp);\n                    location.reload();\n                })\n            } else {\n                location.reload();\n            }\n\n        })\n\n    // // Change the subject value\n    // this.languageChanged.next(lang);\n  }\n\n}\n","import {Injectable} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {LocalStorageService} from \"./localStorage.service\";\nimport {Observable} from \"rxjs\";\nimport {User} from \"../_models/user.model\";\nimport {GenericPagination} from \"../_models/generic-pagination.model\";\nimport {City} from \"../_models/city.model\";\nimport {CurrentSubscription} from \"../_models/current-subscription.model\";\n\nexport type SubscriptionFilters = {\n    subscriptionId?: string;\n    status?: string;\n    userId?: string;\n    purchasedDate?: string;\n    expirationDate?: string;\n    stripeSubscriptionId?: string;\n}\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class UserDataService {\n\n    constructor(\n        public http: HttpClient,\n        public localStorage: LocalStorageService\n    ) {\n    }\n\n    baseApiUrl = \"/bestinform/uploadUserContract\";\n    baseCoverImgApiUrl = \"/bestinform/uploadUserCoverImage\";\n    baseAvatarImgApiUrl = \"/bestinform/uploadAvatar\";\n\n\n    // Returns an observable\n\n    //upload contract for any user id\n    uploadUserContract(userId: string, file: string | Blob): Observable<object> {\n\n        // Create form data\n        const formData = new FormData();\n\n        // Store form name as \"file\" with file data\n        formData.append(\"file\", file);\n\n        // Make http post request over api\n        // with formData as req\n        return this.http.post(this.baseApiUrl + '?userId=' + userId, formData)\n    }\n\n    //upload contract for current user\n    uploadCurrentUserContract(file: string | Blob): Observable<any> {\n\n        // Create form data\n        const formData = new FormData();\n\n        // Store form name as \"file\" with file data\n        formData.append(\"file\", file);\n\n        // Make http post request over api\n        // with formData as req\n        return this.http.post(this.baseApiUrl, formData)\n    }\n\n    uploadUserCoverImage(coverFile: string | Blob): Observable<any> {\n\n        // Create form data\n        const formData = new FormData();\n\n        // Store form name as \"file\" with file data\n        formData.append(\"coverFile\", coverFile);\n\n        // Make http post request over api\n        // with formData as req\n        return this.http.post(this.baseCoverImgApiUrl, formData)\n\n    }\n\n    uploadUserAvatar(file: string | Blob): Observable<any> {\n\n        // Create form data\n        const formData = new FormData();\n\n        // Store form name as \"file\" with file data\n        formData.append(\"file\", file);\n\n        // Make http post request over api\n        // with formData as req\n        return this.http.post(this.baseAvatarImgApiUrl, formData)\n\n    }\n\n    addUser(user: object) {\n        return this.http.post(\"/bestinform/addUser\", user);\n    }\n\n    getJWTToken() {\n        return this.localStorage.get('token');\n    }\n\n    getCurrentUser() {\n        return this.http.get<User>(\"/bestinform/getCurrentUser\");\n    }\n\n    getUserById(userId: string) {\n        return this.http.get(\"/bestinform/getUserById?userId=\" + userId);\n    }\n\n    updateCurrentUser(user: object) {\n        return this.http.put(\"/bestinform/updateCurrentUser\", user);\n    }\n\n    updateUser(userId: string, user: object) {\n        return this.http.put(\"/bestinform/updateUser?userId=\" + userId, user);\n    }\n\n    deleteUser(userId: string) {\n        return this.http.delete('/bestinform/deleteUser?userId=' + userId);\n    }\n\n    uploadAvatar(image) {\n        return this.http.post(\"/bestinform/uploadAvatar\", image);\n    }\n\n    // uploadUserCoverImage(coverFile){\n    //     return this.http.post(\"/bestinform/uploadUserCoverImage\",coverFile);\n    // }\n\n    deleteProfileImage() {\n        return this.http.put(\"/bestinform/deleteProfileImage\", {});\n    }\n\n\n    changeUserStatus(userId: string, approvedStatus: string) {\n        return this.http.put(\"/bestinform/changeUserStatus?userId=\" + userId + '&approvedStatus=' + approvedStatus, {});\n    }\n\n    changePassword(oldPassword: string, newPassword: string) {\n        return this.http.put(\"/bestinform/changePassword\", {oldPassword: oldPassword, newPassword: newPassword});\n    }\n\n    updateUserProfile(user: object) {\n        return this.http.put(\"/bestinform/updateUserProfile\", user);\n    }\n\n    sendRegistrationEmail(userId: string) {\n        return this.http.get(\"/bestinform/sendRegistrationEmail?userId=\" + userId);\n    }\n\n    getCurrentSetting() {\n        return this.http.get(\"/bestinform/getCurrentSetting\");\n    }\n\n    updateCurrentSetting(setting: object) {\n        return this.http.put(\"/bestinform/updateCurrentSetting\", setting);\n    }\n\n\n    listUsersFiltered(page: number, size: number, sort?: string, dir?: string, filters?: any) {\n        return this.http.post('/bestinform/listUsersFiltered?page=' + page + '&size=' + size + '&sort=' + sort + '&dir=' + dir, filters ? filters : {});\n    }\n\n    executeRecurringPayments() {\n        return this.http.post('/bestinform/executeRecurringPayments', {})\n    }\n\n    changeActiveStatus(targetUserId: string, accept: boolean) {\n        return this.http.put('/bestinform/changeActiveStatus?targetUserId=' + targetUserId + '&accept=' + accept, {});\n    }\n\n    getAllCountries() {\n        return this.http.get<string[]>('/bestinform/getAllCountries');\n    }\n\n    listCityFiltered(page: number, size: number, filters: { name?: string, country?: string }) {\n        return this.http.post<GenericPagination<City>>('/bestinform/listCityFiltered?page=' + page + '&size=' + size, filters);\n    }\n\n    getCurrentPurchasedSubscription() {\n        return this.http.get<CurrentSubscription>('/bestinform/getCurrentPurchasedSubscription');\n    }\n\n    listPurchasedSubscriptionsFiltered(page: number, size: number, sort: string, dir: string, filters: SubscriptionFilters) {\n        return this.http.post<GenericPagination<CurrentSubscription>>('/bestinform/listPurchasedSubscriptionsFiltered?page=' + page + '&size=' + size + '&sort=' + sort + '&dir=' + dir, filters);\n    }\n\n    cancelSubscription(subId: string) {\n        return this.http.post<{ success: boolean, reason: string }>('/bestinform/cancelSubscription?purchasedSubscriptionId=' + subId, {});\n    }\n\n\n    makeAutoRenewTrue(subscriptionId: string) {\n        return this.http.put('/bestinform/makeAutoRenewTrue?purchasedSubscriptionId=' + subscriptionId, {});\n    }\n}\n","// Imports\nvar ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\");\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___.toString();\n"],"names":["Component","Router","PrivateComponent","constructor","router","ngOnInit","url","includes","showMenu","selector","template","NgModule","CommonModule","HeaderComponent","MenuComponent","RouterModule","UserRolesGuard","SharedModule","FormsModule","DomainsSelectorComponent","FooterComponent","routes","path","component","children","loadChildren","then","m","RoleAdminModule","canActivate","data","allowedRoles","RoleStaffModule","RoleProviderModule","redirectTo","pathMatch","PrivateModule","declarations","imports","forChild","Injectable","BehaviorSubject","UserDataService","LanguageStorageService","userDataService","languageChanged","asObservable","triggerUserLanguageChanges","lang","console","log","getCurrentSetting","subscribe","resp","language","updateCurrentSetting","newResp","location","reload","providedIn","HttpClient","LocalStorageService","http","localStorage","uploadUserContract","userId","file","formData","FormData","append","post","baseApiUrl","uploadCurrentUserContract","uploadUserCoverImage","coverFile","baseCoverImgApiUrl","uploadUserAvatar","baseAvatarImgApiUrl","addUser","user","getJWTToken","get","getCurrentUser","getUserById","updateCurrentUser","put","updateUser","deleteUser","delete","uploadAvatar","image","deleteProfileImage","changeUserStatus","approvedStatus","changePassword","oldPassword","newPassword","updateUserProfile","sendRegistrationEmail","setting","listUsersFiltered","page","size","sort","dir","filters","executeRecurringPayments","changeActiveStatus","targetUserId","accept","getAllCountries","listCityFiltered","getCurrentPurchasedSubscription","listPurchasedSubscriptionsFiltered","cancelSubscription","subId","makeAutoRenewTrue","subscriptionId"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}