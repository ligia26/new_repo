(self["webpackChunkbestinform"] = self["webpackChunkbestinform"] || []).push([["default-src_app_shared__services_staff_service_ts-node_modules_randexp_lib_randexp_js"],{

/***/ 50871:
/*!***************************************************!*\
  !*** ./src/app/shared/_services/staff.service.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StaffService": () => (/* binding */ StaffService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common/http */ 58987);



let StaffService = class StaffService {
  constructor(http) {
    this.http = http;
  }
  listUsersFiltered(page, size, sort, dir, filters) {
    return this.http.post('/bestinform/listUsersFiltered?page=' + page + '&size=' + size + '&sort=' + sort + '&dir=' + dir, filters);
  }
  getUserById(userId) {
    return this.http.get('/bestinform/getUserById?userId=' + userId);
  }
  updateUser(userId, userObj) {
    return this.http.put('/bestinform/updateUser?userId=' + userId, userObj);
  }
  addUser(userObj) {
    return this.http.post('/bestinform/addUser', userObj);
  }
  deleteUser(userId) {
    return this.http.delete('/bestinform/deleteUser?userId=' + userId);
  }
  changeUserPassword(userId, password) {
    return this.http.put('/bestinform/changeUserPassword?userId=' + userId, password);
  }
  changeActiveStatus(targetUserId, accept) {
    return this.http.put('/bestinform/changeActiveStatus?targetUserId=' + targetUserId + '&accept=' + accept, {});
  }
  changeBlockStatus(userId, block) {
    return this.http.put('/bestinform/changeBlockStatus?userId=' + userId + '&block=' + block, {});
  }
  sendRegistrationEmail(userId) {
    return this.http.get('/bestinform/sendRegistrationEmail?userId=' + userId);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_0__.HttpClient
  }];
};
StaffService = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable)({
  providedIn: 'root'
})], StaffService);


/***/ }),

/***/ 41806:
/*!******************************************!*\
  !*** ./node_modules/drange/lib/index.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";


/* eslint indent: 4 */

// Private helper class
class SubRange {
  constructor(low, high) {
    this.low = low;
    this.high = high;
    this.length = 1 + high - low;
  }
  overlaps(range) {
    return !(this.high < range.low || this.low > range.high);
  }
  touches(range) {
    return !(this.high + 1 < range.low || this.low - 1 > range.high);
  }

  // Returns inclusive combination of SubRanges as a SubRange.
  add(range) {
    return new SubRange(Math.min(this.low, range.low), Math.max(this.high, range.high));
  }

  // Returns subtraction of SubRanges as an array of SubRanges.
  // (There's a case where subtraction divides it in 2)
  subtract(range) {
    if (range.low <= this.low && range.high >= this.high) {
      return [];
    } else if (range.low > this.low && range.high < this.high) {
      return [new SubRange(this.low, range.low - 1), new SubRange(range.high + 1, this.high)];
    } else if (range.low <= this.low) {
      return [new SubRange(range.high + 1, this.high)];
    } else {
      return [new SubRange(this.low, range.low - 1)];
    }
  }
  toString() {
    return this.low == this.high ? this.low.toString() : this.low + '-' + this.high;
  }
}
class DRange {
  constructor(a, b) {
    this.ranges = [];
    this.length = 0;
    if (a != null) this.add(a, b);
  }
  _update_length() {
    this.length = this.ranges.reduce((previous, range) => {
      return previous + range.length;
    }, 0);
  }
  add(a, b) {
    var _add = subrange => {
      var i = 0;
      while (i < this.ranges.length && !subrange.touches(this.ranges[i])) {
        i++;
      }
      var newRanges = this.ranges.slice(0, i);
      while (i < this.ranges.length && subrange.touches(this.ranges[i])) {
        subrange = subrange.add(this.ranges[i]);
        i++;
      }
      newRanges.push(subrange);
      this.ranges = newRanges.concat(this.ranges.slice(i));
      this._update_length();
    };
    if (a instanceof DRange) {
      a.ranges.forEach(_add);
    } else {
      if (b == null) b = a;
      _add(new SubRange(a, b));
    }
    return this;
  }
  subtract(a, b) {
    var _subtract = subrange => {
      var i = 0;
      while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {
        i++;
      }
      var newRanges = this.ranges.slice(0, i);
      while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {
        newRanges = newRanges.concat(this.ranges[i].subtract(subrange));
        i++;
      }
      this.ranges = newRanges.concat(this.ranges.slice(i));
      this._update_length();
    };
    if (a instanceof DRange) {
      a.ranges.forEach(_subtract);
    } else {
      if (b == null) b = a;
      _subtract(new SubRange(a, b));
    }
    return this;
  }
  intersect(a, b) {
    var newRanges = [];
    var _intersect = subrange => {
      var i = 0;
      while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {
        i++;
      }
      while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {
        var low = Math.max(this.ranges[i].low, subrange.low);
        var high = Math.min(this.ranges[i].high, subrange.high);
        newRanges.push(new SubRange(low, high));
        i++;
      }
    };
    if (a instanceof DRange) {
      a.ranges.forEach(_intersect);
    } else {
      if (b == null) b = a;
      _intersect(new SubRange(a, b));
    }
    this.ranges = newRanges;
    this._update_length();
    return this;
  }
  index(index) {
    var i = 0;
    while (i < this.ranges.length && this.ranges[i].length <= index) {
      index -= this.ranges[i].length;
      i++;
    }
    return this.ranges[i].low + index;
  }
  toString() {
    return '[ ' + this.ranges.join(', ') + ' ]';
  }
  clone() {
    return new DRange(this);
  }
  numbers() {
    return this.ranges.reduce((result, subrange) => {
      var i = subrange.low;
      while (i <= subrange.high) {
        result.push(i);
        i++;
      }
      return result;
    }, []);
  }
  subranges() {
    return this.ranges.map(subrange => ({
      low: subrange.low,
      high: subrange.high,
      length: 1 + subrange.high - subrange.low
    }));
  }
}
module.exports = DRange;

/***/ }),

/***/ 26802:
/*!*********************************************!*\
  !*** ./node_modules/randexp/lib/randexp.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const ret = __webpack_require__(/*! ret */ 70446);
const DRange = __webpack_require__(/*! drange */ 41806);
const types = ret.types;
module.exports = class RandExp {
  /**
   * @constructor
   * @param {RegExp|String} regexp
   * @param {String} m
   */
  constructor(regexp, m) {
    this._setDefaults(regexp);
    if (regexp instanceof RegExp) {
      this.ignoreCase = regexp.ignoreCase;
      this.multiline = regexp.multiline;
      regexp = regexp.source;
    } else if (typeof regexp === 'string') {
      this.ignoreCase = m && m.indexOf('i') !== -1;
      this.multiline = m && m.indexOf('m') !== -1;
    } else {
      throw new Error('Expected a regexp or string');
    }
    this.tokens = ret(regexp);
  }

  /**
   * Checks if some custom properties have been set for this regexp.
   *
   * @param {RandExp} randexp
   * @param {RegExp} regexp
   */
  _setDefaults(regexp) {
    // When a repetitional token has its max set to Infinite,
    // randexp won't actually generate a random amount between min and Infinite
    // instead it will see Infinite as min + 100.
    this.max = regexp.max != null ? regexp.max : RandExp.prototype.max != null ? RandExp.prototype.max : 100;

    // This allows expanding to include additional characters
    // for instance: RandExp.defaultRange.add(0, 65535);
    this.defaultRange = regexp.defaultRange ? regexp.defaultRange : this.defaultRange.clone();
    if (regexp.randInt) {
      this.randInt = regexp.randInt;
    }
  }

  /**
   * Generates the random string.
   *
   * @return {String}
   */
  gen() {
    return this._gen(this.tokens, []);
  }

  /**
   * Generate random string modeled after given tokens.
   *
   * @param {Object} token
   * @param {Array.<String>} groups
   * @return {String}
   */
  _gen(token, groups) {
    var stack, str, n, i, l;
    switch (token.type) {
      case types.ROOT:
      case types.GROUP:
        // Ignore lookaheads for now.
        if (token.followedBy || token.notFollowedBy) {
          return '';
        }

        // Insert placeholder until group string is generated.
        if (token.remember && token.groupNumber === undefined) {
          token.groupNumber = groups.push(null) - 1;
        }
        stack = token.options ? this._randSelect(token.options) : token.stack;
        str = '';
        for (i = 0, l = stack.length; i < l; i++) {
          str += this._gen(stack[i], groups);
        }
        if (token.remember) {
          groups[token.groupNumber] = str;
        }
        return str;
      case types.POSITION:
        // Do nothing for now.
        return '';
      case types.SET:
        var expandedSet = this._expand(token);
        if (!expandedSet.length) {
          return '';
        }
        return String.fromCharCode(this._randSelect(expandedSet));
      case types.REPETITION:
        // Randomly generate number between min and max.
        n = this.randInt(token.min, token.max === Infinity ? token.min + this.max : token.max);
        str = '';
        for (i = 0; i < n; i++) {
          str += this._gen(token.value, groups);
        }
        return str;
      case types.REFERENCE:
        return groups[token.value - 1] || '';
      case types.CHAR:
        var code = this.ignoreCase && this._randBool() ? this._toOtherCase(token.value) : token.value;
        return String.fromCharCode(code);
    }
  }

  /**
   * If code is alphabetic, converts to other case.
   * If not alphabetic, returns back code.
   *
   * @param {Number} code
   * @return {Number}
   */
  _toOtherCase(code) {
    return code + (97 <= code && code <= 122 ? -32 : 65 <= code && code <= 90 ? 32 : 0);
  }

  /**
   * Randomly returns a true or false value.
   *
   * @return {Boolean}
   */
  _randBool() {
    return !this.randInt(0, 1);
  }

  /**
   * Randomly selects and returns a value from the array.
   *
   * @param {Array.<Object>} arr
   * @return {Object}
   */
  _randSelect(arr) {
    if (arr instanceof DRange) {
      return arr.index(this.randInt(0, arr.length - 1));
    }
    return arr[this.randInt(0, arr.length - 1)];
  }

  /**
   * expands a token to a DiscontinuousRange of characters which has a
   * length and an index function (for random selecting)
   *
   * @param {Object} token
   * @return {DiscontinuousRange}
   */
  _expand(token) {
    if (token.type === ret.types.CHAR) {
      return new DRange(token.value);
    } else if (token.type === ret.types.RANGE) {
      return new DRange(token.from, token.to);
    } else {
      let drange = new DRange();
      for (let i = 0; i < token.set.length; i++) {
        let subrange = this._expand(token.set[i]);
        drange.add(subrange);
        if (this.ignoreCase) {
          for (let j = 0; j < subrange.length; j++) {
            let code = subrange.index(j);
            let otherCaseCode = this._toOtherCase(code);
            if (code !== otherCaseCode) {
              drange.add(otherCaseCode);
            }
          }
        }
      }
      if (token.not) {
        return this.defaultRange.clone().subtract(drange);
      } else {
        return this.defaultRange.clone().intersect(drange);
      }
    }
  }

  /**
   * Randomly generates and returns a number between a and b (inclusive).
   *
   * @param {Number} a
   * @param {Number} b
   * @return {Number}
   */
  randInt(a, b) {
    return a + Math.floor(Math.random() * (1 + b - a));
  }

  /**
   * Default range of characters to generate from.
   */
  get defaultRange() {
    return this._range = this._range || new DRange(32, 126);
  }
  set defaultRange(range) {
    this._range = range;
  }

  /**
   *
   * Enables use of randexp with a shorter call.
   *
   * @param {RegExp|String| regexp}
   * @param {String} m
   * @return {String}
   */
  static randexp(regexp, m) {
    var randexp;
    if (typeof regexp === 'string') {
      regexp = new RegExp(regexp, m);
    }
    if (regexp._randexp === undefined) {
      randexp = new RandExp(regexp, m);
      regexp._randexp = randexp;
    } else {
      randexp = regexp._randexp;
      randexp._setDefaults(regexp);
    }
    return randexp.gen();
  }

  /**
   * Enables sugary /regexp/.gen syntax.
   */
  static sugar() {
    /* eshint freeze:false */
    RegExp.prototype.gen = function () {
      return RandExp.randexp(this);
    };
  }
};

/***/ }),

/***/ 70446:
/*!***************************************!*\
  !*** ./node_modules/ret/lib/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const util = __webpack_require__(/*! ./util */ 37773);
const types = __webpack_require__(/*! ./types */ 52318);
const sets = __webpack_require__(/*! ./sets */ 34657);
const positions = __webpack_require__(/*! ./positions */ 18752);
module.exports = regexpStr => {
  var i = 0,
    l,
    c,
    start = {
      type: types.ROOT,
      stack: []
    },
    // Keep track of last clause/group and stack.
    lastGroup = start,
    last = start.stack,
    groupStack = [];
  var repeatErr = i => {
    util.error(regexpStr, `Nothing to repeat at column ${i - 1}`);
  };

  // Decode a few escaped characters.
  var str = util.strToChars(regexpStr);
  l = str.length;

  // Iterate through each character in string.
  while (i < l) {
    c = str[i++];
    switch (c) {
      // Handle escaped characters, inclues a few sets.
      case '\\':
        c = str[i++];
        switch (c) {
          case 'b':
            last.push(positions.wordBoundary());
            break;
          case 'B':
            last.push(positions.nonWordBoundary());
            break;
          case 'w':
            last.push(sets.words());
            break;
          case 'W':
            last.push(sets.notWords());
            break;
          case 'd':
            last.push(sets.ints());
            break;
          case 'D':
            last.push(sets.notInts());
            break;
          case 's':
            last.push(sets.whitespace());
            break;
          case 'S':
            last.push(sets.notWhitespace());
            break;
          default:
            // Check if c is integer.
            // In which case it's a reference.
            if (/\d/.test(c)) {
              last.push({
                type: types.REFERENCE,
                value: parseInt(c, 10)
              });

              // Escaped character.
            } else {
              last.push({
                type: types.CHAR,
                value: c.charCodeAt(0)
              });
            }
        }
        break;

      // Positionals.
      case '^':
        last.push(positions.begin());
        break;
      case '$':
        last.push(positions.end());
        break;

      // Handle custom sets.
      case '[':
        // Check if this class is 'anti' i.e. [^abc].
        var not;
        if (str[i] === '^') {
          not = true;
          i++;
        } else {
          not = false;
        }

        // Get all the characters in class.
        var classTokens = util.tokenizeClass(str.slice(i), regexpStr);

        // Increase index by length of class.
        i += classTokens[1];
        last.push({
          type: types.SET,
          set: classTokens[0],
          not
        });
        break;

      // Class of any character except \n.
      case '.':
        last.push(sets.anyChar());
        break;

      // Push group onto stack.
      case '(':
        // Create group.
        var group = {
          type: types.GROUP,
          stack: [],
          remember: true
        };
        c = str[i];

        // If if this is a special kind of group.
        if (c === '?') {
          c = str[i + 1];
          i += 2;

          // Match if followed by.
          if (c === '=') {
            group.followedBy = true;

            // Match if not followed by.
          } else if (c === '!') {
            group.notFollowedBy = true;
          } else if (c !== ':') {
            util.error(regexpStr, `Invalid group, character '${c}'` + ` after '?' at column ${i - 1}`);
          }
          group.remember = false;
        }

        // Insert subgroup into current group stack.
        last.push(group);

        // Remember the current group for when the group closes.
        groupStack.push(lastGroup);

        // Make this new group the current group.
        lastGroup = group;
        last = group.stack;
        break;

      // Pop group out of stack.
      case ')':
        if (groupStack.length === 0) {
          util.error(regexpStr, `Unmatched ) at column ${i - 1}`);
        }
        lastGroup = groupStack.pop();

        // Check if this group has a PIPE.
        // To get back the correct last stack.
        last = lastGroup.options ? lastGroup.options[lastGroup.options.length - 1] : lastGroup.stack;
        break;

      // Use pipe character to give more choices.
      case '|':
        // Create array where options are if this is the first PIPE
        // in this clause.
        if (!lastGroup.options) {
          lastGroup.options = [lastGroup.stack];
          delete lastGroup.stack;
        }

        // Create a new stack and add to options for rest of clause.
        var stack = [];
        lastGroup.options.push(stack);
        last = stack;
        break;

      // Repetition.
      // For every repetition, remove last element from last stack
      // then insert back a RANGE object.
      // This design is chosen because there could be more than
      // one repetition symbols in a regex i.e. `a?+{2,3}`.
      case '{':
        var rs = /^(\d+)(,(\d+)?)?\}/.exec(str.slice(i)),
          min,
          max;
        if (rs !== null) {
          if (last.length === 0) {
            repeatErr(i);
          }
          min = parseInt(rs[1], 10);
          max = rs[2] ? rs[3] ? parseInt(rs[3], 10) : Infinity : min;
          i += rs[0].length;
          last.push({
            type: types.REPETITION,
            min,
            max,
            value: last.pop()
          });
        } else {
          last.push({
            type: types.CHAR,
            value: 123
          });
        }
        break;
      case '?':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
          type: types.REPETITION,
          min: 0,
          max: 1,
          value: last.pop()
        });
        break;
      case '+':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
          type: types.REPETITION,
          min: 1,
          max: Infinity,
          value: last.pop()
        });
        break;
      case '*':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
          type: types.REPETITION,
          min: 0,
          max: Infinity,
          value: last.pop()
        });
        break;

      // Default is a character that is not `\[](){}?+*^$`.
      default:
        last.push({
          type: types.CHAR,
          value: c.charCodeAt(0)
        });
    }
  }

  // Check if any groups have not been closed.
  if (groupStack.length !== 0) {
    util.error(regexpStr, 'Unterminated group');
  }
  return start;
};
module.exports.types = types;

/***/ }),

/***/ 18752:
/*!*******************************************!*\
  !*** ./node_modules/ret/lib/positions.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const types = __webpack_require__(/*! ./types */ 52318);
exports.wordBoundary = () => ({
  type: types.POSITION,
  value: 'b'
});
exports.nonWordBoundary = () => ({
  type: types.POSITION,
  value: 'B'
});
exports.begin = () => ({
  type: types.POSITION,
  value: '^'
});
exports.end = () => ({
  type: types.POSITION,
  value: '$'
});

/***/ }),

/***/ 34657:
/*!**************************************!*\
  !*** ./node_modules/ret/lib/sets.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const types = __webpack_require__(/*! ./types */ 52318);
const INTS = () => [{
  type: types.RANGE,
  from: 48,
  to: 57
}];
const WORDS = () => {
  return [{
    type: types.CHAR,
    value: 95
  }, {
    type: types.RANGE,
    from: 97,
    to: 122
  }, {
    type: types.RANGE,
    from: 65,
    to: 90
  }].concat(INTS());
};
const WHITESPACE = () => {
  return [{
    type: types.CHAR,
    value: 9
  }, {
    type: types.CHAR,
    value: 10
  }, {
    type: types.CHAR,
    value: 11
  }, {
    type: types.CHAR,
    value: 12
  }, {
    type: types.CHAR,
    value: 13
  }, {
    type: types.CHAR,
    value: 32
  }, {
    type: types.CHAR,
    value: 160
  }, {
    type: types.CHAR,
    value: 5760
  }, {
    type: types.RANGE,
    from: 8192,
    to: 8202
  }, {
    type: types.CHAR,
    value: 8232
  }, {
    type: types.CHAR,
    value: 8233
  }, {
    type: types.CHAR,
    value: 8239
  }, {
    type: types.CHAR,
    value: 8287
  }, {
    type: types.CHAR,
    value: 12288
  }, {
    type: types.CHAR,
    value: 65279
  }];
};
const NOTANYCHAR = () => {
  return [{
    type: types.CHAR,
    value: 10
  }, {
    type: types.CHAR,
    value: 13
  }, {
    type: types.CHAR,
    value: 8232
  }, {
    type: types.CHAR,
    value: 8233
  }];
};

// Predefined class objects.
exports.words = () => ({
  type: types.SET,
  set: WORDS(),
  not: false
});
exports.notWords = () => ({
  type: types.SET,
  set: WORDS(),
  not: true
});
exports.ints = () => ({
  type: types.SET,
  set: INTS(),
  not: false
});
exports.notInts = () => ({
  type: types.SET,
  set: INTS(),
  not: true
});
exports.whitespace = () => ({
  type: types.SET,
  set: WHITESPACE(),
  not: false
});
exports.notWhitespace = () => ({
  type: types.SET,
  set: WHITESPACE(),
  not: true
});
exports.anyChar = () => ({
  type: types.SET,
  set: NOTANYCHAR(),
  not: true
});

/***/ }),

/***/ 52318:
/*!***************************************!*\
  !*** ./node_modules/ret/lib/types.js ***!
  \***************************************/
/***/ ((module) => {

module.exports = {
  ROOT: 0,
  GROUP: 1,
  POSITION: 2,
  SET: 3,
  RANGE: 4,
  REPETITION: 5,
  REFERENCE: 6,
  CHAR: 7
};

/***/ }),

/***/ 37773:
/*!**************************************!*\
  !*** ./node_modules/ret/lib/util.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const types = __webpack_require__(/*! ./types */ 52318);
const sets = __webpack_require__(/*! ./sets */ 34657);
const CTRL = '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^ ?';
const SLSH = {
  '0': 0,
  't': 9,
  'n': 10,
  'v': 11,
  'f': 12,
  'r': 13
};

/**
 * Finds character representations in str and convert all to
 * their respective characters
 *
 * @param {String} str
 * @return {String}
 */
exports.strToChars = function (str) {
  /* jshint maxlen: false */
  var chars_regex = /(\[\\b\])|(\\)?\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|(0?[0-7]{2})|c([@A-Z[\\\]^?])|([0tnvfr]))/g;
  str = str.replace(chars_regex, function (s, b, lbs, a16, b16, c8, dctrl, eslsh) {
    if (lbs) {
      return s;
    }
    var code = b ? 8 : a16 ? parseInt(a16, 16) : b16 ? parseInt(b16, 16) : c8 ? parseInt(c8, 8) : dctrl ? CTRL.indexOf(dctrl) : SLSH[eslsh];
    var c = String.fromCharCode(code);

    // Escape special regex characters.
    if (/[[\]{}^$.|?*+()]/.test(c)) {
      c = '\\' + c;
    }
    return c;
  });
  return str;
};

/**
 * turns class into tokens
 * reads str until it encounters a ] not preceeded by a \
 *
 * @param {String} str
 * @param {String} regexpStr
 * @return {Array.<Array.<Object>, Number>}
 */
exports.tokenizeClass = (str, regexpStr) => {
  /* jshint maxlen: false */
  var tokens = [];
  var regexp = /\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\)(.)|([^\]\\]))-(?:\\)?([^\]]))|(\])|(?:\\)?([^])/g;
  var rs, c;
  while ((rs = regexp.exec(str)) != null) {
    if (rs[1]) {
      tokens.push(sets.words());
    } else if (rs[2]) {
      tokens.push(sets.ints());
    } else if (rs[3]) {
      tokens.push(sets.whitespace());
    } else if (rs[4]) {
      tokens.push(sets.notWords());
    } else if (rs[5]) {
      tokens.push(sets.notInts());
    } else if (rs[6]) {
      tokens.push(sets.notWhitespace());
    } else if (rs[7]) {
      tokens.push({
        type: types.RANGE,
        from: (rs[8] || rs[9]).charCodeAt(0),
        to: rs[10].charCodeAt(0)
      });
    } else if (c = rs[12]) {
      tokens.push({
        type: types.CHAR,
        value: c.charCodeAt(0)
      });
    } else {
      return [tokens, regexp.lastIndex];
    }
  }
  exports.error(regexpStr, 'Unterminated character class');
};

/**
 * Shortcut to throw errors.
 *
 * @param {String} regexp
 * @param {String} msg
 */
exports.error = (regexp, msg) => {
  throw new SyntaxError('Invalid regular expression: /' + regexp + '/: ' + msg);
};

/***/ })

}]);
//# sourceMappingURL=default-src_app_shared__services_staff_service_ts-node_modules_randexp_lib_randexp_js.js.map