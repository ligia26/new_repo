{"version":3,"file":"src_app_shared__services_resource-filter_service_ts.js","mappings":";;;;;;;;;;;;;;;;;;;AAAyC;AACO;AACA;AA+BzC,IAAMI,qBAAqB,GAA3B,MAAMA,qBAAqB;EAmC9BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAjCxB;IACQ,sBAAiB,GAAG,IAAIJ,iDAAe,CAAe,IAAI,CAAC;IAC5D,qBAAgB,GAAG,IAAI,CAACK,iBAAiB,CAACC,YAAY,EAAE;IAE/D;IACQ,sBAAiB,GAAG,IAAIN,iDAAe,CAAqB,IAAI,CAAC;IAClE,qBAAgB,GAAG,IAAI,CAACO,iBAAiB,CAACD,YAAY,EAAE;IAE/D;IACQ,0BAAqB,GAAG,IAAIN,iDAAe,CAAmB,IAAI,CAAC;IACpE,yBAAoB,GAAG,IAAI,CAACQ,qBAAqB,CAACF,YAAY,EAAE;IAEvE;IACQ,kBAAa,GAAG,IAAIN,iDAAe,CAAW,IAAI,CAAC;IACpD,iBAAY,GAAG,IAAI,CAACS,aAAa,CAACH,YAAY,EAAE;IAGvD;IACQ,eAAU,GAAoB,IAAI;IAE1C;IACQ,iBAAY,GAAiB,IAAI;IAEzC;IACA,WAAM,GAAG,CAAC;IACV,aAAQ,GAAG,EAAE;IAKb;IACQ,0BAAqB,GAAa,IAAI;EAG9C;EAEAI,qBAAqB;IACjB,OAAO,CAAC,CAAC,IAAI,CAACC,qBAAqB;EACvC;EAEAC,wBAAwB,CAACC,QAAkB;IACvC,IAAI,CAACF,qBAAqB,GAAGE,QAAQ;EACzC;EAEAC,wBAAwB;IACpB,OAAOC,eAAe,CAAC,IAAI,CAACJ,qBAAqB,CAAC;EACtD;EAEAK,iBAAiB;IACb,IAAI,CAACX,iBAAiB,CAACY,IAAI,CAAC,IAAI,CAAC;IACjC,IAAI,CAACV,iBAAiB,CAACU,IAAI,CAAC,IAAI,CAAC;IACjC,IAAI,CAACT,qBAAqB,CAACS,IAAI,CAAC,IAAI,CAAC;IACrC,IAAI,CAACR,aAAa,CAACQ,IAAI,CAAC,IAAI,CAAC;IAC7B,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACR,qBAAqB,GAAG,IAAI;EACrC;EAEAS,mBAAmB,CAACC,cAAsB;IACtC,IAAI,CAACH,UAAU,GAAG;MACdG,cAAc,EAAEA,cAAc;MAC9BC,MAAM,EAAE;KACX;IACD,IAAI,CAACH,YAAY,GAAG,IAAI;IAExB,OAAO,IAAI,CAACf,IAAI,CAACmB,GAAG,CAAe,iDAAiD,GAAGF,cAAc,CAAC,CACjGG,IAAI,CACDvB,+CAAS,CAACwB,GAAG,IAAG;MACZ,IAAIA,GAAG,EAAE;QACL,IAAI,CAACpB,iBAAiB,CAACY,IAAI,CAACQ,GAAG,CAAC;QAChC,OAAO,IAAI,CAACC,gBAAgB;;IAEpC,CAAC,CAAC,CACL;EACT;EAEAC,eAAe,CAACC,YAA0B;IACtC,IAAI,CAACvB,iBAAiB,CAACY,IAAI,CAACW,YAAY,CAAC;EAC7C;EAEAC,uBAAuB,CAACC,IAAY;IAChC,OAAO,IAAI,CAAC1B,IAAI,CAACmB,GAAG,CAAuB,2CAA2C,GAAGO,IAAI,CAAC;EAClG;EAEAC,oBAAoB,CAACC,IAAY,EAAEC,IAAY,EAAEC,IAAa,EAAEC,GAAY;IACxE,IAAI,CAACC,MAAM,GAAGJ,IAAI;IAClB,IAAI,CAACK,QAAQ,GAAGJ,IAAI;IACpB,IAAI,CAACK,MAAM,GAAGJ,IAAI;IAClB,IAAI,CAACK,aAAa,GAAGJ,GAAG;IAExB,OAAO,IAAI,CAAC/B,IAAI,CAACoC,IAAI,CAAqB,wCAAwC,GAAGR,IAAI,GAAG,QAAQ,GAAGC,IAAI,GAAG,QAAQ,GAAGC,IAAI,GAAG,OAAO,GAAGC,GAAG,EAAE,IAAI,CAACjB,UAAU,CAAC,CAC1JM,IAAI,CACDvB,+CAAS,CAACwB,GAAG,IAAG;MACZ,IAAIA,GAAG,EAAE;QACL,IAAI,CAAClB,iBAAiB,CAACU,IAAI,CAACQ,GAAG,CAAC;QAChC,OAAO,IAAI,CAACgB,gBAAgB;;IAEpC,CAAC,CAAC,CACL;EACT;EAEAC,aAAa,CAACC,UAA2B;IACrC,IAAI,CAACzB,UAAU,GAAG;MAAC,GAAG,IAAI,CAACA,UAAU;MAAE,GAAGyB;IAAU,CAAC;IAErD,OAAO,IAAI,CAACvC,IAAI,CAACoC,IAAI,CAAqB,wCAAwC,GAAG,IAAI,CAACJ,MAAM,GAAG,QAAQ,GAAG,IAAI,CAACC,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAACC,MAAM,GAAG,OAAO,GAAG,IAAI,CAACC,aAAa,EAAE,IAAI,CAACrB,UAAU,CAAC,CAChMM,IAAI,CACDvB,+CAAS,CAACwB,GAAG,IAAG;MACZ,IAAIA,GAAG,EAAE;QACL,IAAI,CAAClB,iBAAiB,CAACU,IAAI,CAACQ,GAAG,CAAC;QAChC,OAAO,IAAI,CAACgB,gBAAgB;;IAEpC,CAAC,CAAC,CACL;EACT;EAEAG,mCAAmC,CAACvB,cAAsB;IACtD,OAAO,IAAI,CAACjB,IAAI,CAACoC,IAAI,CAAqB,wDAAwD,EAAE;MAACnB,cAAc,EAAEA;IAAc,CAAC,CAAC,CAChIG,IAAI,CACDvB,+CAAS,CAAEwB,GAAG,IAAG;MACb,IAAIA,GAAG,EAAEoB,OAAO,EAAEC,MAAM,GAAG,CAAC,EAAE;QAC1B,IAAI,CAACtC,qBAAqB,CAACS,IAAI,CAACQ,GAAG,CAACoB,OAAO,CAAC,CAAC,CAAC,CAAC;QAC/C,OAAO,IAAI,CAACE,oBAAoB;OACnC,MAAM;QACH,IAAI,CAACvC,qBAAqB,CAACS,IAAI,CAAC,IAAI,CAAC;QACrC,OAAO,IAAI,CAAC8B,oBAAoB;;IAExC,CAAC,CAAC,CACL;EACT;EAEAC,kBAAkB,CAACL,UAAwB;IACvC,IAAI,CAACxB,YAAY,GAAG;MAAC,GAAGwB;IAAU,CAAC;EACvC;EAEAM,eAAe;IACX,OAAO,IAAI,CAAC9B,YAAY;EAC5B;EAEQ+B,eAAe,CAACrC,QAAgB;IACpC,OAAO,QAAQ,IAAIA,QAAQ,IAAI,YAAY,IAAIA,QAAQ,IAAI,gBAAgB,IAAIA,QAAQ;EAC3F;EAEAsC,eAAe,CAACC,UAAkB;IAC9B;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC1C,qBAAqB,EAAE,EAAE;MAC9B,IAAI,CAACD,aAAa,CAACQ,IAAI,CAAC,IAAI,CAACN,qBAAqB,CAAC;MACnD,OAAO,IAAI,CAAC0C,YAAY;;IAG5B,OAAO,IAAI,CAACjD,IAAI,CAACmB,GAAG,CAAW,yCAAyC,GAAG6B,UAAU,CAAC,CACjF5B,IAAI,CACDvB,+CAAS,CAAEwB,GAAG,IAAG;MACb,IAAIA,GAAG,EAAE;QACL,IAAI,CAAChB,aAAa,CAACQ,IAAI,CAACQ,GAAG,CAAC;;MAEhC,OAAO,IAAI,CAAC4B,YAAY;IAC5B,CAAC,CAAC,CACL;EACT;EAEAC,8BAA8B,CAACC,UAAkB;IAC7C,OAAO,IAAI,CAACnD,IAAI,CAACmB,GAAG,CAAc,wDAAwD,GAAGgC,UAAU,CAAC;EAC5G;EAAC;;;;AAxKQrD,qBAAqB,sDAHjCJ,yDAAU,CAAC;EACR0D,UAAU,EAAE;CACf,CAAC,GACWtD,qBAAqB,CA0KjC","sources":["./src/app/shared/_services/resource-filter.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {BehaviorSubject, switchMap} from \"rxjs\";\nimport {ResourceType} from \"../_models/resource-type.model\";\nimport {Resource} from \"../_models/resource.model\";\nimport {PaginationResponse} from \"../_models/pagination-response.model\";\nimport {ResourceFilters} from \"../_models/resource-filters.model\";\nimport {TemplatePagination} from \"../_models/template-pagination.model\";\nimport {ResourceTemplate} from \"../_models/resource-template.model\";\nimport * as moment from \"moment\";\nimport {Attribute} from \"../_models/attribute.model\";\nimport {CityRecommendation} from \"../_models/city-recommendation.model\";\n\nexport type SavedFilters = {\n    location?: string;\n    geographicalCoordinates?: {\n        longitude: number;\n        latitude: number;\n    };\n    dateAsDay: moment.Moment;\n    dateAsHour: moment.Moment;\n    startDate: moment.Moment;\n    endDate: moment.Moment;\n    startHour: moment.Moment;\n    endHour: moment.Moment;\n    adultsNumber: number;\n    childrenNumber: number;\n    roomsNumber: number;\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResourceFilterService {\n\n    // resource type state\n    private resourceTypeState = new BehaviorSubject<ResourceType>(null);\n    public resourceTypeObs$ = this.resourceTypeState.asObservable();\n\n    // resources pagination and filters state\n    private resourceListState = new BehaviorSubject<PaginationResponse>(null);\n    public resourceListObs$ = this.resourceListState.asObservable();\n\n    // resource template state\n    private resourceTemplateState = new BehaviorSubject<ResourceTemplate>(null);\n    public resourceTemplateObs$ = this.resourceTemplateState.asObservable();\n\n    // selected resource state\n    private resourceState = new BehaviorSubject<Resource>(null);\n    public resourceObs$ = this.resourceState.asObservable();\n\n\n    // filters\n    private filtersObj: ResourceFilters = null;\n\n    // data we save from filter-bar component, but don't use to filter resources\n    private savedFilters: SavedFilters = null;\n\n    // pagination\n    pageNr = 0;\n    pageSize = 10;\n    sortBy: string;\n    sortDirection: string;\n\n\n    // used for the modal in the itineraries\n    private resourceFromItinerary: Resource = null;\n\n    constructor(private http: HttpClient) {\n    }\n\n    checkIfItineraryModal() {\n        return !!this.resourceFromItinerary;\n    }\n\n    setResourceFromItinerary(resource: Resource) {\n        this.resourceFromItinerary = resource;\n    }\n\n    getResourceFromItinerary() {\n        return structuredClone(this.resourceFromItinerary);\n    }\n\n    initServiceStates() {\n        this.resourceTypeState.next(null);\n        this.resourceListState.next(null);\n        this.resourceTemplateState.next(null);\n        this.resourceState.next(null);\n        this.filtersObj = null;\n        this.savedFilters = null;\n        this.resourceFromItinerary = null;\n    }\n\n    getResourceTypeById(resourceTypeId: string) {\n        this.filtersObj = {\n            resourceTypeId: resourceTypeId,\n            status: 'active'\n        }\n        this.savedFilters = null;\n\n        return this.http.get<ResourceType>('/bestinform/getResourceTypeById?resourceTypeId=' + resourceTypeId)\n            .pipe(\n                switchMap(res => {\n                    if (res) {\n                        this.resourceTypeState.next(res);\n                        return this.resourceTypeObs$;\n                    }\n                })\n            );\n    }\n\n    setResourceType(resourceType: ResourceType) {\n        this.resourceTypeState.next(resourceType);\n    }\n\n    getAllCitiesRecommended(city: string) {\n        return this.http.get<CityRecommendation[]>('/bestinform/getAllCitiesRecommended?city=' + city);\n    }\n\n    listResourceFiltered(page: number, size: number, sort?: string, dir?: string) {\n        this.pageNr = page;\n        this.pageSize = size;\n        this.sortBy = sort;\n        this.sortDirection = dir;\n\n        return this.http.post<PaginationResponse>('/bestinform/listResourceFiltered?page=' + page + '&size=' + size + '&sort=' + sort + '&dir=' + dir, this.filtersObj)\n            .pipe(\n                switchMap(res => {\n                    if (res) {\n                        this.resourceListState.next(res);\n                        return this.resourceListObs$;\n                    }\n                })\n            );\n    }\n\n    updateFilters(newFilters: ResourceFilters) {\n        this.filtersObj = {...this.filtersObj, ...newFilters};\n\n        return this.http.post<PaginationResponse>('/bestinform/listResourceFiltered?page=' + this.pageNr + '&size=' + this.pageSize + '&sort=' + this.sortBy + '&dir=' + this.sortDirection, this.filtersObj)\n            .pipe(\n                switchMap(res => {\n                    if (res) {\n                        this.resourceListState.next(res);\n                        return this.resourceListObs$;\n                    }\n                })\n            );\n    }\n\n    getResourceTemplateByResourceTypeId(resourceTypeId: string) {\n        return this.http.post<TemplatePagination>('/bestinform/listResourceTemplateFiltered?page=0&size=1', {resourceTypeId: resourceTypeId})\n            .pipe(\n                switchMap( res => {\n                    if (res?.content?.length > 0) {\n                        this.resourceTemplateState.next(res.content[0]);\n                        return this.resourceTemplateObs$;\n                    } else {\n                        this.resourceTemplateState.next(null);\n                        return this.resourceTemplateObs$;\n                    }\n                })\n            );\n    }\n\n    updateSavedFilters(newFilters: SavedFilters) {\n        this.savedFilters = {...newFilters};\n    }\n\n    getSavedFilters(): SavedFilters {\n        return this.savedFilters;\n    }\n\n    private isValidResource(resource: object): resource is Resource {\n        return 'domain' in resource && 'categoryId' in resource && 'resourceTypeId' in resource;\n    }\n\n    getResourceById(resourceId: string) {\n        // const resourceFromHistory = history.state;\n        // if (this.isValidResource(resourceFromHistory) && resourceFromHistory.id === resourceId) {\n        //     this.resourceState.next(resourceFromHistory);\n        //     return this.resourceObs$;\n        // }\n        if (this.checkIfItineraryModal()) {\n            this.resourceState.next(this.resourceFromItinerary);\n            return this.resourceObs$;\n        }\n\n        return this.http.get<Resource>('/bestinform/getResourceById?resourceId=' + resourceId)\n            .pipe(\n                switchMap( res => {\n                    if (res) {\n                        this.resourceState.next(res);\n                    }\n                    return this.resourceObs$;\n                })\n            );\n    }\n\n    getFilterAttributeFromTemplate(templateId: string) {\n        return this.http.get<Attribute[]>('/bestinform/getFilterAttributeFromTemplate?templateId=' + templateId);\n    }\n\n}\n"],"names":["Injectable","HttpClient","BehaviorSubject","switchMap","ResourceFilterService","constructor","http","resourceTypeState","asObservable","resourceListState","resourceTemplateState","resourceState","checkIfItineraryModal","resourceFromItinerary","setResourceFromItinerary","resource","getResourceFromItinerary","structuredClone","initServiceStates","next","filtersObj","savedFilters","getResourceTypeById","resourceTypeId","status","get","pipe","res","resourceTypeObs$","setResourceType","resourceType","getAllCitiesRecommended","city","listResourceFiltered","page","size","sort","dir","pageNr","pageSize","sortBy","sortDirection","post","resourceListObs$","updateFilters","newFilters","getResourceTemplateByResourceTypeId","content","length","resourceTemplateObs$","updateSavedFilters","getSavedFilters","isValidResource","getResourceById","resourceId","resourceObs$","getFilterAttributeFromTemplate","templateId","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}