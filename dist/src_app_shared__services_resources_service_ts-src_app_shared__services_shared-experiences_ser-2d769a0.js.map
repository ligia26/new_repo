{"version":3,"file":"src_app_shared__services_resources_service_ts-src_app_shared__services_shared-experiences_ser-2d769a0.js","mappings":"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","sources":["./src/app/shared/_services/resources.service.ts","./src/app/shared/_services/shared-experiences.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Category} from \"../_models/category.model\";\nimport {ResourceType} from \"../_models/resource-type.model\";\nimport {Resource} from \"../_models/resource.model\";\nimport {PaginationResponse} from \"../_models/pagination-response.model\";\nimport {Domain} from \"../_models/domain.model\";\nimport {BehaviorSubject} from 'rxjs';\nimport {ResourceFilters} from \"../_models/resource-filters.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResourcesService {\n\n    // Functions For Changes Detection\n    private listChanged = new BehaviorSubject(false);\n    listChangedObs = this.listChanged.asObservable();\n\n    // Trigger list changes\n    triggerListChanges(message: boolean) {\n        // Change the subject value\n        this.listChanged.next(message);\n    }\n\n    constructor(private http: HttpClient) {\n    }\n\n    getAttributesFromTemplate(id: string) {\n        return this.http.get('/bestinform/getAttributesFromTemplate?resourceTemplateId=' + id)\n    }\n\n    getListOfDomains() {\n        return this.http.get('/bestinform/getListOfDomains');\n    }\n\n    getResourceByDomain(resourceDomain: string) {\n        return this.http.get('/bestinform/getAllResourceCategoriesByResourceDomain?resourceDomain=' + encodeURIComponent(resourceDomain));\n    }\n\n    getResourceCategoryById(categoryId: string) {\n        return this.http.get<Category>('/bestinform/getResourceCategoryById?resourceCategoryId=' + categoryId);\n    }\n\n    updateResourceCategory(categoryId: string, resCategory: Category) {\n        return this.http.put('/bestinform/updateResourceCategory?resourceCategoryId=' + categoryId, resCategory);\n    }\n\n    getAllResourceTypes() {\n        return this.http.get('/bestinform/getAllResourceTypes');\n    }\n\n    getAllResourceCategoriesByResourceDomain(domainId: string, hideCategories?: boolean) {\n        return this.http.get<Category[]>('/bestinform/getAllResourceCategoriesByResourceDomain?resourceDomain=' + domainId + '&hideCategories=' + (hideCategories ? hideCategories : false));\n    }\n\n    getAllResourceTypesByResourceCategory(id) {\n        return this.http.get<ResourceType[]>('/bestinform/getAllResourceTypesByResourceCategory?resourceCategoryId=' + id);\n    }\n\n    deleteResourceTypeById(id: string) {\n        return this.http.delete('/bestinform/deleteResourceTypeById?resourceTypeId=' + id);\n    }\n\n    getResourceTypeById(resourceTypeId) {\n        return this.http.get<ResourceType>('/bestinform/getResourceTypeById?resourceTypeId=' + resourceTypeId);\n    }\n\n\n    deleteResourceCategory(resourceId: string) {\n        return this.http.delete('/bestinform/deleteCategoryById?resourceCategoryId=' + resourceId);\n    }\n\n    getMaxOrderForCategory(domainId) {\n        return this.http.get('/bestinform/getMaxOrderByDomainId?domainId=' + domainId);\n    }\n\n    getMaxOrderForResType(categoryId) {\n        return this.http.get('/bestinform/getMaxOrderByCategoryId?categoryId=' + categoryId);\n    }\n\n    addResourceCategory(category) {\n        return this.http.post('/bestinform/addResourceCategory', category);\n    }\n\n    // addReviewToResource(reservationId, review:boolean) {\n    //     return this.http.post('/bestinform/addReviewToResource?reservationId='+reservationId+'&review='+review,{});\n    // }\n\n    //changeReservationStatus\n    addReviewToResource(reservationId: string, review: boolean) {\n        return this.http.post('/bestinform/addReviewToResource?reservationId=' + reservationId + '&review=' + review, {});\n    }\n\n    addResourceType(resType) {\n        return this.http.post('/bestinform/addResourceType', resType);\n    }\n\n    listCategoryFiltered(page: number, size: number, sort?: string, dir?: string, filters?: object) {\n        return this.http.post('/bestinform/listResourceCategoriesFiltered?page=' + page + '&size=' + size + '&sort=' + sort + '&dir=' + dir, filters);\n    }\n\n    //resources list\n    listResourceFiltered(page: number, size: number, sort?: string, dir?: string, filters?: ResourceFilters) {\n        return this.http.post<PaginationResponse>('/bestinform/listResourceFiltered?page=' + page + '&size=' + size + '&sort=' + sort + '&dir=' + dir, filters ? filters : {});\n    }\n\n    updateResourceType(resTypeId, resType) {\n        return this.http.put('/bestinform/updateResourceType?resourceTypeId=' + resTypeId, resType);\n    }\n\n    getResourceById(resourceId) {\n        return this.http.get<Resource>('/bestinform/getResourceById?resourceId=' + resourceId);\n    }\n\n    getAttributes(attributesList) {\n        return this.http.post('/bestinform/getAttributes', attributesList);\n    }\n\n    getAttributeCategories(categoryList) {\n        return this.http.post('/bestinform/getAttributeCategories', categoryList)\n    }\n\n\n    //Favorites resources\n    getMyFavoritesResources(language: string) {\n        return this.http.get('/bestinform/getMyFavoriteResources?language=' + language);\n    }\n\n    deleteResourceFromFavorite(resourceId: string) {\n        return this.http.post<{ success: boolean, reason: string }>('/bestinform/deleteResourceFromFavorites?resourceId=' + resourceId, {});\n    }\n\n    addResourceToFavorite(resourceId: string) {\n        return this.http.post<{ success: boolean, reason: string }>('/bestinform/addResourceToFavorites?resourceId=' + resourceId, {});\n    }\n\n\n    getDomainById(domainId: string) {\n        return this.http.get<Domain>('/bestinform/getDomainById?domainId=' + domainId);\n    }\n\n\n    //temporar\n    deleteResource(resourceId: string) {\n        return this.http.delete('/bestinform/deleteResource?resourceId=' + resourceId);\n    }\n\n    changeStatusForResource(resourceId: string, status: string) {\n        return this.http.put('/bestinform/changeResourceStatus?resourceId=' + resourceId + '&status=' + status, {});\n    }\n\n    getTimepickerByResourceId(resourceId: string) {\n        return this.http.get('/bestinform/getBookingTimePickerByResourceId?resourceId=' + resourceId);\n    }\n\n    getRoomById(roomId: string) {\n        return this.http.get('/bestinform/getRoomById?roomItemId=' + roomId);\n    }\n\n    getProductsByResourceId(resourceId: string) {\n        return this.http.get('/bestinform/getProductListByResourceId?resourceId=' + resourceId);\n    }\n\n    getTimeslotsByResourceId(resourceId: string) {\n        return this.http.get('/bestinform/getBookingTimeSlotListByResourceId?resourceId=' + resourceId);\n    }\n\n    getAvailableSlotByDate(timeslotId: string, date: string) {\n        return this.http.get('/bestinform/getAvailableSlotsByDate?bookingTimeSlotId=' + timeslotId + '&date=' + date);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {SharedExperience} from \"../_models/shared-experience.model\";\nimport {share} from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class SharedExperiencesService{\n\n    constructor(private http: HttpClient) {\n    }\n\n    listSharedExperiencesFiltered(page: number, size: number, sort?: string, dir?: string, filters?: object) {\n        return this.http.post('/bestinform/listSharedExperienceFiltered?page=' + page + '&size=' + size + '&sort=' + sort + '&dir=' + dir, filters);\n    }\n\n    getSharedExperienceById(sharedExperienceId: string){\n        return this.http.get('/bestinform/getSharedExperienceById?sharedExperienceId='+ sharedExperienceId);\n    }\n\n    getSharedExperienceBySlug(sharedExperienceSlug: string){\n        return this.http.get('/bestinform/getSharedExperienceBySlug?slug=' + sharedExperienceSlug);\n    }\n\n    createSharedExperience(sharedExperience: SharedExperience){\n        return this.http.post('/bestinform/addSharedExperience', sharedExperience);\n    }\n\n    updateSharedExperience(sharedExperienceId: string, sharedExperience: SharedExperience){\n        return this.http.put('/bestinform/updateSharedExperience?sharedExperienceId='+ sharedExperienceId, sharedExperience);\n    }\n\n    requestToJoinSharedExperience(sharedExperienceId: string){\n        return this.http.post('/bestinform/askToJoinSharedExperience?sharedExperienceId=' + sharedExperienceId, {});\n    }\n\n    respondToRequest(sharedExperienceId: string, guestUserId: string, accepted: boolean){\n        return this.http.post('/bestinform/acceptRequestToJoinSharedExperience?sharedExperienceId='+sharedExperienceId + '&guestUserId='+guestUserId + '&acceptRequest='+accepted,{});\n    }\n\n    deleteParticipantFromExperience(sharedExperienceId: string, participantId: string){\n        return this.http.delete('/bestinform/deleteParticipantFromSharedExperience?sharedExperienceId='+sharedExperienceId+'&participantId='+participantId);\n    }\n\n    leaveSharedExperience(sharedExperienceId: string){\n        return this.http.post('/bestinform/leaveSharedExperience?sharedExperienceId='+ sharedExperienceId, {});\n    }\n\n    deleteSharedExperience(sharedExperienceId: string){\n        return this.http.delete('/bestinform/deleteSharedExperience?sharedExperienceId='+ sharedExperienceId);\n    }\n}"],"names":["Injectable","HttpClient","BehaviorSubject","ResourcesService","triggerListChanges","message","listChanged","next","constructor","http","asObservable","getAttributesFromTemplate","id","get","getListOfDomains","getResourceByDomain","resourceDomain","encodeURIComponent","getResourceCategoryById","categoryId","updateResourceCategory","resCategory","put","getAllResourceTypes","getAllResourceCategoriesByResourceDomain","domainId","hideCategories","getAllResourceTypesByResourceCategory","deleteResourceTypeById","delete","getResourceTypeById","resourceTypeId","deleteResourceCategory","resourceId","getMaxOrderForCategory","getMaxOrderForResType","addResourceCategory","category","post","addReviewToResource","reservationId","review","addResourceType","resType","listCategoryFiltered","page","size","sort","dir","filters","listResourceFiltered","updateResourceType","resTypeId","getResourceById","getAttributes","attributesList","getAttributeCategories","categoryList","getMyFavoritesResources","language","deleteResourceFromFavorite","addResourceToFavorite","getDomainById","deleteResource","changeStatusForResource","status","getTimepickerByResourceId","getRoomById","roomId","getProductsByResourceId","getTimeslotsByResourceId","getAvailableSlotByDate","timeslotId","date","providedIn","SharedExperiencesService","listSharedExperiencesFiltered","getSharedExperienceById","sharedExperienceId","getSharedExperienceBySlug","sharedExperienceSlug","createSharedExperience","sharedExperience","updateSharedExperience","requestToJoinSharedExperience","respondToRequest","guestUserId","accepted","deleteParticipantFromExperience","participantId","leaveSharedExperience","deleteSharedExperience"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}