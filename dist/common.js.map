{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/features/editorials/_services/editorials.service.ts","./src/app/features/itineraries/_services/itineraries.service.ts","./src/app/features/landing-bestinform/landing-service.service.ts","./src/app/standalone-components/user-settings/user-settings.component.ts","./src/app/standalone-components/user-settings/user-settings.component.scss"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class EditorialsService {\n  constructor(private http: HttpClient) {\n  }\n\n  baseApiUrl = \"/bestinform/uploadEditorialImage\";\n\n  //udate the editorial\n  updateEditorial(editorialId : string, editorial: object) {\n    return this.http.put('/bestinform/updateEditorial?editorialId=' + editorialId, editorial);\n  }\n\n  //change editorial status\n  changeEditorialStatus(editorialId : string, status : string) {\n    return this.http.put('/bestinform/changeEditorialStatus?editorialId=' + editorialId + '&status=' + status, {});\n  }\n\n   // Returns an observable\n   uploadEditorialImage(editorialId : string, file: Blob): Observable<unknown> {\n\n    // Create form data\n    const formData = new FormData();\n\n    // Store form name as \"file\" with file data\n    formData.append(\"file\", file);\n\n    // Make http post request over api\n    // with formData as req\n    return this.http.post(this.baseApiUrl + '?editorialId=' + editorialId, formData)\n\n  }\n\n   //create editorial\n   addEditorial(editorial: object) {\n    return this.http.post('/bestinform/addEditorial', editorial);\n  }\n\n  //get all editorials\n  listEditorialFiltered(page: number, size: number, sort?: string | null, dir?: string | null, filterParams?: object) {\n    return this.http.post('/bestinform/listEditorialFiltered?page=' + page + '&size=' + size + '&sort=' + sort + '&dir=' + dir, filterParams);\n  }\n\n    //get editorial by slug\n    getEditorialBySlug(slug: string) {\n        return this.http.get('/bestinform/getEditorialBySlug?slug=' + slug);\n      }\n\n    //get editorial By Id\n    getEditorialById(editorialId : string) {\n        return this.http.get('/bestinform/getEditorialById?editorialId=' + editorialId );\n    }\n\n  //deletePaymentDocument\n  deleteEditorialById(editorialId: string) {\n    return this.http.delete('/bestinform/deleteEditorialById?editorialId=' + editorialId );\n  }\n\n  getUserById(userId :string){\n    return this.http.get(\"/bestinform/getUserById?userId=\"+ userId );\n  }\n\n  getCurrentUser(){\n    return this.http.get(\"/bestinform/getCurrentUser\");\n  }\n\n  getEditorialCategories(){\n      return this.http.get('/bestinform/getEditorialCategories');\n  }\n\n  getEditorialCategoriesById(id: string){\n      return this.http.get('/bestinform/getEditorialCategoryById?categoryId=' + id);\n  }\n\n  getEditorialSubcategoriesByCategoryId(id: string){\n      return this.http.get('/bestinform/getEditorialSubcategoriesForCategory?categoryId='+ id);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Itinerary} from \"../../../shared/_models/itinerary.model\";\nimport {ResourceType} from \"../../../shared/_models/resource-type.model\";\nimport {SystemSetting} from \"../../../shared/_models/system-setting.model\";\nimport {forkJoin, Observable, of, switchMap} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {Attribute} from \"../../../shared/_models/attribute.model\";\nimport {GenericPagination} from \"../../../shared/_models/generic-pagination.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ItinerariesService {\n\n    private itineraryState: Itinerary = null;\n\n    setItineraryState(itinerary: Itinerary): void {\n        this.itineraryState = itinerary;\n    }\n\n    getItineraryById(itineraryId: string): Observable<Itinerary> {\n        if (this.itineraryState?.id === itineraryId) {\n            return of(this.itineraryState);\n        }\n        return this.http.get<Itinerary>('/bestinform/getItineraryById?itineraryId=' + itineraryId);\n    }\n\n    constructor(private http: HttpClient) {\n    }\n\n    createItinerary(itinerary: Itinerary) {\n        return this.http.post<{ success: boolean, reason: string }>('/bestinform/createItinerary', itinerary);\n    }\n\n    updateItinerary(itineraryId: string, itineraryData: Itinerary) {\n        return this.http.put<{ success: boolean, reason: string }>('/bestinform/updateItinerary?itineraryId=' + itineraryId, itineraryData);\n    }\n\n    /**\n     * returns in this order:\n     * journeyTheme\n     * typeOfDestination\n     * typeOfJourney\n     */\n    getCategoryAttributes(): Observable<Array<Attribute[]>> {\n        return this.http.get<SystemSetting>('/bestinform/getSystemSetting')\n            .pipe(\n                switchMap(systemSettings => {\n                    const attributesByCategoryId$ = [];\n\n                    if (systemSettings.journeyThemeCategoryId) {\n                        attributesByCategoryId$.push(this.getAttributesByCategoryId(systemSettings.journeyThemeCategoryId));\n                    } else {\n                        attributesByCategoryId$.push(of(null));\n                    }\n\n                    if (systemSettings.typeOfDestinationCategoryId) {\n                        attributesByCategoryId$.push(this.getAttributesByCategoryId(systemSettings.typeOfDestinationCategoryId));\n                    } else {\n                        attributesByCategoryId$.push(of(null));\n                    }\n\n                    if (systemSettings.typeOfJourneyCategoryId) {\n                        attributesByCategoryId$.push(this.getAttributesByCategoryId(systemSettings.typeOfJourneyCategoryId));\n                    } else {\n                        attributesByCategoryId$.push(of(null));\n                    }\n\n                    return forkJoin(attributesByCategoryId$);\n                })\n            );\n    }\n\n    private getAttributesByCategoryId(categoryId: string) {\n        return this.http.post<GenericPagination<Attribute>>('/bestinform/listAttributesFiltered?page=0&size=-1', {categoryId: categoryId})\n            .pipe(map(attributePagination => attributePagination.content));\n    }\n\n    getAllResourceTypes() {\n        return this.http.get<ResourceType[]>('/bestinform/getAllResourceTypes');\n    }\n\n    getRentalBookingResourceTypes() {\n        return this.http.get<ResourceType[]>('/bestinform/getRentalBookingResourceTypes');\n    }\n\n    getTicketBookingResourceTypes() {\n        return this.http.get<ResourceType[]>('/bestinform/getTicketBookingResourceTypes');\n    }\n\n    getMenuResourceTypes() {\n        return this.http.get<ResourceType[]>('/bestinform/getMenuResourceTypes');\n    }\n\n    listItinerariesFiltered(page: number, size: number, sort?: string | null, dir?: string | null, filterParams?: object) {\n        return this.http.post<GenericPagination<Itinerary>>('/bestinform/listItineraryFiltered?page=' + page + '&size=' + size + '&sort=' + sort + '&dir=' + dir, filterParams);\n    }\n\n    deleteItineraryById(itineraryId: string) {\n        return this.http.delete('/bestinform/deleteItineraryById?itineraryId=' + itineraryId);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LandingService {\n\n    constructor(private http: HttpClient) {\n    }\n\n    createLandingContact(formBody: object) {\n        return this.http.post('/bestinform/createLandingContact', formBody);\n    }\n\n    updateLandingSubscription(formBody: object){\n        return this.http.put('/bestinform/updateLandingSubscription', formBody);\n    }\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {ToastService} from \"../../shared/_services/toast.service\";\nimport {UserDataService} from \"../../shared/_services/userData.service\";\n// import {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {CommonModule} from \"@angular/common\";\nimport {MatOption, MatOptionModule} from \"@angular/material/core\";\n// import {MatSelectModule} from \"@angular/material/select\";\n// import {MatInputModule} from \"@angular/material/input\";\nimport {MatSlideToggleModule} from \"@angular/material/slide-toggle\";\nimport {MatLegacyInputModule as MatInputModule} from \"@angular/material/legacy-input\";\nimport {MatLegacyFormFieldModule as MatFormFieldModule} from \"@angular/material/legacy-form-field\";\nimport {MatLegacySelectModule as MatSelectModule} from \"@angular/material/legacy-select\";\nimport {MatLegacyCheckboxModule as MatCheckboxModule} from \"@angular/material/legacy-checkbox\";\nimport {DashboardHeaderComponent} from \"../dashboard-header/dashboard-header.component\";\nimport {LocalStorageService} from \"../../shared/_services/localStorage.service\";\nimport {TranslateModule} from \"@ngx-translate/core\";\n\n\n@Component({\n  selector: 'app-user-settings',\n  templateUrl: './user-settings.component.html',\n  styleUrls: ['./user-settings.component.scss'],\n  standalone: true,\n  imports: [FormsModule, ReactiveFormsModule, MatFormFieldModule, CommonModule, MatCheckboxModule, MatInputModule, MatSelectModule, MatSlideToggleModule, DashboardHeaderComponent, TranslateModule]\n})\nexport class UserSettingsComponent implements OnInit {\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private fb: FormBuilder,\n              private toastService: ToastService,\n              public userService: UserDataService,\n              private localStorage: LocalStorageService) { }\n\n  currentUser: any;\n\n  form: FormGroup = this.fb.group({\n    language: [null, Validators.required],\n    distanceUnitMeasure: [null, Validators.required],\n    temperatureUnitMeasure: [null, Validators.required],\n    currency: [null, Validators.required],\n    enablePushNotifications: [null],\n    // enableLocation: [null],\n    enableSharedResource: [null, Validators.required],\n    // acceptTermsAndConditions: [null, Validators.requiredTrue],\n    // twoFactorAuthentication:[null],\n    colorMode: [null]\n  });\n\n  getCurrentSettings() {\n    this.userService.getCurrentSetting().subscribe((resp: any) => {\n      console.log('setari', resp);\n      this.form.patchValue(resp);\n    })\n  }\n\n  getCurrentUser() {\n    this.userService.getCurrentUser().subscribe((res: any) => {\n      console.log('user', res);\n      this.currentUser = res;\n      this.getCurrentSettings();\n    })\n  }\n\n  ngOnInit() {\n    this.getCurrentUser();\n  }\n\n  submit() {\n    if(this.form.valid) {\n      this.userService.updateCurrentSetting(this.form.value).subscribe((resp: any) => {\n        console.log('TRimis setari');\n        console.log(resp);\n        if (resp.success) {\n          this.toastService.showToast('Succes', 'Setările au fost modificate! Site-ul se va actualiza cu noile setări.', 'success');\n          this.localStorage.set('langFromStorage', this.form.value.language);\n          this.localStorage.set('colorMode', this.form.value.colorMode);\n          setTimeout(() => {\n            location.reload();\n          }, 3000);\n        } else {\n          this.toastService.showToast('Eroare', 'Eroare de la server!', 'error');\n        }\n      }, () => {\n        this.toastService.showToast('Eroare', 'Eroare de la server!', 'error');\n      })\n    } else {\n      this.toastService.showToast('Eroare', 'Trebuie să completați toate câmpurile obligatorii și să acceptați termenii și condițiile', 'error');\n    }\n\n  }\n\n}\n","// Imports\nvar ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\");\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___.toString();\n"],"names":["Injectable","HttpClient","EditorialsService","constructor","http","updateEditorial","editorialId","editorial","put","changeEditorialStatus","status","uploadEditorialImage","file","formData","FormData","append","post","baseApiUrl","addEditorial","listEditorialFiltered","page","size","sort","dir","filterParams","getEditorialBySlug","slug","get","getEditorialById","deleteEditorialById","delete","getUserById","userId","getCurrentUser","getEditorialCategories","getEditorialCategoriesById","id","getEditorialSubcategoriesByCategoryId","providedIn","forkJoin","of","switchMap","map","ItinerariesService","setItineraryState","itinerary","itineraryState","getItineraryById","itineraryId","createItinerary","updateItinerary","itineraryData","getCategoryAttributes","pipe","systemSettings","attributesByCategoryId$","journeyThemeCategoryId","push","getAttributesByCategoryId","typeOfDestinationCategoryId","typeOfJourneyCategoryId","categoryId","attributePagination","content","getAllResourceTypes","getRentalBookingResourceTypes","getTicketBookingResourceTypes","getMenuResourceTypes","listItinerariesFiltered","deleteItineraryById","LandingService","createLandingContact","formBody","updateLandingSubscription","Component","ActivatedRoute","Router","FormBuilder","FormsModule","ReactiveFormsModule","Validators","ToastService","UserDataService","CommonModule","MatSlideToggleModule","MatLegacyInputModule","MatInputModule","MatLegacyFormFieldModule","MatFormFieldModule","MatLegacySelectModule","MatSelectModule","MatLegacyCheckboxModule","MatCheckboxModule","DashboardHeaderComponent","LocalStorageService","TranslateModule","UserSettingsComponent","route","router","fb","toastService","userService","localStorage","group","language","required","distanceUnitMeasure","temperatureUnitMeasure","currency","enablePushNotifications","enableSharedResource","colorMode","getCurrentSettings","getCurrentSetting","subscribe","resp","console","log","form","patchValue","res","currentUser","ngOnInit","submit","valid","updateCurrentSetting","value","success","showToast","set","setTimeout","location","reload","selector","template","standalone","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}